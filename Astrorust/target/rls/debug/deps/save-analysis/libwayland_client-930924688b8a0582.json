{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13","program":"/home/clozed/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","wayland_client","/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-Cembed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"cursor\"","--cfg","feature=\"dlopen\"","--cfg","feature=\"egl\"","--cfg","feature=\"native_lib\"","--cfg","feature=\"wayland-sys\"","-C","metadata=930924688b8a0582","-C","extra-filename=-930924688b8a0582","--out-dir","/home/clozed/astrorust/Astrorust/target/rls/debug/deps","-L","dependency=/home/clozed/astrorust/Astrorust/target/rls/debug/deps","--extern","bitflags=/home/clozed/astrorust/Astrorust/target/rls/debug/deps/libbitflags-b7cb6f2855b37747.rmeta","--extern","downcast_rs=/home/clozed/astrorust/Astrorust/target/rls/debug/deps/libdowncast_rs-04a6b6d38df1b78f.rmeta","--extern","libc=/home/clozed/astrorust/Astrorust/target/rls/debug/deps/liblibc-0942177e61e92f63.rmeta","--extern","nix=/home/clozed/astrorust/Astrorust/target/rls/debug/deps/libnix-4c062e782b3efe8d.rmeta","--extern","wayland_commons=/home/clozed/astrorust/Astrorust/target/rls/debug/deps/libwayland_commons-8d2b6b118ab4bc7c.rmeta","--extern","wayland_sys=/home/clozed/astrorust/Astrorust/target/rls/debug/deps/libwayland_sys-092b953f86d0e527.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/clozed/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/clozed/astrorust/Astrorust/target/rls/debug/deps/libwayland_client-930924688b8a0582.rmeta"},"prelude":{"crate_id":{"name":"wayland_client","disambiguator":[8547408669730713876,8048898669743412736]},"crate_root":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src","external_crates":[{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[18437716656233032650,2349106724991734091]}},{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[16851962707842592855,4932765248485690217]}},{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[3049591816127030880,10952373373500329976]}},{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[11587085401131637304,2097967498245787009]}},{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[697141649018154369,16548652339936893370]}},{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[15777040323210795675,4562741973928336648]}},{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[15931681355194650171,7679759071890480571]}},{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[16378405889910241769,9643272937548158260]}},{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[8261542656080474758,5147161130074218296]}},{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[1712641478249352838,12464696676097716113]}},{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","num":11,"id":{"name":"backtrace_sys","disambiguator":[3715598662871405823,1939556143240013170]}},{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[4641845549064414815,7418938888650694907]}},{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","num":13,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[18127448783747998133,9149995038350923488]}},{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[8742225116956546677,8424782546207546390]}},{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","num":15,"id":{"name":"bitflags","disambiguator":[3913220441560649978,12679321023898702919]}},{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","num":16,"id":{"name":"libc","disambiguator":[1898386742133263843,6720254744606073441]}},{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","num":17,"id":{"name":"nix","disambiguator":[16475633153432687027,16538116030770940121]}},{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","num":18,"id":{"name":"cfg_if","disambiguator":[16691520207553097855,5782485460756469676]}},{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","num":19,"id":{"name":"void","disambiguator":[7642533320675662958,14978542871366400588]}},{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","num":20,"id":{"name":"wayland_commons","disambiguator":[12178675760657671114,17480992905727552774]}},{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","num":21,"id":{"name":"wayland_sys","disambiguator":[12844188235442221922,853194889467253449]}},{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","num":22,"id":{"name":"dlib","disambiguator":[2993169467917869454,5056693300844790419]}},{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","num":23,"id":{"name":"libloading","disambiguator":[4497213788789586463,1673426576200228610]}},{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","num":24,"id":{"name":"cfg_if","disambiguator":[10487014861562282928,9077454618309915830]}},{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","num":25,"id":{"name":"lazy_static","disambiguator":[4429584372382556774,11934523189258823667]}}],"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":0,"byte_end":11158,"line_start":1,"line_end":282,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":437},"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":6413,"byte_end":6425,"line_start":139,"line_end":139,"column_start":19,"column_end":31},"alias_span":null,"name":"ConnectError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":29},"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":6427,"byte_end":6434,"line_start":139,"line_end":139,"column_start":33,"column_end":40},"alias_span":null,"name":"Display","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":53},"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":6459,"byte_end":6469,"line_start":140,"line_end":140,"column_start":23,"column_end":33},"alias_span":null,"name":"EventQueue","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":55},"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":6471,"byte_end":6481,"line_start":140,"line_end":140,"column_start":35,"column_end":45},"alias_span":null,"name":"QueueToken","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":64},"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":6483,"byte_end":6498,"line_start":140,"line_end":140,"column_start":47,"column_end":62},"alias_span":null,"name":"ReadEventsGuard","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":455},"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":6519,"byte_end":6530,"line_start":141,"line_end":141,"column_start":19,"column_end":30},"alias_span":null,"name":"GlobalError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":93},"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":6532,"byte_end":6543,"line_start":141,"line_end":141,"column_start":32,"column_end":43},"alias_span":null,"name":"GlobalEvent","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":119},"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":6545,"byte_end":6562,"line_start":141,"line_end":141,"column_start":45,"column_end":62},"alias_span":null,"name":"GlobalImplementor","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":450},"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":6564,"byte_end":6577,"line_start":141,"line_end":141,"column_start":64,"column_end":77},"alias_span":null,"name":"GlobalManager","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":404},"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":6593,"byte_end":6601,"line_start":142,"line_end":142,"column_start":14,"column_end":22},"alias_span":null,"name":"ProxyMap","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":178},"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":6619,"byte_end":6627,"line_start":143,"line_end":143,"column_start":17,"column_end":25},"alias_span":null,"name":"NewProxy","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":140},"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":6629,"byte_end":6634,"line_start":143,"line_end":143,"column_start":27,"column_end":32},"alias_span":null,"name":"Proxy","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":20,"index":262},"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":6746,"byte_end":6761,"line_start":151,"line_end":151,"column_start":27,"column_end":42},"alias_span":null,"name":"AnonymousObject","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":20,"index":263},"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":6746,"byte_end":6761,"line_start":151,"line_end":151,"column_start":27,"column_end":42},"alias_span":null,"name":"AnonymousObject","value":"","parent":{"krate":0,"index":276}},{"kind":"Use","ref_id":{"krate":20,"index":256},"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":6763,"byte_end":6772,"line_start":151,"line_end":151,"column_start":44,"column_end":53},"alias_span":null,"name":"Interface","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":20,"index":243},"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":6774,"byte_end":6786,"line_start":151,"line_end":151,"column_start":55,"column_end":67},"alias_span":null,"name":"MessageGroup","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":20,"index":264},"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":6788,"byte_end":6797,"line_start":151,"line_end":151,"column_start":69,"column_end":78},"alias_span":null,"name":"NoMessage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":418},"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":7216,"byte_end":7228,"line_start":168,"line_end":168,"column_start":31,"column_end":43},"alias_span":null,"name":"protocol_interfaces","value":"","parent":{"krate":0,"index":410}},{"kind":"Use","ref_id":{"krate":21,"index":46},"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":7279,"byte_end":7285,"line_start":169,"line_end":169,"column_start":27,"column_end":33},"alias_span":null,"name":"client","value":"","parent":{"krate":0,"index":410}},{"kind":"Use","ref_id":{"krate":21,"index":6},"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":7287,"byte_end":7293,"line_start":169,"line_end":169,"column_start":35,"column_end":41},"alias_span":null,"name":"common","value":"","parent":{"krate":0,"index":410}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":7438,"byte_end":7439,"line_start":175,"line_end":175,"column_start":31,"column_end":32},"alias_span":null,"name":"*","value":"wl_display, wl_shm, wl_registry, wl_surface, wl_buffer","parent":{"krate":0,"index":415}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":0,"byte_end":11158,"line_start":1,"line_end":282,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":49},{"krate":0,"index":72},{"krate":0,"index":128},{"krate":0,"index":195},{"krate":0,"index":196},{"krate":0,"index":197},{"krate":0,"index":198},{"krate":0,"index":199},{"krate":0,"index":200},{"krate":0,"index":201},{"krate":0,"index":202},{"krate":0,"index":203},{"krate":0,"index":204},{"krate":0,"index":205},{"krate":0,"index":206},{"krate":0,"index":207},{"krate":0,"index":208},{"krate":0,"index":209},{"krate":0,"index":210},{"krate":0,"index":211},{"krate":0,"index":256},{"krate":0,"index":275},{"krate":0,"index":276},{"krate":0,"index":3782},{"krate":0,"index":277},{"krate":0,"index":278},{"krate":0,"index":279},{"krate":0,"index":280},{"krate":0,"index":410},{"krate":0,"index":415},{"krate":0,"index":417}],"decl_id":null,"docs":" Client-side Wayland connector","sig":null,"attributes":[{"value":"! Client-side Wayland connector","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":0,"byte_end":33,"line_start":1,"line_end":1,"column_start":1,"column_end":34}},{"value":"!","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":34,"byte_end":37,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! ## Overview","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":38,"byte_end":53,"line_start":3,"line_end":3,"column_start":1,"column_end":16}},{"value":"!","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":54,"byte_end":57,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"! This crate provides the interfaces and machinery to safely create","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":58,"byte_end":127,"line_start":5,"line_end":5,"column_start":1,"column_end":70}},{"value":"! client applications for the wayland protocol. It is a rust wrapper","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":128,"byte_end":198,"line_start":6,"line_end":6,"column_start":1,"column_end":71}},{"value":"! around the `libwayland-client.so` C library.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":199,"byte_end":247,"line_start":7,"line_end":7,"column_start":1,"column_end":49}},{"value":"!","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":248,"byte_end":251,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"! The wayland protocol revolves around the creation of various objects","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":252,"byte_end":324,"line_start":9,"line_end":9,"column_start":1,"column_end":73}},{"value":"! and the exchange of messages associated to these objects. The initial","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":325,"byte_end":398,"line_start":10,"line_end":10,"column_start":1,"column_end":74}},{"value":"! object is always the `Display`, that you get at initialization of the","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":399,"byte_end":472,"line_start":11,"line_end":11,"column_start":1,"column_end":74}},{"value":"! connection, exposed by this crate as `Display::connect_to_env()`.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":473,"byte_end":542,"line_start":12,"line_end":12,"column_start":1,"column_end":70}},{"value":"!","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":543,"byte_end":546,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"! ## Protocol and messages handling model","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":547,"byte_end":590,"line_start":14,"line_end":14,"column_start":1,"column_end":44}},{"value":"!","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":591,"byte_end":594,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"! The protocol being bi-directional, you can send and receive messages.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":595,"byte_end":668,"line_start":16,"line_end":16,"column_start":1,"column_end":74}},{"value":"! Sending messages is done via methods of `Proxy<_>` objects, receiving","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":669,"byte_end":742,"line_start":17,"line_end":17,"column_start":1,"column_end":74}},{"value":"! and handling them is done by providing implementations.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":743,"byte_end":802,"line_start":18,"line_end":18,"column_start":1,"column_end":60}},{"value":"!","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":803,"byte_end":806,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"! ### Proxies","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":807,"byte_end":822,"line_start":20,"line_end":20,"column_start":1,"column_end":16}},{"value":"!","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":823,"byte_end":826,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"! Wayland protocol objects are represented in this crate by `Proxy<I>`","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":827,"byte_end":899,"line_start":22,"line_end":22,"column_start":1,"column_end":73}},{"value":"! objects, where `I` is a type representing the interface of the considered","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":900,"byte_end":977,"line_start":23,"line_end":23,"column_start":1,"column_end":78}},{"value":"! object. And object's interface (think \"class\" in an object-oriented context)","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":978,"byte_end":1058,"line_start":24,"line_end":24,"column_start":1,"column_end":81}},{"value":"! defines which messages it can send and receive.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":1059,"byte_end":1110,"line_start":25,"line_end":25,"column_start":1,"column_end":52}},{"value":"!","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":1111,"byte_end":1114,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"! These proxies are used to send messages to the server (in the wayland context,","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":1115,"byte_end":1197,"line_start":27,"line_end":27,"column_start":1,"column_end":83}},{"value":"! these are called \"requests\"). To do so, you need to import the appropriate","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":1198,"byte_end":1276,"line_start":28,"line_end":28,"column_start":1,"column_end":79}},{"value":"! extension trait adding these methods. For example, to use a `Proxy<WlSurface>`,","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":1277,"byte_end":1360,"line_start":29,"line_end":29,"column_start":1,"column_end":84}},{"value":"! you need to import `protocol::wl_surface::RequestsTrait` from this crate.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":1361,"byte_end":1438,"line_start":30,"line_end":30,"column_start":1,"column_end":78}},{"value":"! It is also possible to directly use the `Proxy::<I>::send(..)` method, but","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":1439,"byte_end":1517,"line_start":31,"line_end":31,"column_start":1,"column_end":79}},{"value":"! this should only be done carefully: using it improperly can mess the protocol","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":1518,"byte_end":1599,"line_start":32,"line_end":32,"column_start":1,"column_end":82}},{"value":"! state and cause protocol errors, which are fatal to the connection (the server","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":1600,"byte_end":1682,"line_start":33,"line_end":33,"column_start":1,"column_end":83}},{"value":"! will kill you).","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":1683,"byte_end":1702,"line_start":34,"line_end":34,"column_start":1,"column_end":20}},{"value":"!","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":1703,"byte_end":1706,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"! There is not a 1 to 1 mapping between `Proxy<I>` instances and protocol","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":1707,"byte_end":1782,"line_start":36,"line_end":36,"column_start":1,"column_end":76}},{"value":"! objects. Rather, you can think of `Proxy<I>` as an `Rc`-like handle to a","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":1783,"byte_end":1859,"line_start":37,"line_end":37,"column_start":1,"column_end":77}},{"value":"! wayland object. Multiple instances of it can exist referring to the same","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":1860,"byte_end":1936,"line_start":38,"line_end":38,"column_start":1,"column_end":77}},{"value":"! protocol object.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":1937,"byte_end":1957,"line_start":39,"line_end":39,"column_start":1,"column_end":21}},{"value":"!","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":1958,"byte_end":1961,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"! Similarly, the lifetimes of the protocol objects and the `Proxy<I>` are","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":1962,"byte_end":2037,"line_start":41,"line_end":41,"column_start":1,"column_end":76}},{"value":"! not tightly tied. As protocol objects are created and destroyed by protocol","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":2038,"byte_end":2117,"line_start":42,"line_end":42,"column_start":1,"column_end":80}},{"value":"! messages, it can happen that an object gets destroyed while one or more","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":2118,"byte_end":2193,"line_start":43,"line_end":43,"column_start":1,"column_end":76}},{"value":"! `Proxy<I>` still refers to it. In such case, these proxies will be disabled","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":2194,"byte_end":2273,"line_start":44,"line_end":44,"column_start":1,"column_end":80}},{"value":"! and their `alive()` method will start to return `false`. Trying to send messages","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":2274,"byte_end":2358,"line_start":45,"line_end":45,"column_start":1,"column_end":85}},{"value":"! with them will also fail.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":2359,"byte_end":2388,"line_start":46,"line_end":46,"column_start":1,"column_end":30}},{"value":"!","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":2389,"byte_end":2392,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"! ### Implementations","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":2393,"byte_end":2416,"line_start":48,"line_end":48,"column_start":1,"column_end":24}},{"value":"!","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":2417,"byte_end":2420,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"! To receive and process messages from the server to you (in wayland context they are","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":2421,"byte_end":2508,"line_start":50,"line_end":50,"column_start":1,"column_end":88}},{"value":"! called \"events\"), you need to provide an `Implementation` for each wayland object","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":2509,"byte_end":2594,"line_start":51,"line_end":51,"column_start":1,"column_end":86}},{"value":"! created in the protocol session. Whenever a new protocol object is created, you will","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":2595,"byte_end":2683,"line_start":52,"line_end":52,"column_start":1,"column_end":89}},{"value":"! receive a `NewProxy<I>` object. Providing an implementation via its `implement()` method","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":2684,"byte_end":2776,"line_start":53,"line_end":53,"column_start":1,"column_end":93}},{"value":"! will turn it into a regular `Proxy<I>` object.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":2777,"byte_end":2827,"line_start":54,"line_end":54,"column_start":1,"column_end":51}},{"value":"!","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":2828,"byte_end":2831,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"! **All objects must be implemented**, even if it is an implementation doing nothing.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":2832,"byte_end":2919,"line_start":56,"line_end":56,"column_start":1,"column_end":88}},{"value":"! Failure to do so (by dropping the `NewProxy<I>` for example) can cause future fatal","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":2920,"byte_end":3007,"line_start":57,"line_end":57,"column_start":1,"column_end":88}},{"value":"! errors if the server tries to send an event to this object.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":3008,"byte_end":3071,"line_start":58,"line_end":58,"column_start":1,"column_end":64}},{"value":"!","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":3072,"byte_end":3075,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"! An implementation is just an `FnMut(I::Event, Proxy<I>), where `I` is the interface of","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":3076,"byte_end":3166,"line_start":60,"line_end":60,"column_start":1,"column_end":91}},{"value":"! the considered object.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":3167,"byte_end":3193,"line_start":61,"line_end":61,"column_start":1,"column_end":27}},{"value":"!","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":3194,"byte_end":3197,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"! ## Event Queues","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":3198,"byte_end":3217,"line_start":63,"line_end":63,"column_start":1,"column_end":20}},{"value":"!","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":3218,"byte_end":3221,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"! The wayland client machinery provides the possibility to have one or more event queues","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":3222,"byte_end":3312,"line_start":65,"line_end":65,"column_start":1,"column_end":91}},{"value":"! handling the processing of received messages. All wayland objects are associated to an","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":3313,"byte_end":3403,"line_start":66,"line_end":66,"column_start":1,"column_end":91}},{"value":"! event queue, which controls when its events are dispatched.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":3404,"byte_end":3467,"line_start":67,"line_end":67,"column_start":1,"column_end":64}},{"value":"!","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":3468,"byte_end":3471,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"! Events received from the server are stored in an internal buffer, and processed (by calling","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":3472,"byte_end":3567,"line_start":69,"line_end":69,"column_start":1,"column_end":96}},{"value":"! the appropriate implementations) when the associated event queue is dispatched.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":3568,"byte_end":3651,"line_start":70,"line_end":70,"column_start":1,"column_end":84}},{"value":"!","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":3652,"byte_end":3655,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"! A default event queue is created at the same time as the initial `Display`, and by default","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":3656,"byte_end":3750,"line_start":72,"line_end":72,"column_start":1,"column_end":95}},{"value":"! whenever a wayland object is created, it inherits the queue of its parent (the object that sent","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":3751,"byte_end":3850,"line_start":73,"line_end":73,"column_start":1,"column_end":100}},{"value":"! or receive the message that created the new object). It means that if you only plan to use the","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":3851,"byte_end":3949,"line_start":74,"line_end":74,"column_start":1,"column_end":99}},{"value":"! default event queue, you don't need to worry about assigning objects to their queues.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":3950,"byte_end":4039,"line_start":75,"line_end":75,"column_start":1,"column_end":90}},{"value":"!","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":4040,"byte_end":4043,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"! See the documentation of `EventQueue` for details about dispatching and integrating the event","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":4044,"byte_end":4141,"line_start":77,"line_end":77,"column_start":1,"column_end":98}},{"value":"! queue into the event loop of your application. See the `Proxy::make_wrapper()` method for","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":4142,"byte_end":4235,"line_start":78,"line_end":78,"column_start":1,"column_end":94}},{"value":"! details about assigning objects to event queues.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":4236,"byte_end":4288,"line_start":79,"line_end":79,"column_start":1,"column_end":53}},{"value":"!","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":4289,"byte_end":4292,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"! ## Dynamic linking with `libwayland-client.so`","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":4293,"byte_end":4343,"line_start":81,"line_end":81,"column_start":1,"column_end":51}},{"value":"!","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":4344,"byte_end":4347,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"! If you need to gracefully handle the case of a system on which wayland is not installed (by","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":4348,"byte_end":4443,"line_start":83,"line_end":83,"column_start":1,"column_end":96}},{"value":"! fallbacking to X11 for example), you can do so by activating the `dlopen` cargo feature.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":4444,"byte_end":4536,"line_start":84,"line_end":84,"column_start":1,"column_end":93}},{"value":"!","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":4537,"byte_end":4540,"line_start":85,"line_end":85,"column_start":1,"column_end":4}},{"value":"! When this is done, the library will be loaded a runtime rather than directly linked. And trying","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":4541,"byte_end":4640,"line_start":86,"line_end":86,"column_start":1,"column_end":100}},{"value":"! to create a `Display` on a system that does not have this library will return a `NoWaylandLib`","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":4641,"byte_end":4739,"line_start":87,"line_end":87,"column_start":1,"column_end":99}},{"value":"! error.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":4740,"byte_end":4750,"line_start":88,"line_end":88,"column_start":1,"column_end":11}},{"value":"!","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":4751,"byte_end":4754,"line_start":89,"line_end":89,"column_start":1,"column_end":4}},{"value":"! ## Auxiliary libraries","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":4755,"byte_end":4781,"line_start":90,"line_end":90,"column_start":1,"column_end":27}},{"value":"!","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":4782,"byte_end":4785,"line_start":91,"line_end":91,"column_start":1,"column_end":4}},{"value":"! Two auxiliary libraries are also available behind cargo features:","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":4786,"byte_end":4855,"line_start":92,"line_end":92,"column_start":1,"column_end":70}},{"value":"!","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":4856,"byte_end":4859,"line_start":93,"line_end":93,"column_start":1,"column_end":4}},{"value":"! - the `cursor` feature will try to load `libwayland-cursor.so`, a library helping with loading","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":4860,"byte_end":4958,"line_start":94,"line_end":94,"column_start":1,"column_end":99}},{"value":"!   system themed cursor textures, to integrate your app in the system theme.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":4959,"byte_end":5038,"line_start":95,"line_end":95,"column_start":1,"column_end":80}},{"value":"! - the `egl` feature will try to load `libwayland-egl.so`, a library allowing the creation of","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":5039,"byte_end":5135,"line_start":96,"line_end":96,"column_start":1,"column_end":97}},{"value":"!   OpenGL surface from wayland surfaces.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":5136,"byte_end":5179,"line_start":97,"line_end":97,"column_start":1,"column_end":44}},{"value":"!","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":5180,"byte_end":5183,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"! Both of them will also be loaded at runtime if the `dlopen` feature was provided. See their","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":5184,"byte_end":5279,"line_start":99,"line_end":99,"column_start":1,"column_end":96}},{"value":"! respective submodules for details about their use.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":5280,"byte_end":5334,"line_start":100,"line_end":100,"column_start":1,"column_end":55}},{"value":"!","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":5335,"byte_end":5338,"line_start":101,"line_end":101,"column_start":1,"column_end":4}},{"value":"! ### Event Loop integration","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":5339,"byte_end":5369,"line_start":102,"line_end":102,"column_start":1,"column_end":31}},{"value":"!","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":5370,"byte_end":5373,"line_start":103,"line_end":103,"column_start":1,"column_end":4}},{"value":"! The `eventloop` cargo feature adds the necessary implementations to use an `EventQueue`","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":5374,"byte_end":5465,"line_start":104,"line_end":104,"column_start":1,"column_end":92}},{"value":"! as a `calloop` event source. If you want to use it, here are a few points to take into","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":5466,"byte_end":5556,"line_start":105,"line_end":105,"column_start":1,"column_end":91}},{"value":"! account:","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":5557,"byte_end":5569,"line_start":106,"line_end":106,"column_start":1,"column_end":13}},{"value":"!","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":5570,"byte_end":5573,"line_start":107,"line_end":107,"column_start":1,"column_end":4}},{"value":"! - The `EventQueue` will not call its associated callback, but rather manage all the","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":5574,"byte_end":5661,"line_start":108,"line_end":108,"column_start":1,"column_end":88}},{"value":"!   event dispatching internally. As a result, there is no point registering it to","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":5662,"byte_end":5746,"line_start":109,"line_end":109,"column_start":1,"column_end":85}},{"value":"!   `calloop` with anything other than a dummy callback.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":5747,"byte_end":5805,"line_start":110,"line_end":110,"column_start":1,"column_end":59}},{"value":"! - You still need to call `Display::flush()` yourself between `calloop`s dispatches,","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":5806,"byte_end":5893,"line_start":111,"line_end":111,"column_start":1,"column_end":88}},{"value":"!   or in the `EventLoop::run()` callback of `calloop`.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":5894,"byte_end":5951,"line_start":112,"line_end":112,"column_start":1,"column_end":58}},{"value":"warn(missing_docs)","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":5953,"byte_end":5975,"line_start":114,"line_end":114,"column_start":1,"column_end":23}}]},{"kind":"TupleVariant","id":{"krate":0,"index":438},"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/display.rs","byte_start":11761,"byte_end":11773,"line_start":24,"line_end":24,"column_start":5,"column_end":17},"name":"NoWaylandLib","qualname":"::display::ConnectError::NoWaylandLib","value":"ConnectError::NoWaylandLib","parent":{"krate":0,"index":437},"children":[],"decl_id":null,"docs":" The library was compiled with the `dlopen` feature, and the `libwayland-client.so`\n library could not be found at runtime\n","sig":null,"attributes":[{"value":"/ The library was compiled with the `dlopen` feature, and the `libwayland-client.so`","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/display.rs","byte_start":11624,"byte_end":11710,"line_start":22,"line_end":22,"column_start":5,"column_end":91}},{"value":"/ library could not be found at runtime","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/display.rs","byte_start":11715,"byte_end":11756,"line_start":23,"line_end":23,"column_start":5,"column_end":46}}]},{"kind":"TupleVariant","id":{"krate":0,"index":440},"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/display.rs","byte_start":11848,"byte_end":11867,"line_start":26,"line_end":26,"column_start":5,"column_end":24},"name":"XdgRuntimeDirNotSet","qualname":"::display::ConnectError::XdgRuntimeDirNotSet","value":"ConnectError::XdgRuntimeDirNotSet","parent":{"krate":0,"index":437},"children":[],"decl_id":null,"docs":" The `XDG_RUNTIME_DIR` variable is not set while it should be\n","sig":null,"attributes":[{"value":"/ The `XDG_RUNTIME_DIR` variable is not set while it should be","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/display.rs","byte_start":11779,"byte_end":11843,"line_start":25,"line_end":25,"column_start":5,"column_end":69}}]},{"kind":"TupleVariant","id":{"krate":0,"index":442},"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/display.rs","byte_start":12080,"byte_end":12101,"line_start":31,"line_end":31,"column_start":5,"column_end":26},"name":"NoCompositorListening","qualname":"::display::ConnectError::NoCompositorListening","value":"ConnectError::NoCompositorListening","parent":{"krate":0,"index":437},"children":[],"decl_id":null,"docs":" Any needed library was found, but the listening socket of the server could not be\n found.","sig":null,"attributes":[{"value":"/ Any needed library was found, but the listening socket of the server could not be","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/display.rs","byte_start":11873,"byte_end":11958,"line_start":27,"line_end":27,"column_start":5,"column_end":90}},{"value":"/ found.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/display.rs","byte_start":11963,"byte_end":11973,"line_start":28,"line_end":28,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/display.rs","byte_start":11978,"byte_end":11981,"line_start":29,"line_end":29,"column_start":5,"column_end":8}},{"value":"/ Most of the time, this means that the program was not started from a wayland session.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/display.rs","byte_start":11986,"byte_end":12075,"line_start":30,"line_end":30,"column_start":5,"column_end":94}}]},{"kind":"TupleVariant","id":{"krate":0,"index":444},"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/display.rs","byte_start":12151,"byte_end":12162,"line_start":33,"line_end":33,"column_start":5,"column_end":16},"name":"InvalidName","qualname":"::display::ConnectError::InvalidName","value":"ConnectError::InvalidName","parent":{"krate":0,"index":437},"children":[],"decl_id":null,"docs":" The provided socket name is invalid\n","sig":null,"attributes":[{"value":"/ The provided socket name is invalid","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/display.rs","byte_start":12107,"byte_end":12146,"line_start":32,"line_end":32,"column_start":5,"column_end":44}}]},{"kind":"TupleVariant","id":{"krate":0,"index":446},"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/display.rs","byte_start":12224,"byte_end":12233,"line_start":35,"line_end":35,"column_start":5,"column_end":14},"name":"InvalidFd","qualname":"::display::ConnectError::InvalidFd","value":"ConnectError::InvalidFd","parent":{"krate":0,"index":437},"children":[],"decl_id":null,"docs":" The FD provided in `WAYLAND_SOCKET` was invalid\n","sig":null,"attributes":[{"value":"/ The FD provided in `WAYLAND_SOCKET` was invalid","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/display.rs","byte_start":12168,"byte_end":12219,"line_start":34,"line_end":34,"column_start":5,"column_end":56}}]},{"kind":"Enum","id":{"krate":0,"index":437},"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/display.rs","byte_start":11605,"byte_end":11617,"line_start":21,"line_end":21,"column_start":10,"column_end":22},"name":"ConnectError","qualname":"::display::ConnectError","value":"pub enum ConnectError {\n\n    /// The library was compiled with the `dlopen` feature, and the `libwayland-client.so`\n    /// library could not be found at runtime\n    NoWaylandLib,\n\n    /// The `XDG_RUNTIME_DIR` variable is not set while it should be\n    XdgRuntimeDirNotSet,\n\n    /// Any needed library was found, but the listening socket of the server could not be\n    /// found.\n    ///\n    /// Most of the time, this means that the program was not started from a wayland session.\n    NoCompositorListening,\n\n    /// The provided socket name is invalid\n    InvalidName,\n\n    /// The FD provided in `WAYLAND_SOCKET` was invalid\n    InvalidFd,\n}","parent":null,"children":[{"krate":0,"index":438},{"krate":0,"index":440},{"krate":0,"index":442},{"krate":0,"index":444},{"krate":0,"index":446}],"decl_id":null,"docs":" Enum representing the possible reasons why connecting to the wayland server failed\n","sig":null,"attributes":[{"value":"/ Enum representing the possible reasons why connecting to the wayland server failed","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/display.rs","byte_start":11492,"byte_end":11578,"line_start":19,"line_end":19,"column_start":1,"column_end":87}}]},{"kind":"Struct","id":{"krate":0,"index":29},"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/display.rs","byte_start":13337,"byte_end":13344,"line_start":63,"line_end":63,"column_start":12,"column_end":19},"name":"Display","qualname":"::display::Display","value":"Display {  }","parent":null,"children":[{"krate":0,"index":30}],"decl_id":null,"docs":" A connection to a wayland server","sig":null,"attributes":[{"value":"/ A connection to a wayland server","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/display.rs","byte_start":12987,"byte_end":13023,"line_start":56,"line_end":56,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/display.rs","byte_start":13024,"byte_end":13027,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ This object both represent the connection to the server, and as such","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/display.rs","byte_start":13028,"byte_end":13100,"line_start":58,"line_end":58,"column_start":1,"column_end":73}},{"value":"/ must be kept alive as long as you are connected, and contains the","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/display.rs","byte_start":13101,"byte_end":13170,"line_start":59,"line_end":59,"column_start":1,"column_end":70}},{"value":"/ primary `WlDisplay` wayland object, from which you can create all","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/display.rs","byte_start":13171,"byte_end":13240,"line_start":60,"line_end":60,"column_start":1,"column_end":70}},{"value":"/ your need objects. The inner `Proxy<WlDisplay>` can be accessed via","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/display.rs","byte_start":13241,"byte_end":13312,"line_start":61,"line_end":61,"column_start":1,"column_end":72}},{"value":"/ `Deref`.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/display.rs","byte_start":13313,"byte_end":13325,"line_start":62,"line_end":62,"column_start":1,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":32},"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/display.rs","byte_start":14036,"byte_end":14050,"line_start":80,"line_end":80,"column_start":12,"column_end":26},"name":"connect_to_env","qualname":"<Display>::connect_to_env","value":"pub fn connect_to_env() -> Result<(Display, EventQueue), ConnectError>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to connect to a wayland server using the contents of the environment variables","sig":null,"attributes":[{"value":"/ Attempt to connect to a wayland server using the contents of the environment variables","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/display.rs","byte_start":13410,"byte_end":13500,"line_start":68,"line_end":68,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/display.rs","byte_start":13505,"byte_end":13508,"line_start":69,"line_end":69,"column_start":5,"column_end":8}},{"value":"/ First of all, if the `WAYLAND_SOCKET` environment variable is set, it'll try to interpret","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/display.rs","byte_start":13513,"byte_end":13606,"line_start":70,"line_end":70,"column_start":5,"column_end":98}},{"value":"/ it as a FD number to use","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/display.rs","byte_start":13611,"byte_end":13639,"line_start":71,"line_end":71,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/display.rs","byte_start":13644,"byte_end":13647,"line_start":72,"line_end":72,"column_start":5,"column_end":8}},{"value":"/ If the `WAYLAND_DISPLAY` variable is set, it will try to connect to the socket it points","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/display.rs","byte_start":13652,"byte_end":13744,"line_start":73,"line_end":73,"column_start":5,"column_end":97}},{"value":"/ to. Otherwise, it will default to `wayland-0`.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/display.rs","byte_start":13749,"byte_end":13799,"line_start":74,"line_end":74,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/display.rs","byte_start":13804,"byte_end":13807,"line_start":75,"line_end":75,"column_start":5,"column_end":8}},{"value":"/ On success, you are given the `Display` object as well as the main `EventQueue` hosting","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/display.rs","byte_start":13812,"byte_end":13903,"line_start":76,"line_end":76,"column_start":5,"column_end":96}},{"value":"/ the `WlDisplay` wayland object.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/display.rs","byte_start":13908,"byte_end":13943,"line_start":77,"line_end":77,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/display.rs","byte_start":13948,"byte_end":13951,"line_start":78,"line_end":78,"column_start":5,"column_end":8}},{"value":"/ This requires the `XDG_RUNTIME_DIR` variable to be properly set.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/display.rs","byte_start":13956,"byte_end":14024,"line_start":79,"line_end":79,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":38},"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/display.rs","byte_start":15808,"byte_end":15823,"line_start":117,"line_end":117,"column_start":12,"column_end":27},"name":"connect_to_name","qualname":"<Display>::connect_to_name","value":"pub fn connect_to_name<S: Into<OsString>>(S)\n-> Result<(Display, EventQueue), ConnectError>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to connect to a wayland server socket with given name","sig":null,"attributes":[{"value":"/ Attempt to connect to a wayland server socket with given name","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/display.rs","byte_start":15506,"byte_end":15571,"line_start":111,"line_end":111,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/display.rs","byte_start":15576,"byte_end":15579,"line_start":112,"line_end":112,"column_start":5,"column_end":8}},{"value":"/ On success, you are given the `Display` object as well as the main `EventQueue` hosting","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/display.rs","byte_start":15584,"byte_end":15675,"line_start":113,"line_end":113,"column_start":5,"column_end":96}},{"value":"/ the `WlDisplay` wayland object.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/display.rs","byte_start":15680,"byte_end":15715,"line_start":114,"line_end":114,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/display.rs","byte_start":15720,"byte_end":15723,"line_start":115,"line_end":115,"column_start":5,"column_end":8}},{"value":"/ This requires the `XDG_RUNTIME_DIR` variable to be properly set.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/display.rs","byte_start":15728,"byte_end":15796,"line_start":116,"line_end":116,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":41},"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/display.rs","byte_start":16575,"byte_end":16582,"line_start":133,"line_end":133,"column_start":19,"column_end":26},"name":"from_fd","qualname":"<Display>::from_fd","value":"pub unsafe fn from_fd(RawFd) -> Result<(Display, EventQueue), ConnectError>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to use an already connected unix socket on given FD to start a wayland connection","sig":null,"attributes":[{"value":"/ Attempt to use an already connected unix socket on given FD to start a wayland connection","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/display.rs","byte_start":16272,"byte_end":16365,"line_start":127,"line_end":127,"column_start":5,"column_end":98}},{"value":"/","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/display.rs","byte_start":16370,"byte_end":16373,"line_start":128,"line_end":128,"column_start":5,"column_end":8}},{"value":"/ On success, you are given the `Display` object as well as the main `EventQueue` hosting","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/display.rs","byte_start":16378,"byte_end":16469,"line_start":129,"line_end":129,"column_start":5,"column_end":96}},{"value":"/ the `WlDisplay` wayland object.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/display.rs","byte_start":16474,"byte_end":16509,"line_start":130,"line_end":130,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/display.rs","byte_start":16514,"byte_end":16517,"line_start":131,"line_end":131,"column_start":5,"column_end":8}},{"value":"/ Will take ownership of the FD.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/display.rs","byte_start":16522,"byte_end":16556,"line_start":132,"line_end":132,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":42},"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/display.rs","byte_start":17247,"byte_end":17252,"line_start":147,"line_end":147,"column_start":12,"column_end":17},"name":"flush","qualname":"<Display>::flush","value":"pub fn flush(&Self) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Non-blocking write to the server","sig":null,"attributes":[{"value":"/ Non-blocking write to the server","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/display.rs","byte_start":16786,"byte_end":16822,"line_start":138,"line_end":138,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/display.rs","byte_start":16827,"byte_end":16830,"line_start":139,"line_end":139,"column_start":5,"column_end":8}},{"value":"/ Outgoing messages to the server are buffered by the library for efficiency. This method","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/display.rs","byte_start":16835,"byte_end":16926,"line_start":140,"line_end":140,"column_start":5,"column_end":96}},{"value":"/ flushes the internal buffer to the server socket.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/display.rs","byte_start":16931,"byte_end":16984,"line_start":141,"line_end":141,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/display.rs","byte_start":16989,"byte_end":16992,"line_start":142,"line_end":142,"column_start":5,"column_end":8}},{"value":"/ Will write as many pending requests as possible to the server socket. Never blocks: if not all","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/display.rs","byte_start":16997,"byte_end":17095,"line_start":143,"line_end":143,"column_start":5,"column_end":103}},{"value":"/ requests could be written, will return an io error `WouldBlock`.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/display.rs","byte_start":17100,"byte_end":17168,"line_start":144,"line_end":144,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/display.rs","byte_start":17173,"byte_end":17176,"line_start":145,"line_end":145,"column_start":5,"column_end":8}},{"value":"/ On success returns the number of written requests.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/display.rs","byte_start":17181,"byte_end":17235,"line_start":146,"line_end":146,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":43},"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/display.rs","byte_start":17398,"byte_end":17416,"line_start":152,"line_end":152,"column_start":12,"column_end":30},"name":"create_event_queue","qualname":"<Display>::create_event_queue","value":"pub fn create_event_queue(&Self) -> EventQueue","parent":null,"children":[],"decl_id":null,"docs":" Create a new event queue associated with this wayland connection\n","sig":null,"attributes":[{"value":"/ Create a new event queue associated with this wayland connection","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/display.rs","byte_start":17318,"byte_end":17386,"line_start":151,"line_end":151,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":44},"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/display.rs","byte_start":18274,"byte_end":18295,"line_start":170,"line_end":170,"column_start":19,"column_end":40},"name":"from_external_display","qualname":"<Display>::from_external_display","value":"pub unsafe fn from_external_display(*mut wl_display) -> (Display, EventQueue)","parent":null,"children":[],"decl_id":null,"docs":" Create a Display and Event Queue from an external display","sig":null,"attributes":[{"value":"cfg(feature = \"native_lib\")","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/display.rs","byte_start":17557,"byte_end":17587,"line_start":157,"line_end":157,"column_start":5,"column_end":35}},{"value":"/ Create a Display and Event Queue from an external display","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/display.rs","byte_start":17592,"byte_end":17653,"line_start":158,"line_end":158,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/display.rs","byte_start":17658,"byte_end":17661,"line_start":159,"line_end":159,"column_start":5,"column_end":8}},{"value":"/ This allows you to interface with an already-existing wayland connection,","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/display.rs","byte_start":17666,"byte_end":17743,"line_start":160,"line_end":160,"column_start":5,"column_end":82}},{"value":"/ for example provided by a GUI toolkit.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/display.rs","byte_start":17748,"byte_end":17790,"line_start":161,"line_end":161,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/display.rs","byte_start":17795,"byte_end":17798,"line_start":162,"line_end":162,"column_start":5,"column_end":8}},{"value":"/ To avoid interferences with the owner of the connection, wayland-client will","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/display.rs","byte_start":17803,"byte_end":17883,"line_start":163,"line_end":163,"column_start":5,"column_end":85}},{"value":"/ create a new event queue and register a wrapper of the `wl_display` to this queue,","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/display.rs","byte_start":17888,"byte_end":17974,"line_start":164,"line_end":164,"column_start":5,"column_end":91}},{"value":"/ then provide them to you. You can then use them as if they came from a direct","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/display.rs","byte_start":17979,"byte_end":18060,"line_start":165,"line_end":165,"column_start":5,"column_end":86}},{"value":"/ wayland connection.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/display.rs","byte_start":18065,"byte_end":18088,"line_start":166,"line_end":166,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/display.rs","byte_start":18093,"byte_end":18096,"line_start":167,"line_end":167,"column_start":5,"column_end":8}},{"value":"/ Note that if you need to retrieve the actual `wl_display` pointer back (rather than","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/display.rs","byte_start":18101,"byte_end":18188,"line_start":168,"line_end":168,"column_start":5,"column_end":92}},{"value":"/ its wrapper), you must use the `get_display_ptr()` method.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/display.rs","byte_start":18193,"byte_end":18255,"line_start":169,"line_end":169,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":45},"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/display.rs","byte_start":18945,"byte_end":18960,"line_start":183,"line_end":183,"column_start":12,"column_end":27},"name":"get_display_ptr","qualname":"<Display>::get_display_ptr","value":"pub fn get_display_ptr(&Self) -> *mut wl_display","parent":null,"children":[],"decl_id":null,"docs":" Retrieve the `wl_display` pointer","sig":null,"attributes":[{"value":"cfg(feature = \"native_lib\")","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/display.rs","byte_start":18506,"byte_end":18536,"line_start":175,"line_end":175,"column_start":5,"column_end":35}},{"value":"/ Retrieve the `wl_display` pointer","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/display.rs","byte_start":18541,"byte_end":18578,"line_start":176,"line_end":176,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/display.rs","byte_start":18583,"byte_end":18586,"line_start":177,"line_end":177,"column_start":5,"column_end":8}},{"value":"/ If this `Display` was created from an external `wl_display`, its `c_ptr()` method will","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/display.rs","byte_start":18591,"byte_end":18681,"line_start":178,"line_end":178,"column_start":5,"column_end":95}},{"value":"/ return a wrapper to the actual display. While this is perfectly good as a `wl_proxy`","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/display.rs","byte_start":18686,"byte_end":18774,"line_start":179,"line_end":179,"column_start":5,"column_end":93}},{"value":"/ pointer, to send requests, this is not the actual `wl_display` and cannot be used as such.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/display.rs","byte_start":18779,"byte_end":18873,"line_start":180,"line_end":180,"column_start":5,"column_end":99}},{"value":"/","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/display.rs","byte_start":18878,"byte_end":18881,"line_start":181,"line_end":181,"column_start":5,"column_end":8}},{"value":"/ This method will give you the `wl_display`.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/display.rs","byte_start":18886,"byte_end":18933,"line_start":182,"line_end":182,"column_start":5,"column_end":52}}]},{"kind":"Struct","id":{"krate":0,"index":53},"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/event_queue.rs","byte_start":20751,"byte_end":20761,"line_start":38,"line_end":38,"column_start":12,"column_end":22},"name":"EventQueue","qualname":"::event_queue::EventQueue","value":"EventQueue {  }","parent":null,"children":[{"krate":0,"index":54}],"decl_id":null,"docs":" An event queue for protocol messages","sig":null,"attributes":[{"value":"/ An event queue for protocol messages","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/event_queue.rs","byte_start":19273,"byte_end":19313,"line_start":6,"line_end":6,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/event_queue.rs","byte_start":19314,"byte_end":19317,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ Event dispatching in wayland is made on a queue basis, allowing you","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/event_queue.rs","byte_start":19318,"byte_end":19389,"line_start":8,"line_end":8,"column_start":1,"column_end":72}},{"value":"/ to organize your objects into different queues that can be dispatched","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/event_queue.rs","byte_start":19390,"byte_end":19463,"line_start":9,"line_end":9,"column_start":1,"column_end":74}},{"value":"/ independently, for example from different threads.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/event_queue.rs","byte_start":19464,"byte_end":19518,"line_start":10,"line_end":10,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/event_queue.rs","byte_start":19519,"byte_end":19522,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ And `EventQueue` is not `Send`, and thus must stay on the thread on which","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/event_queue.rs","byte_start":19523,"byte_end":19600,"line_start":12,"line_end":12,"column_start":1,"column_end":78}},{"value":"/ they were created. However the `Display` object is `Send + Sync`, allowing","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/event_queue.rs","byte_start":19601,"byte_end":19679,"line_start":13,"line_end":13,"column_start":1,"column_end":79}},{"value":"/ you to create the queues directly in the threads that host them.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/event_queue.rs","byte_start":19680,"byte_end":19748,"line_start":14,"line_end":14,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/event_queue.rs","byte_start":19749,"byte_end":19752,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ When a queue is dispatched (via the `dispatch()` or `dispatch_pending()` methods)","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/event_queue.rs","byte_start":19753,"byte_end":19838,"line_start":16,"line_end":16,"column_start":1,"column_end":86}},{"value":"/ all the incoming messages from the server designated to objects associated with","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/event_queue.rs","byte_start":19839,"byte_end":19922,"line_start":17,"line_end":17,"column_start":1,"column_end":84}},{"value":"/ the queue are processed sequentially, and the appropriate implementation for each","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/event_queue.rs","byte_start":19923,"byte_end":20008,"line_start":18,"line_end":18,"column_start":1,"column_end":86}},{"value":"/ is invoked. When all messages have been processed these methods return.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/event_queue.rs","byte_start":20009,"byte_end":20084,"line_start":19,"line_end":19,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/event_queue.rs","byte_start":20085,"byte_end":20088,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ Thus, a typical single-queue event loop for a simple wayland app can be:","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/event_queue.rs","byte_start":20089,"byte_end":20165,"line_start":21,"line_end":21,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/event_queue.rs","byte_start":20166,"byte_end":20169,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ ```no_run","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/event_queue.rs","byte_start":20170,"byte_end":20183,"line_start":23,"line_end":23,"column_start":1,"column_end":14}},{"value":"/ # extern crate wayland_client;","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/event_queue.rs","byte_start":20184,"byte_end":20218,"line_start":24,"line_end":24,"column_start":1,"column_end":35}},{"value":"/ # use wayland_client::{Display};","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/event_queue.rs","byte_start":20219,"byte_end":20255,"line_start":25,"line_end":25,"column_start":1,"column_end":37}},{"value":"/ # fn main() {","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/event_queue.rs","byte_start":20256,"byte_end":20273,"line_start":26,"line_end":26,"column_start":1,"column_end":18}},{"value":"/ #     let (display, mut event_queue) = Display::connect_to_env().unwrap();","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/event_queue.rs","byte_start":20274,"byte_end":20352,"line_start":27,"line_end":27,"column_start":1,"column_end":79}},{"value":"/ loop {","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/event_queue.rs","byte_start":20353,"byte_end":20363,"line_start":28,"line_end":28,"column_start":1,"column_end":11}},{"value":"/     display.flush().unwrap();","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/event_queue.rs","byte_start":20364,"byte_end":20397,"line_start":29,"line_end":29,"column_start":1,"column_end":34}},{"value":"/     event_queue.dispatch().expect(\"An error occurred during event dispatching!\");","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/event_queue.rs","byte_start":20398,"byte_end":20483,"line_start":30,"line_end":30,"column_start":1,"column_end":86}},{"value":"/ }","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/event_queue.rs","byte_start":20484,"byte_end":20489,"line_start":31,"line_end":31,"column_start":1,"column_end":6}},{"value":"/ # }","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/event_queue.rs","byte_start":20490,"byte_end":20497,"line_start":32,"line_end":32,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/event_queue.rs","byte_start":20498,"byte_end":20505,"line_start":33,"line_end":33,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/event_queue.rs","byte_start":20506,"byte_end":20509,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ See `EventQueue::prepare_read()` if you need more control about when the connection","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/event_queue.rs","byte_start":20510,"byte_end":20597,"line_start":35,"line_end":35,"column_start":1,"column_end":88}},{"value":"/ socket is read. This will typically the case if you need to integrate other sources","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/event_queue.rs","byte_start":20598,"byte_end":20685,"line_start":36,"line_end":36,"column_start":1,"column_end":88}},{"value":"/ of event into the event loop of your application.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/event_queue.rs","byte_start":20686,"byte_end":20739,"line_start":37,"line_end":37,"column_start":1,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":55},"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/event_queue.rs","byte_start":21129,"byte_end":21139,"line_start":49,"line_end":49,"column_start":12,"column_end":22},"name":"QueueToken","qualname":"::event_queue::QueueToken","value":"QueueToken {  }","parent":null,"children":[{"krate":0,"index":56}],"decl_id":null,"docs":" A token representing this event queue","sig":null,"attributes":[{"value":"/ A token representing this event queue","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/event_queue.rs","byte_start":20842,"byte_end":20883,"line_start":43,"line_end":43,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/event_queue.rs","byte_start":20884,"byte_end":20887,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ This token can be cloned and is meant to allow easier","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/event_queue.rs","byte_start":20888,"byte_end":20945,"line_start":45,"line_end":45,"column_start":1,"column_end":58}},{"value":"/ interaction with other functions in the library that","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/event_queue.rs","byte_start":20946,"byte_end":21002,"line_start":46,"line_end":46,"column_start":1,"column_end":57}},{"value":"/ require the specification of an event queue, like","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/event_queue.rs","byte_start":21003,"byte_end":21056,"line_start":47,"line_end":47,"column_start":1,"column_end":54}},{"value":"/ `Proxy::make_wrapper` and `NewProxy::implement_nonsend`.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/event_queue.rs","byte_start":21057,"byte_end":21117,"line_start":48,"line_end":48,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":59},"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/event_queue.rs","byte_start":21785,"byte_end":21793,"line_start":69,"line_end":69,"column_start":12,"column_end":20},"name":"dispatch","qualname":"<EventQueue>::dispatch","value":"pub fn dispatch(&mut Self) -> io::Result<u32>","parent":null,"children":[],"decl_id":null,"docs":" Dispatches events from the internal buffer.","sig":null,"attributes":[{"value":"/ Dispatches events from the internal buffer.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/event_queue.rs","byte_start":21344,"byte_end":21391,"line_start":59,"line_end":59,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/event_queue.rs","byte_start":21396,"byte_end":21399,"line_start":60,"line_end":60,"column_start":5,"column_end":8}},{"value":"/ Dispatches all events to their appropriators.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/event_queue.rs","byte_start":21404,"byte_end":21453,"line_start":61,"line_end":61,"column_start":5,"column_end":54}},{"value":"/ If no events were in the internal buffer, will block until","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/event_queue.rs","byte_start":21458,"byte_end":21520,"line_start":62,"line_end":62,"column_start":5,"column_end":67}},{"value":"/ some events are read and dispatch them.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/event_queue.rs","byte_start":21525,"byte_end":21568,"line_start":63,"line_end":63,"column_start":5,"column_end":48}},{"value":"/ This process can insert events in the internal buffers of","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/event_queue.rs","byte_start":21573,"byte_end":21634,"line_start":64,"line_end":64,"column_start":5,"column_end":66}},{"value":"/ other event queues.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/event_queue.rs","byte_start":21639,"byte_end":21662,"line_start":65,"line_end":65,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/event_queue.rs","byte_start":21667,"byte_end":21670,"line_start":66,"line_end":66,"column_start":5,"column_end":8}},{"value":"/ If an error is returned, your connection with the wayland","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/event_queue.rs","byte_start":21675,"byte_end":21736,"line_start":67,"line_end":67,"column_start":5,"column_end":66}},{"value":"/ compositor is probably lost.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/event_queue.rs","byte_start":21741,"byte_end":21773,"line_start":68,"line_end":68,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":60},"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/event_queue.rs","byte_start":22188,"byte_end":22204,"line_start":81,"line_end":81,"column_start":12,"column_end":28},"name":"dispatch_pending","qualname":"<EventQueue>::dispatch_pending","value":"pub fn dispatch_pending(&mut Self) -> io::Result<u32>","parent":null,"children":[],"decl_id":null,"docs":" Dispatches pending events from the internal buffer.","sig":null,"attributes":[{"value":"/ Dispatches pending events from the internal buffer.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/event_queue.rs","byte_start":21867,"byte_end":21922,"line_start":73,"line_end":73,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/event_queue.rs","byte_start":21927,"byte_end":21930,"line_start":74,"line_end":74,"column_start":5,"column_end":8}},{"value":"/ Dispatches all events to their appropriators.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/event_queue.rs","byte_start":21935,"byte_end":21984,"line_start":75,"line_end":75,"column_start":5,"column_end":54}},{"value":"/ Never blocks, if no events were pending, simply returns","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/event_queue.rs","byte_start":21989,"byte_end":22048,"line_start":76,"line_end":76,"column_start":5,"column_end":64}},{"value":"/ `Ok(0)`.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/event_queue.rs","byte_start":22053,"byte_end":22065,"line_start":77,"line_end":77,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/event_queue.rs","byte_start":22070,"byte_end":22073,"line_start":78,"line_end":78,"column_start":5,"column_end":8}},{"value":"/ If an error is returned, your connection with the wayland","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/event_queue.rs","byte_start":22078,"byte_end":22139,"line_start":79,"line_end":79,"column_start":5,"column_end":66}},{"value":"/ compositor is probably lost.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/event_queue.rs","byte_start":22144,"byte_end":22176,"line_start":80,"line_end":80,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":61},"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/event_queue.rs","byte_start":22691,"byte_end":22705,"line_start":94,"line_end":94,"column_start":12,"column_end":26},"name":"sync_roundtrip","qualname":"<EventQueue>::sync_roundtrip","value":"pub fn sync_roundtrip(&mut Self) -> io::Result<u32>","parent":null,"children":[],"decl_id":null,"docs":" Synchronous roundtrip","sig":null,"attributes":[{"value":"/ Synchronous roundtrip","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/event_queue.rs","byte_start":22286,"byte_end":22311,"line_start":85,"line_end":85,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/event_queue.rs","byte_start":22316,"byte_end":22319,"line_start":86,"line_end":86,"column_start":5,"column_end":8}},{"value":"/ This call will cause a synchronous roundtrip with the wayland server. It will block until all","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/event_queue.rs","byte_start":22324,"byte_end":22421,"line_start":87,"line_end":87,"column_start":5,"column_end":102}},{"value":"/ pending requests of this queue are sent to the server and it has processed all of them and","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/event_queue.rs","byte_start":22426,"byte_end":22520,"line_start":88,"line_end":88,"column_start":5,"column_end":99}},{"value":"/ send the appropriate events.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/event_queue.rs","byte_start":22525,"byte_end":22557,"line_start":89,"line_end":89,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/event_queue.rs","byte_start":22562,"byte_end":22565,"line_start":90,"line_end":90,"column_start":5,"column_end":8}},{"value":"/ Handlers are called as a consequence.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/event_queue.rs","byte_start":22570,"byte_end":22611,"line_start":91,"line_end":91,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/event_queue.rs","byte_start":22616,"byte_end":22619,"line_start":92,"line_end":92,"column_start":5,"column_end":8}},{"value":"/ On success returns the number of dispatched events.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/event_queue.rs","byte_start":22624,"byte_end":22679,"line_start":93,"line_end":93,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":62},"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/event_queue.rs","byte_start":22912,"byte_end":22921,"line_start":101,"line_end":101,"column_start":12,"column_end":21},"name":"get_token","qualname":"<EventQueue>::get_token","value":"pub fn get_token(&Self) -> QueueToken","parent":null,"children":[],"decl_id":null,"docs":" Create a new token associated with this event queue","sig":null,"attributes":[{"value":"/ Create a new token associated with this event queue","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/event_queue.rs","byte_start":22785,"byte_end":22840,"line_start":98,"line_end":98,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/event_queue.rs","byte_start":22845,"byte_end":22848,"line_start":99,"line_end":99,"column_start":5,"column_end":8}},{"value":"/ See `QueueToken` documentation for its use.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/event_queue.rs","byte_start":22853,"byte_end":22900,"line_start":100,"line_end":100,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":63},"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/event_queue.rs","byte_start":24022,"byte_end":24034,"line_start":126,"line_end":126,"column_start":12,"column_end":24},"name":"prepare_read","qualname":"<EventQueue>::prepare_read","value":"pub fn prepare_read(&Self) -> Option<ReadEventsGuard>","parent":null,"children":[],"decl_id":null,"docs":" Prepare an concurrent read","sig":null,"attributes":[{"value":"/ Prepare an concurrent read","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/event_queue.rs","byte_start":23026,"byte_end":23056,"line_start":107,"line_end":107,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/event_queue.rs","byte_start":23061,"byte_end":23064,"line_start":108,"line_end":108,"column_start":5,"column_end":8}},{"value":"/ Will declare your intention to read events from the server socket.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/event_queue.rs","byte_start":23069,"byte_end":23139,"line_start":109,"line_end":109,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/event_queue.rs","byte_start":23144,"byte_end":23147,"line_start":110,"line_end":110,"column_start":5,"column_end":8}},{"value":"/ Will return `None` if there are still some events awaiting dispatch on this EventIterator.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/event_queue.rs","byte_start":23152,"byte_end":23246,"line_start":111,"line_end":111,"column_start":5,"column_end":99}},{"value":"/ In this case, you need to call `dispatch_pending()` before calling this method again.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/event_queue.rs","byte_start":23251,"byte_end":23340,"line_start":112,"line_end":112,"column_start":5,"column_end":94}},{"value":"/","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/event_queue.rs","byte_start":23345,"byte_end":23348,"line_start":113,"line_end":113,"column_start":5,"column_end":8}},{"value":"/ As long as the returned guard is in scope, no events can be dispatched to any event iterator.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/event_queue.rs","byte_start":23353,"byte_end":23450,"line_start":114,"line_end":114,"column_start":5,"column_end":102}},{"value":"/","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/event_queue.rs","byte_start":23455,"byte_end":23458,"line_start":115,"line_end":115,"column_start":5,"column_end":8}},{"value":"/ The guard can then be destroyed by two means:","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/event_queue.rs","byte_start":23463,"byte_end":23512,"line_start":116,"line_end":116,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/event_queue.rs","byte_start":23517,"byte_end":23520,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/  - Calling its `cancel()` method (or letting it go out of scope): the read intention will","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/event_queue.rs","byte_start":23525,"byte_end":23618,"line_start":118,"line_end":118,"column_start":5,"column_end":98}},{"value":"/    be cancelled","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/event_queue.rs","byte_start":23623,"byte_end":23642,"line_start":119,"line_end":119,"column_start":5,"column_end":24}},{"value":"/  - Calling its `read_events()` method: will block until all existing guards are destroyed","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/event_queue.rs","byte_start":23647,"byte_end":23740,"line_start":120,"line_end":120,"column_start":5,"column_end":98}},{"value":"/    by one of these methods, then events will be read and all blocked `read_events()` calls","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/event_queue.rs","byte_start":23745,"byte_end":23839,"line_start":121,"line_end":121,"column_start":5,"column_end":99}},{"value":"/    will return.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/event_queue.rs","byte_start":23844,"byte_end":23863,"line_start":122,"line_end":122,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/event_queue.rs","byte_start":23868,"byte_end":23871,"line_start":123,"line_end":123,"column_start":5,"column_end":8}},{"value":"/ This call will otherwise not block on the server socket if it is empty, and return","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/event_queue.rs","byte_start":23876,"byte_end":23962,"line_start":124,"line_end":124,"column_start":5,"column_end":91}},{"value":"/ an io error `WouldBlock` in such cases.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/event_queue.rs","byte_start":23967,"byte_end":24010,"line_start":125,"line_end":125,"column_start":5,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":64},"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/event_queue.rs","byte_start":24408,"byte_end":24423,"line_start":140,"line_end":140,"column_start":12,"column_end":27},"name":"ReadEventsGuard","qualname":"::event_queue::ReadEventsGuard","value":"ReadEventsGuard {  }","parent":null,"children":[{"krate":0,"index":65},{"krate":0,"index":66}],"decl_id":null,"docs":" A guard over a read intention.","sig":null,"attributes":[{"value":"/ A guard over a read intention.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/event_queue.rs","byte_start":24294,"byte_end":24328,"line_start":137,"line_end":137,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/event_queue.rs","byte_start":24329,"byte_end":24332,"line_start":138,"line_end":138,"column_start":1,"column_end":4}},{"value":"/ See `EventQueue::prepare_read()` for details about its use.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/event_queue.rs","byte_start":24333,"byte_end":24396,"line_start":139,"line_end":139,"column_start":1,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":68},"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/event_queue.rs","byte_start":24680,"byte_end":24691,"line_start":150,"line_end":150,"column_start":12,"column_end":23},"name":"read_events","qualname":"<ReadEventsGuard>::read_events","value":"pub fn read_events(Self) -> io::Result<i32>","parent":null,"children":[],"decl_id":null,"docs":" Read events","sig":null,"attributes":[{"value":"/ Read events","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/event_queue.rs","byte_start":24504,"byte_end":24519,"line_start":146,"line_end":146,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/event_queue.rs","byte_start":24524,"byte_end":24527,"line_start":147,"line_end":147,"column_start":5,"column_end":8}},{"value":"/ Reads events from the server socket. If other `ReadEventsGuard` exists, will block","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/event_queue.rs","byte_start":24532,"byte_end":24618,"line_start":148,"line_end":148,"column_start":5,"column_end":91}},{"value":"/ until they are all consumed or destroyed.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/event_queue.rs","byte_start":24623,"byte_end":24668,"line_start":149,"line_end":149,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":69},"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/event_queue.rs","byte_start":24987,"byte_end":24993,"line_start":160,"line_end":160,"column_start":12,"column_end":18},"name":"cancel","qualname":"<ReadEventsGuard>::cancel","value":"pub fn cancel(Self)","parent":null,"children":[],"decl_id":null,"docs":" Cancel the read","sig":null,"attributes":[{"value":"/ Cancel the read","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/event_queue.rs","byte_start":24793,"byte_end":24812,"line_start":155,"line_end":155,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/event_queue.rs","byte_start":24817,"byte_end":24820,"line_start":156,"line_end":156,"column_start":5,"column_end":8}},{"value":"/ Will cancel the read intention associated with this guard. Never blocks.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/event_queue.rs","byte_start":24825,"byte_end":24901,"line_start":157,"line_end":157,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/event_queue.rs","byte_start":24906,"byte_end":24909,"line_start":158,"line_end":158,"column_start":5,"column_end":8}},{"value":"/ Has the same effect as letting the guard go out of scope.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/event_queue.rs","byte_start":24914,"byte_end":24975,"line_start":159,"line_end":159,"column_start":5,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":450},"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/globals.rs","byte_start":25763,"byte_end":25776,"line_start":18,"line_end":18,"column_start":12,"column_end":25},"name":"GlobalManager","qualname":"::globals::GlobalManager","value":"GlobalManager {  }","parent":null,"children":[{"krate":0,"index":451},{"krate":0,"index":452}],"decl_id":null,"docs":" An utility to manage global objects","sig":null,"attributes":[{"value":"/ An utility to manage global objects","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/globals.rs","byte_start":25548,"byte_end":25587,"line_start":12,"line_end":12,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/globals.rs","byte_start":25588,"byte_end":25591,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ This utility provides an implemenation for the registry","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/globals.rs","byte_start":25592,"byte_end":25651,"line_start":14,"line_end":14,"column_start":1,"column_end":60}},{"value":"/ that track the list of globals for you, as well as utilities","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/globals.rs","byte_start":25652,"byte_end":25716,"line_start":15,"line_end":15,"column_start":1,"column_end":65}},{"value":"/ to bind them.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/globals.rs","byte_start":25717,"byte_end":25734,"line_start":16,"line_end":16,"column_start":1,"column_end":18}}]},{"kind":"TupleVariant","id":{"krate":0,"index":456},"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/globals.rs","byte_start":26005,"byte_end":26012,"line_start":27,"line_end":27,"column_start":5,"column_end":12},"name":"Missing","qualname":"::globals::GlobalError::Missing","value":"GlobalError::Missing","parent":{"krate":0,"index":455},"children":[],"decl_id":null,"docs":" The requested global was missing\n","sig":null,"attributes":[{"value":"/ The requested global was missing","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/globals.rs","byte_start":25964,"byte_end":26000,"line_start":26,"line_end":26,"column_start":5,"column_end":41}}]},{"kind":"TupleVariant","id":{"krate":0,"index":458},"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/globals.rs","byte_start":26120,"byte_end":26133,"line_start":30,"line_end":30,"column_start":5,"column_end":18},"name":"VersionTooLow","qualname":"::globals::GlobalError::VersionTooLow","value":"GlobalError::VersionTooLow(u32)","parent":{"krate":0,"index":455},"children":[],"decl_id":null,"docs":" The global advertised by the server has a lower version number\n than the one requested\n","sig":null,"attributes":[{"value":"/ The global advertised by the server has a lower version number","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/globals.rs","byte_start":26018,"byte_end":26084,"line_start":28,"line_end":28,"column_start":5,"column_end":71}},{"value":"/ than the one requested","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/globals.rs","byte_start":26089,"byte_end":26115,"line_start":29,"line_end":29,"column_start":5,"column_end":31}}]},{"kind":"Enum","id":{"krate":0,"index":455},"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/globals.rs","byte_start":25946,"byte_end":25957,"line_start":25,"line_end":25,"column_start":10,"column_end":21},"name":"GlobalError","qualname":"::globals::GlobalError","value":"pub enum GlobalError {\n\n    /// The requested global was missing\n    Missing,\n\n    /// The global advertised by the server has a lower version number\n    /// than the one requested\n    VersionTooLow(u32),\n}","parent":null,"children":[{"krate":0,"index":456},{"krate":0,"index":458}],"decl_id":null,"docs":" An error that occurred trying to bind a global\n","sig":null,"attributes":[{"value":"/ An error that occurred trying to bind a global","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/globals.rs","byte_start":25858,"byte_end":25908,"line_start":23,"line_end":23,"column_start":1,"column_end":51}}]},{"kind":"StructVariant","id":{"krate":0,"index":94},"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/globals.rs","byte_start":26740,"byte_end":26743,"line_start":51,"line_end":51,"column_start":5,"column_end":8},"name":"New","qualname":"::globals::GlobalEvent::New","value":"GlobalEvent::New { id, interface, version }","parent":{"krate":0,"index":93},"children":[],"decl_id":null,"docs":" A new global was created\n","sig":null,"attributes":[{"value":"/ A new global was created","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/globals.rs","byte_start":26707,"byte_end":26735,"line_start":50,"line_end":50,"column_start":5,"column_end":33}}]},{"kind":"StructVariant","id":{"krate":0,"index":98},"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/globals.rs","byte_start":26981,"byte_end":26988,"line_start":60,"line_end":60,"column_start":5,"column_end":12},"name":"Removed","qualname":"::globals::GlobalEvent::Removed","value":"GlobalEvent::Removed { id, interface }","parent":{"krate":0,"index":93},"children":[],"decl_id":null,"docs":" A global was removed\n","sig":null,"attributes":[{"value":"/ A global was removed","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/globals.rs","byte_start":26952,"byte_end":26976,"line_start":59,"line_end":59,"column_start":5,"column_end":29}}]},{"kind":"Enum","id":{"krate":0,"index":93},"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/globals.rs","byte_start":26689,"byte_end":26700,"line_start":49,"line_end":49,"column_start":10,"column_end":21},"name":"GlobalEvent","qualname":"::globals::GlobalEvent","value":"pub enum GlobalEvent {\n\n    /// A new global was created\n    New {\n        /// Id of the new global\n        id: u32,\n        /// Interface of the new global\n        interface: String,\n        /// Maximum supported version of the new global\n        version: u32,\n    },\n\n    /// A global was removed\n    Removed {\n        /// Id of the removed global\n        id: u32,\n        /// Interface of the removed global\n        interface: String,\n    },\n}","parent":null,"children":[{"krate":0,"index":94},{"krate":0,"index":98}],"decl_id":null,"docs":" Event provided to the user callback of GlobalManager\n","sig":null,"attributes":[{"value":"/ Event provided to the user callback of GlobalManager","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/globals.rs","byte_start":26623,"byte_end":26679,"line_start":48,"line_end":48,"column_start":1,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":102},"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/globals.rs","byte_start":27210,"byte_end":27213,"line_start":70,"line_end":70,"column_start":12,"column_end":15},"name":"new","qualname":"<GlobalManager>::new","value":"pub fn new(&Proxy<wl_display::WlDisplay>) -> GlobalManager","parent":null,"children":[],"decl_id":null,"docs":" Create a global manager handling a registry\n","sig":null,"attributes":[{"value":"/ Create a global manager handling a registry","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/globals.rs","byte_start":27151,"byte_end":27198,"line_start":69,"line_end":69,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":107},"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/globals.rs","byte_start":28850,"byte_end":28861,"line_start":113,"line_end":113,"column_start":12,"column_end":23},"name":"new_with_cb","qualname":"<GlobalManager>::new_with_cb","value":"pub fn new_with_cb<F>(&Proxy<wl_display::WlDisplay>, F) -> GlobalManager where\nF: FnMut(GlobalEvent, Proxy<wl_registry::WlRegistry>) -> () + Send + 'static","parent":null,"children":[],"decl_id":null,"docs":" Create a global manager handling a registry with a callback","sig":null,"attributes":[{"value":"/ Create a global manager handling a registry with a callback","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/globals.rs","byte_start":28493,"byte_end":28556,"line_start":106,"line_end":106,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/globals.rs","byte_start":28561,"byte_end":28564,"line_start":107,"line_end":107,"column_start":5,"column_end":8}},{"value":"/ This global manager will track globals as a simple one, but will","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/globals.rs","byte_start":28569,"byte_end":28637,"line_start":108,"line_end":108,"column_start":5,"column_end":73}},{"value":"/ also forward the registry events to your callback.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/globals.rs","byte_start":28642,"byte_end":28696,"line_start":109,"line_end":109,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/globals.rs","byte_start":28701,"byte_end":28704,"line_start":110,"line_end":110,"column_start":5,"column_end":8}},{"value":"/ This can be used if you want to handle specially certain globals, but want","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/globals.rs","byte_start":28709,"byte_end":28787,"line_start":111,"line_end":111,"column_start":5,"column_end":83}},{"value":"/ to use the default mechanism for the rest.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/globals.rs","byte_start":28792,"byte_end":28838,"line_start":112,"line_end":112,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":112},"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/globals.rs","byte_start":31835,"byte_end":31851,"line_start":182,"line_end":182,"column_start":12,"column_end":28},"name":"instantiate_auto","qualname":"<GlobalManager>::instantiate_auto","value":"pub fn instantiate_auto<I: Interface, F>(&Self, F)\n-> Result<Proxy<I>, GlobalError> where F: FnOnce(NewProxy<I>) -> Proxy<I>","parent":null,"children":[],"decl_id":null,"docs":" Instantiate a global with highest available version","sig":null,"attributes":[{"value":"/ Instantiate a global with highest available version","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/globals.rs","byte_start":31569,"byte_end":31624,"line_start":177,"line_end":177,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/globals.rs","byte_start":31629,"byte_end":31632,"line_start":178,"line_end":178,"column_start":5,"column_end":8}},{"value":"/ This method is only appropriate for globals that are expected to","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/globals.rs","byte_start":31637,"byte_end":31705,"line_start":179,"line_end":179,"column_start":5,"column_end":73}},{"value":"/ not exist with multiplicity (such as `wl_compositor` or `wl_shm`),","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/globals.rs","byte_start":31710,"byte_end":31780,"line_start":180,"line_end":180,"column_start":5,"column_end":75}},{"value":"/ as it will only bind a single one.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/globals.rs","byte_start":31785,"byte_end":31823,"line_start":181,"line_end":181,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":115},"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/globals.rs","byte_start":32468,"byte_end":32485,"line_start":199,"line_end":199,"column_start":12,"column_end":29},"name":"instantiate_exact","qualname":"<GlobalManager>::instantiate_exact","value":"pub fn instantiate_exact<I: Interface, F>(&Self, u32, F)\n-> Result<Proxy<I>, GlobalError> where F: FnOnce(NewProxy<I>) -> Proxy<I>","parent":null,"children":[],"decl_id":null,"docs":" Instantiate a global with a specific version","sig":null,"attributes":[{"value":"/ Instantiate a global with a specific version","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/globals.rs","byte_start":32281,"byte_end":32329,"line_start":195,"line_end":195,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/globals.rs","byte_start":32334,"byte_end":32337,"line_start":196,"line_end":196,"column_start":5,"column_end":8}},{"value":"/ Like `instantiate_auto`, but will bind a specific version of","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/globals.rs","byte_start":32342,"byte_end":32406,"line_start":197,"line_end":197,"column_start":5,"column_end":69}},{"value":"/ this global an not the highest available.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/globals.rs","byte_start":32411,"byte_end":32456,"line_start":198,"line_end":198,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":118},"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/globals.rs","byte_start":33196,"byte_end":33200,"line_start":221,"line_end":221,"column_start":12,"column_end":16},"name":"list","qualname":"<GlobalManager>::list","value":"pub fn list(&Self) -> Vec<(u32, String, u32)>","parent":null,"children":[],"decl_id":null,"docs":" Retrieve the list of currently known globals\n","sig":null,"attributes":[{"value":"/ Retrieve the list of currently known globals","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/globals.rs","byte_start":33136,"byte_end":33184,"line_start":220,"line_end":220,"column_start":5,"column_end":53}}]},{"kind":"Trait","id":{"krate":0,"index":119},"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/globals.rs","byte_start":33502,"byte_end":33519,"line_start":230,"line_end":230,"column_start":11,"column_end":28},"name":"GlobalImplementor","qualname":"::globals::GlobalImplementor","value":"GlobalImplementor<I: Interface>","parent":null,"children":[{"krate":0,"index":121},{"krate":0,"index":122}],"decl_id":null,"docs":" A trait for implementation of the global advertisement","sig":null,"attributes":[{"value":"/ A trait for implementation of the global advertisement","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/globals.rs","byte_start":33294,"byte_end":33352,"line_start":226,"line_end":226,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/globals.rs","byte_start":33353,"byte_end":33356,"line_start":227,"line_end":227,"column_start":1,"column_end":4}},{"value":"/ It is automatically implemented for `FnMut(NewProxy<I>) -> Proxy<I>`","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/globals.rs","byte_start":33357,"byte_end":33429,"line_start":228,"line_end":228,"column_start":1,"column_end":73}},{"value":"/ closures, in which case the `error` messages are ignored.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/globals.rs","byte_start":33430,"byte_end":33491,"line_start":229,"line_end":229,"column_start":1,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":121},"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/globals.rs","byte_start":33671,"byte_end":33681,"line_start":233,"line_end":233,"column_start":8,"column_end":18},"name":"new_global","qualname":"::globals::GlobalImplementor::new_global","value":"pub fn new_global(&mut Self, NewProxy<I>) -> Proxy<I>","parent":{"krate":0,"index":119},"children":[],"decl_id":null,"docs":" A new global of given interface has been instantiated and you are\n supposed to provide an implementation for it.\n","sig":null,"attributes":[{"value":"/ A new global of given interface has been instantiated and you are","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/globals.rs","byte_start":33540,"byte_end":33609,"line_start":231,"line_end":231,"column_start":5,"column_end":74}},{"value":"/ supposed to provide an implementation for it.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/globals.rs","byte_start":33614,"byte_end":33663,"line_start":232,"line_end":232,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":122},"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/globals.rs","byte_start":33904,"byte_end":33909,"line_start":238,"line_end":238,"column_start":8,"column_end":13},"name":"error","qualname":"::globals::GlobalImplementor::error","value":"pub fn error(&mut Self, u32)","parent":{"krate":0,"index":119},"children":[],"decl_id":null,"docs":" A global was advertised but its version was lower than the minimal version\n you requested.","sig":null,"attributes":[{"value":"/ A global was advertised but its version was lower than the minimal version","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/globals.rs","byte_start":33731,"byte_end":33809,"line_start":234,"line_end":234,"column_start":5,"column_end":83}},{"value":"/ you requested.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/globals.rs","byte_start":33814,"byte_end":33832,"line_start":235,"line_end":235,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/globals.rs","byte_start":33837,"byte_end":33840,"line_start":236,"line_end":236,"column_start":5,"column_end":8}},{"value":"/ The advertised version is provided as argument.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/globals.rs","byte_start":33845,"byte_end":33896,"line_start":237,"line_end":237,"column_start":5,"column_end":56}}]},{"kind":"Struct","id":{"krate":0,"index":140},"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":39121,"byte_end":39126,"line_start":26,"line_end":26,"column_start":12,"column_end":17},"name":"Proxy","qualname":"::proxy::Proxy","value":"Proxy {  }","parent":null,"children":[{"krate":0,"index":142},{"krate":0,"index":143}],"decl_id":null,"docs":" An handle to a wayland proxy","sig":null,"attributes":[{"value":"/ An handle to a wayland proxy","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":38523,"byte_end":38555,"line_start":14,"line_end":14,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":38556,"byte_end":38559,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ This represents a wayland object instantiated in your client","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":38560,"byte_end":38624,"line_start":16,"line_end":16,"column_start":1,"column_end":65}},{"value":"/ session. Several handles to the same object can exist at a given","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":38625,"byte_end":38693,"line_start":17,"line_end":17,"column_start":1,"column_end":69}},{"value":"/ time, and cloning them won't create a new protocol object, only","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":38694,"byte_end":38761,"line_start":18,"line_end":18,"column_start":1,"column_end":68}},{"value":"/ clone the handle. The lifetime of the protocol object is **not**","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":38762,"byte_end":38830,"line_start":19,"line_end":19,"column_start":1,"column_end":69}},{"value":"/ tied to the lifetime of these handles, but rather to sending or","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":38831,"byte_end":38898,"line_start":20,"line_end":20,"column_start":1,"column_end":68}},{"value":"/ receiving destroying messages.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":38899,"byte_end":38933,"line_start":21,"line_end":21,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":38934,"byte_end":38937,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ These handles are notably used to send requests to the server. To do","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":38938,"byte_end":39010,"line_start":23,"line_end":23,"column_start":1,"column_end":73}},{"value":"/ you need to import the associated `RequestsTrait` trait from the module","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":39011,"byte_end":39086,"line_start":24,"line_end":24,"column_start":1,"column_end":76}},{"value":"/ of this interface.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":39087,"byte_end":39109,"line_start":25,"line_end":25,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":155},"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":40209,"byte_end":40213,"line_start":65,"line_end":65,"column_start":12,"column_end":16},"name":"send","qualname":"<Proxy<I>>::send","value":"pub fn send(&Self, I::Request)","parent":null,"children":[],"decl_id":null,"docs":" Send a request through this object","sig":null,"attributes":[{"value":"/ Send a request through this object","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":39770,"byte_end":39808,"line_start":56,"line_end":56,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":39813,"byte_end":39816,"line_start":57,"line_end":57,"column_start":5,"column_end":8}},{"value":"/ **Warning:** This method is mostly intended to be used by code generated","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":39821,"byte_end":39897,"line_start":58,"line_end":58,"column_start":5,"column_end":81}},{"value":"/ by `wayland-scanner`, and you should probably never need to use it directly,","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":39902,"byte_end":39982,"line_start":59,"line_end":59,"column_start":5,"column_end":85}},{"value":"/ but rather use the appropriate `RequestsTrait` for your proxy.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":39987,"byte_end":40053,"line_start":60,"line_end":60,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":40058,"byte_end":40061,"line_start":61,"line_end":61,"column_start":5,"column_end":8}},{"value":"/ This is the generic method to send requests.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":40066,"byte_end":40114,"line_start":62,"line_end":62,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":40119,"byte_end":40122,"line_start":63,"line_end":63,"column_start":5,"column_end":8}},{"value":"/ If your request needs to create an object, use `send_constructor`.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":40127,"byte_end":40197,"line_start":64,"line_end":64,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":156},"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":40844,"byte_end":40860,"line_start":79,"line_end":79,"column_start":12,"column_end":28},"name":"send_constructor","qualname":"<Proxy<I>>::send_constructor","value":"pub fn send_constructor<J, F>(&Self, I::Request, F, Option<u32>)\n-> Result<Proxy<J>, ()> where J: Interface, F: FnOnce(NewProxy<J>) -> Proxy<J>","parent":null,"children":[],"decl_id":null,"docs":" Send a request creating an object through this object","sig":null,"attributes":[{"value":"/ Send a request creating an object through this object","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":40285,"byte_end":40342,"line_start":69,"line_end":69,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":40347,"byte_end":40350,"line_start":70,"line_end":70,"column_start":5,"column_end":8}},{"value":"/ **Warning:** This method is mostly intended to be used by code generated","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":40355,"byte_end":40431,"line_start":71,"line_end":71,"column_start":5,"column_end":81}},{"value":"/ by `wayland-scanner`, and you should probably never need to use it directly,","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":40436,"byte_end":40516,"line_start":72,"line_end":72,"column_start":5,"column_end":85}},{"value":"/ but rather use the appropriate `RequestsTrait` for your proxy.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":40521,"byte_end":40587,"line_start":73,"line_end":73,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":40592,"byte_end":40595,"line_start":74,"line_end":74,"column_start":5,"column_end":8}},{"value":"/ This is the generic method to send requests that create objects","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":40600,"byte_end":40667,"line_start":75,"line_end":75,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":40672,"byte_end":40675,"line_start":76,"line_end":76,"column_start":5,"column_end":8}},{"value":"/ The slot in the message corresponding with the newly created object must have","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":40680,"byte_end":40761,"line_start":77,"line_end":77,"column_start":5,"column_end":86}},{"value":"/ been filled by a placeholder object (see `child_placeholder`).","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":40766,"byte_end":40832,"line_start":78,"line_end":78,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":159},"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":41469,"byte_end":41477,"line_start":101,"line_end":101,"column_start":12,"column_end":20},"name":"is_alive","qualname":"<Proxy<I>>::is_alive","value":"pub fn is_alive(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if the object associated with this proxy is still alive","sig":null,"attributes":[{"value":"/ Check if the object associated with this proxy is still alive","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":41219,"byte_end":41284,"line_start":95,"line_end":95,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":41289,"byte_end":41292,"line_start":96,"line_end":96,"column_start":5,"column_end":8}},{"value":"/ Will return `false` if the object has been destroyed.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":41297,"byte_end":41354,"line_start":97,"line_end":97,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":41359,"byte_end":41362,"line_start":98,"line_end":98,"column_start":5,"column_end":8}},{"value":"/ If the object is not managed by this library, this will always","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":41367,"byte_end":41433,"line_start":99,"line_end":99,"column_start":5,"column_end":71}},{"value":"/ returns `true`.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":41438,"byte_end":41457,"line_start":100,"line_end":100,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":160},"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":41656,"byte_end":41663,"line_start":108,"line_end":108,"column_start":12,"column_end":19},"name":"version","qualname":"<Proxy<I>>::version","value":"pub fn version(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Retrieve the interface version of this wayland object instance","sig":null,"attributes":[{"value":"/ Retrieve the interface version of this wayland object instance","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":41536,"byte_end":41602,"line_start":105,"line_end":105,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":41607,"byte_end":41610,"line_start":106,"line_end":106,"column_start":5,"column_end":8}},{"value":"/ Returns 0 on dead objects","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":41615,"byte_end":41644,"line_start":107,"line_end":107,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":161},"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":41781,"byte_end":41783,"line_start":113,"line_end":113,"column_start":12,"column_end":14},"name":"id","qualname":"<Proxy<I>>::id","value":"pub fn id(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Retrieve the object id of this wayland object\n","sig":null,"attributes":[{"value":"/ Retrieve the object id of this wayland object","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":41720,"byte_end":41769,"line_start":112,"line_end":112,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":162},"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":42396,"byte_end":42405,"line_start":127,"line_end":127,"column_start":12,"column_end":21},"name":"user_data","qualname":"<Proxy<I>>::user_data","value":"pub fn user_data<UD: 'static>(&Self) -> Option<&UD>","parent":null,"children":[],"decl_id":null,"docs":" Access the arbitrary payload associated to this object","sig":null,"attributes":[{"value":"/ Access the arbitrary payload associated to this object","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":41835,"byte_end":41893,"line_start":117,"line_end":117,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":41898,"byte_end":41901,"line_start":118,"line_end":118,"column_start":5,"column_end":8}},{"value":"/ You need to specify the expected type of this payload, and this","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":41906,"byte_end":41973,"line_start":119,"line_end":119,"column_start":5,"column_end":72}},{"value":"/ function will return `None` if either the types don't match or","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":41978,"byte_end":42044,"line_start":120,"line_end":120,"column_start":5,"column_end":71}},{"value":"/ you are attempting to access a non `Send + Sync` user data from the","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":42049,"byte_end":42120,"line_start":121,"line_end":121,"column_start":5,"column_end":76}},{"value":"/ wrong thread.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":42125,"byte_end":42142,"line_start":122,"line_end":122,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":42147,"byte_end":42150,"line_start":123,"line_end":123,"column_start":5,"column_end":8}},{"value":"/ This value is associated to the Proxy when you implement it, and you","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":42155,"byte_end":42227,"line_start":124,"line_end":124,"column_start":5,"column_end":77}},{"value":"/ cannot access it mutably afterwards. If you need interior mutability,","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":42232,"byte_end":42305,"line_start":125,"line_end":125,"column_start":5,"column_end":78}},{"value":"/ you are responsible for using a `Mutex` or similar type to achieve it.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":42310,"byte_end":42384,"line_start":126,"line_end":126,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":164},"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":42574,"byte_end":42580,"line_start":132,"line_end":132,"column_start":12,"column_end":18},"name":"equals","qualname":"<Proxy<I>>::equals","value":"pub fn equals(&Self, &Proxy<I>) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if the other proxy refers to the same underlying wayland object\n","sig":null,"attributes":[{"value":"/ Check if the other proxy refers to the same underlying wayland object","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":42489,"byte_end":42562,"line_start":131,"line_end":131,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":165},"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":43335,"byte_end":43340,"line_start":150,"line_end":150,"column_start":12,"column_end":17},"name":"child","qualname":"<Proxy<I>>::child","value":"pub fn child<C: Interface>(&Self) -> NewProxy<C>","parent":null,"children":[],"decl_id":null,"docs":" Create a new child object","sig":null,"attributes":[{"value":"/ Create a new child object","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":42667,"byte_end":42696,"line_start":136,"line_end":136,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":42701,"byte_end":42704,"line_start":137,"line_end":137,"column_start":5,"column_end":8}},{"value":"/ **Warning:** This method is mostly intended to be used by code generated","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":42709,"byte_end":42785,"line_start":138,"line_end":138,"column_start":5,"column_end":81}},{"value":"/ by `wayland-scanner`, and you should probably never need to use it directly,","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":42790,"byte_end":42870,"line_start":139,"line_end":139,"column_start":5,"column_end":85}},{"value":"/ but rather use the appropriate `RequestsTrait` for your proxy.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":42875,"byte_end":42941,"line_start":140,"line_end":140,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":42946,"byte_end":42949,"line_start":141,"line_end":141,"column_start":5,"column_end":8}},{"value":"/ This creates a new wayland object, considered as a","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":42954,"byte_end":43008,"line_start":142,"line_end":142,"column_start":5,"column_end":59}},{"value":"/ child of this object. It will notably inherit its interface","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":43013,"byte_end":43076,"line_start":143,"line_end":143,"column_start":5,"column_end":68}},{"value":"/ version.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":43081,"byte_end":43093,"line_start":144,"line_end":144,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":43098,"byte_end":43101,"line_start":145,"line_end":145,"column_start":5,"column_end":8}},{"value":"/ The created object should immediately be implemented and sent","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":43106,"byte_end":43171,"line_start":146,"line_end":146,"column_start":5,"column_end":70}},{"value":"/ in a request to the server, to keep the object list properly","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":43176,"byte_end":43240,"line_start":147,"line_end":147,"column_start":5,"column_end":69}},{"value":"/ synchronized. Failure to do so will likely cause a protocol","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":43245,"byte_end":43308,"line_start":148,"line_end":148,"column_start":5,"column_end":68}},{"value":"/ error.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":43313,"byte_end":43323,"line_start":149,"line_end":149,"column_start":5,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":167},"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":43581,"byte_end":43590,"line_start":158,"line_end":158,"column_start":12,"column_end":21},"name":"anonymize","qualname":"<Proxy<I>>::anonymize","value":"pub fn anonymize(&Self) -> Proxy<AnonymousObject>","parent":null,"children":[],"decl_id":null,"docs":" Creates a handle of this proxy with its actual type erased\n","sig":null,"attributes":[{"value":"/ Creates a handle of this proxy with its actual type erased","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":43507,"byte_end":43569,"line_start":157,"line_end":157,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":168},"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":44309,"byte_end":44321,"line_start":175,"line_end":175,"column_start":12,"column_end":24},"name":"make_wrapper","qualname":"<Proxy<I>>::make_wrapper","value":"pub fn make_wrapper(&Self, &QueueToken) -> Result<Proxy<I>, ()>","parent":null,"children":[],"decl_id":null,"docs":" Create a wrapper for this object for queue management","sig":null,"attributes":[{"value":"/ Create a wrapper for this object for queue management","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":43746,"byte_end":43803,"line_start":165,"line_end":165,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":43808,"byte_end":43811,"line_start":166,"line_end":166,"column_start":5,"column_end":8}},{"value":"/ As assigning a proxy to an event queue can be a racy operation","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":43816,"byte_end":43882,"line_start":167,"line_end":167,"column_start":5,"column_end":71}},{"value":"/ in contexts involving multiple thread, this provides a facility","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":43887,"byte_end":43954,"line_start":168,"line_end":168,"column_start":5,"column_end":72}},{"value":"/ to do this safely.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":43959,"byte_end":43981,"line_start":169,"line_end":169,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":43986,"byte_end":43989,"line_start":170,"line_end":170,"column_start":5,"column_end":8}},{"value":"/ The wrapper object created behaves like a regular `Proxy`, except that","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":43994,"byte_end":44068,"line_start":171,"line_end":171,"column_start":5,"column_end":79}},{"value":"/ all objects created as the result of its requests will be assigned to","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":44073,"byte_end":44146,"line_start":172,"line_end":172,"column_start":5,"column_end":78}},{"value":"/ the queue associated to the provided token, rather than the queue of","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":44151,"byte_end":44223,"line_start":173,"line_end":173,"column_start":5,"column_end":77}},{"value":"/ their parent. This does not change the queue of the proxy itself.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":44228,"byte_end":44297,"line_start":174,"line_end":174,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":169},"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":44864,"byte_end":44881,"line_start":189,"line_end":189,"column_start":12,"column_end":29},"name":"child_placeholder","qualname":"<Proxy<I>>::child_placeholder","value":"pub fn child_placeholder<J: Interface>(&Self) -> Proxy<J>","parent":null,"children":[],"decl_id":null,"docs":" Create a placeholder object, to be used with `send_constructor`","sig":null,"attributes":[{"value":"/ Create a placeholder object, to be used with `send_constructor`","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":44540,"byte_end":44607,"line_start":184,"line_end":184,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":44612,"byte_end":44615,"line_start":185,"line_end":185,"column_start":5,"column_end":8}},{"value":"/ **Warning:** This method is mostly intended to be used by code generated","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":44620,"byte_end":44696,"line_start":186,"line_end":186,"column_start":5,"column_end":81}},{"value":"/ by `wayland-scanner`, and you should probably never need to use it directly,","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":44701,"byte_end":44781,"line_start":187,"line_end":187,"column_start":5,"column_end":85}},{"value":"/ but rather use the appropriate `RequestsTrait` for your proxy.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":44786,"byte_end":44852,"line_start":188,"line_end":188,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":173},"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":45162,"byte_end":45173,"line_start":199,"line_end":199,"column_start":12,"column_end":23},"name":"is_external","qualname":"<Proxy<I>>::is_external","value":"pub fn is_external(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check whether this proxy is managed by the library or not","sig":null,"attributes":[{"value":"/ Check whether this proxy is managed by the library or not","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":45043,"byte_end":45104,"line_start":196,"line_end":196,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":45109,"byte_end":45112,"line_start":197,"line_end":197,"column_start":5,"column_end":8}},{"value":"/ See `from_c_ptr` for details.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":45117,"byte_end":45150,"line_start":198,"line_end":198,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":174},"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":45542,"byte_end":45547,"line_start":208,"line_end":208,"column_start":12,"column_end":17},"name":"c_ptr","qualname":"<Proxy<I>>::c_ptr","value":"pub fn c_ptr(&Self) -> *mut wl_proxy","parent":null,"children":[],"decl_id":null,"docs":" Get a raw pointer to the underlying wayland object","sig":null,"attributes":[{"value":"/ Get a raw pointer to the underlying wayland object","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":45235,"byte_end":45289,"line_start":203,"line_end":203,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":45294,"byte_end":45297,"line_start":204,"line_end":204,"column_start":5,"column_end":8}},{"value":"/ Retrieve a pointer to the object from the `libwayland-client.so` library.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":45302,"byte_end":45379,"line_start":205,"line_end":205,"column_start":5,"column_end":82}},{"value":"/ You will mostly need it to interface with C libraries needing access","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":45384,"byte_end":45456,"line_start":206,"line_end":206,"column_start":5,"column_end":77}},{"value":"/ to wayland objects (to initialize an opengl context for example).","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":45461,"byte_end":45530,"line_start":207,"line_end":207,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":175},"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":46652,"byte_end":46662,"line_start":231,"line_end":231,"column_start":19,"column_end":29},"name":"from_c_ptr","qualname":"<Proxy<I>>::from_c_ptr","value":"pub unsafe fn from_c_ptr(*mut wl_proxy) -> Proxy<I>","parent":null,"children":[],"decl_id":null,"docs":" Create a `Proxy` instance from a C pointer","sig":null,"attributes":[{"value":"/ Create a `Proxy` instance from a C pointer","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":45612,"byte_end":45658,"line_start":212,"line_end":212,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":45663,"byte_end":45666,"line_start":213,"line_end":213,"column_start":5,"column_end":8}},{"value":"/ Create a `Proxy` from a raw pointer to a wayland object from the","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":45671,"byte_end":45739,"line_start":214,"line_end":214,"column_start":5,"column_end":73}},{"value":"/ C library.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":45744,"byte_end":45758,"line_start":215,"line_end":215,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":45763,"byte_end":45766,"line_start":216,"line_end":216,"column_start":5,"column_end":8}},{"value":"/ If the pointer was previously obtained by the `c_ptr()` method, this","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":45771,"byte_end":45843,"line_start":217,"line_end":217,"column_start":5,"column_end":77}},{"value":"/ constructs a new proxy for the same object just like the `clone()`","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":45848,"byte_end":45918,"line_start":218,"line_end":218,"column_start":5,"column_end":75}},{"value":"/ method would have.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":45923,"byte_end":45945,"line_start":219,"line_end":219,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":45950,"byte_end":45953,"line_start":220,"line_end":220,"column_start":5,"column_end":8}},{"value":"/ If the object was created by some other C library you are interfacing","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":45958,"byte_end":46031,"line_start":221,"line_end":221,"column_start":5,"column_end":78}},{"value":"/ with, it will be created in an \"unmanaged\" state: wayland-client will","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":46036,"byte_end":46109,"line_start":222,"line_end":222,"column_start":5,"column_end":78}},{"value":"/ treat it as foreign, and as such most of the safeties will be absent.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":46114,"byte_end":46187,"line_start":223,"line_end":223,"column_start":5,"column_end":78}},{"value":"/ Notably the lifetime of the object can't be tracked, so the `alive()`","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":46192,"byte_end":46265,"line_start":224,"line_end":224,"column_start":5,"column_end":78}},{"value":"/ method will always return `false` and you are responsible of not using","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":46270,"byte_end":46344,"line_start":225,"line_end":225,"column_start":5,"column_end":79}},{"value":"/ an object past its destruction (as this would cause a protocol error).","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":46349,"byte_end":46423,"line_start":226,"line_end":226,"column_start":5,"column_end":79}},{"value":"/ You will also be unable to associate any user data pointer to this object.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":46428,"byte_end":46506,"line_start":227,"line_end":227,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":46511,"byte_end":46514,"line_start":228,"line_end":228,"column_start":5,"column_end":8}},{"value":"/ In order to handle protocol races, invoking it with a NULL pointer will","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":46519,"byte_end":46594,"line_start":229,"line_end":229,"column_start":5,"column_end":80}},{"value":"/ create an already-dead object.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":46599,"byte_end":46633,"line_start":230,"line_end":230,"column_start":5,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":178},"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":47652,"byte_end":47660,"line_start":262,"line_end":262,"column_start":12,"column_end":20},"name":"NewProxy","qualname":"::proxy::NewProxy","value":"NewProxy {  }","parent":null,"children":[{"krate":0,"index":180},{"krate":0,"index":181}],"decl_id":null,"docs":" A newly-created proxy that needs implementation","sig":null,"attributes":[{"value":"/ A newly-created proxy that needs implementation","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":47176,"byte_end":47227,"line_start":251,"line_end":251,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":47228,"byte_end":47231,"line_start":252,"line_end":252,"column_start":1,"column_end":4}},{"value":"/ Whenever a new wayland object is created, you will","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":47232,"byte_end":47286,"line_start":253,"line_end":253,"column_start":1,"column_end":55}},{"value":"/ receive it as a `NewProxy`. You then have to provide an","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":47287,"byte_end":47346,"line_start":254,"line_end":254,"column_start":1,"column_end":60}},{"value":"/ implementation for it, in order to process the incoming","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":47347,"byte_end":47406,"line_start":255,"line_end":255,"column_start":1,"column_end":60}},{"value":"/ events it may receive. Once this done you will be able","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":47407,"byte_end":47465,"line_start":256,"line_end":256,"column_start":1,"column_end":59}},{"value":"/ to use it as a regular `Proxy`.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":47466,"byte_end":47501,"line_start":257,"line_end":257,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":47502,"byte_end":47505,"line_start":258,"line_end":258,"column_start":1,"column_end":4}},{"value":"/ Implementations are structs implementing the appropriate","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":47506,"byte_end":47566,"line_start":259,"line_end":259,"column_start":1,"column_end":61}},{"value":"/ variant of the `Implementation` trait. They can also be","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":47567,"byte_end":47626,"line_start":260,"line_end":260,"column_start":1,"column_end":60}},{"value":"/ closures.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":47627,"byte_end":47640,"line_start":261,"line_end":261,"column_start":1,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":185},"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":48077,"byte_end":48086,"line_start":277,"line_end":277,"column_start":12,"column_end":21},"name":"implement","qualname":"<NewProxy<I>>::implement","value":"pub fn implement<F, UD>(Self, F, UD) -> Proxy<I> where\nF: FnMut(I::Event, Proxy<I>) -> () + Send + 'static, UD: Send + Sync +\n'static, I::Event: MessageGroup<Map = ProxyMap>","parent":null,"children":[],"decl_id":null,"docs":" Implement this proxy using given function and implementation data.\n","sig":null,"attributes":[{"value":"/ Implement this proxy using given function and implementation data.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":47995,"byte_end":48065,"line_start":276,"line_end":276,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":188},"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":49236,"byte_end":49253,"line_start":306,"line_end":306,"column_start":19,"column_end":36},"name":"implement_nonsend","qualname":"<NewProxy<I>>::implement_nonsend","value":"pub unsafe fn implement_nonsend<Impl, UD>(Self, Impl, UD, &QueueToken)\n-> Proxy<I> where Impl: FnMut(I::Event, Proxy<I>) -> () + 'static,\nUD: 'static, I::Event: MessageGroup<Map = ProxyMap>","parent":null,"children":[],"decl_id":null,"docs":" Implement this proxy using given function and implementation data.","sig":null,"attributes":[{"value":"/ Implement this proxy using given function and implementation data.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":48558,"byte_end":48628,"line_start":293,"line_end":293,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":48633,"byte_end":48636,"line_start":294,"line_end":294,"column_start":5,"column_end":8}},{"value":"/ This method allows the implementation to not be `Send`, but requires for","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":48641,"byte_end":48717,"line_start":295,"line_end":295,"column_start":5,"column_end":81}},{"value":"/ safety that you provide a token to the event queue this proxy will be implemented","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":48722,"byte_end":48807,"line_start":296,"line_end":296,"column_start":5,"column_end":90}},{"value":"/ on. This method will then ensure that this proxy is registered on this event queue,","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":48812,"byte_end":48899,"line_start":297,"line_end":297,"column_start":5,"column_end":92}},{"value":"/ so that it cannot be dispatched from an other thread.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":48904,"byte_end":48961,"line_start":298,"line_end":298,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":48966,"byte_end":48969,"line_start":299,"line_end":299,"column_start":5,"column_end":8}},{"value":"/ **Unsafety:**","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":48974,"byte_end":48991,"line_start":300,"line_end":300,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":48996,"byte_end":48999,"line_start":301,"line_end":301,"column_start":5,"column_end":8}},{"value":"/ This call can be racy if the proxy is not already registered on this event queue and its","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":49004,"byte_end":49096,"line_start":302,"line_end":302,"column_start":5,"column_end":97}},{"value":"/ old queue is being dispatched from an other thread.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":49101,"byte_end":49156,"line_start":303,"line_end":303,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":49161,"byte_end":49164,"line_start":304,"line_end":304,"column_start":5,"column_end":8}},{"value":"/ To ensure safety, see `Proxy::make_wrapper`.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":49169,"byte_end":49217,"line_start":305,"line_end":305,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":193},"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":50474,"byte_end":50479,"line_start":345,"line_end":345,"column_start":12,"column_end":17},"name":"c_ptr","qualname":"<NewProxy<I>>::c_ptr","value":"pub fn c_ptr(&Self) -> *mut wl_proxy","parent":null,"children":[],"decl_id":null,"docs":" Get a raw pointer to the underlying wayland object","sig":null,"attributes":[{"value":"/ Get a raw pointer to the underlying wayland object","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":50047,"byte_end":50101,"line_start":337,"line_end":337,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":50106,"byte_end":50109,"line_start":338,"line_end":338,"column_start":5,"column_end":8}},{"value":"/ Retrieve a pointer to the object from the `libwayland-client.so` library.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":50114,"byte_end":50191,"line_start":339,"line_end":339,"column_start":5,"column_end":82}},{"value":"/ You will mostly need it to interface with C libraries needing access","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":50196,"byte_end":50268,"line_start":340,"line_end":340,"column_start":5,"column_end":77}},{"value":"/ to wayland objects (to initialize an opengl context for example).","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":50273,"byte_end":50342,"line_start":341,"line_end":341,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":50347,"byte_end":50350,"line_start":342,"line_end":342,"column_start":5,"column_end":8}},{"value":"/ Use this if you need to pass an unimplemented object to the C library","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":50355,"byte_end":50428,"line_start":343,"line_end":343,"column_start":5,"column_end":78}},{"value":"/ you are interfacing with.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":50433,"byte_end":50462,"line_start":344,"line_end":344,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":194},"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":50913,"byte_end":50923,"line_start":355,"line_end":355,"column_start":19,"column_end":29},"name":"from_c_ptr","qualname":"<NewProxy<I>>::from_c_ptr","value":"pub unsafe fn from_c_ptr(*mut wl_proxy) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a `NewProxy` instance from a C pointer.","sig":null,"attributes":[{"value":"/ Create a `NewProxy` instance from a C pointer.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":50544,"byte_end":50594,"line_start":349,"line_end":349,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":50599,"byte_end":50602,"line_start":350,"line_end":350,"column_start":5,"column_end":8}},{"value":"/ By doing so, you assert that this wayland object was newly created and","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":50607,"byte_end":50681,"line_start":351,"line_end":351,"column_start":5,"column_end":79}},{"value":"/ can be safely implemented. As implementing it will overwrite any previously","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":50686,"byte_end":50765,"line_start":352,"line_end":352,"column_start":5,"column_end":84}},{"value":"/ associated data or implementation, this can cause weird errors akin to","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":50770,"byte_end":50844,"line_start":353,"line_end":353,"column_start":5,"column_end":79}},{"value":"/ memory corruption if it was not the case.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":50849,"byte_end":50894,"line_start":354,"line_end":354,"column_start":5,"column_end":50}}]},{"kind":"Mod","id":{"krate":0,"index":211},"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/cursor.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"cursor","qualname":"::cursor","value":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/cursor.rs","parent":null,"children":[{"krate":0,"index":212},{"krate":0,"index":3756},{"krate":0,"index":213},{"krate":0,"index":3758},{"krate":0,"index":214},{"krate":0,"index":215},{"krate":0,"index":216},{"krate":0,"index":217},{"krate":0,"index":3764},{"krate":0,"index":218},{"krate":0,"index":219},{"krate":0,"index":220},{"krate":0,"index":221},{"krate":0,"index":222},{"krate":0,"index":223},{"krate":0,"index":224},{"krate":0,"index":226},{"krate":0,"index":227},{"krate":0,"index":228},{"krate":0,"index":230},{"krate":0,"index":232},{"krate":0,"index":236},{"krate":0,"index":238},{"krate":0,"index":246},{"krate":0,"index":250},{"krate":0,"index":252}],"decl_id":null,"docs":" Cursor utilities","sig":null,"attributes":[{"value":"cfg(feature = \"cursor\")","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":6638,"byte_end":6664,"line_start":145,"line_end":145,"column_start":1,"column_end":27}},{"value":"! Cursor utilities","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/cursor.rs","byte_start":51087,"byte_end":51107,"line_start":1,"line_end":1,"column_start":1,"column_end":21}},{"value":"!","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/cursor.rs","byte_start":51108,"byte_end":51111,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! This module contains bindings to the `libwayland-cursor.so` library.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/cursor.rs","byte_start":51112,"byte_end":51184,"line_start":3,"line_end":3,"column_start":1,"column_end":73}},{"value":"!","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/cursor.rs","byte_start":51185,"byte_end":51188,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"! These utilities allows you to load cursor images in order to match","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/cursor.rs","byte_start":51189,"byte_end":51259,"line_start":5,"line_end":5,"column_start":1,"column_end":71}},{"value":"! your cursors to the ones of the system.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/cursor.rs","byte_start":51260,"byte_end":51303,"line_start":6,"line_end":6,"column_start":1,"column_end":44}},{"value":"!","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/cursor.rs","byte_start":51304,"byte_end":51307,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"! First of all, the function `load_theme` will allow you to load a","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/cursor.rs","byte_start":51308,"byte_end":51376,"line_start":8,"line_end":8,"column_start":1,"column_end":69}},{"value":"! `CursorTheme`, which represents the full cursor theme.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/cursor.rs","byte_start":51377,"byte_end":51435,"line_start":9,"line_end":9,"column_start":1,"column_end":59}},{"value":"!","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/cursor.rs","byte_start":51436,"byte_end":51439,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"! From this theme, you can load a specific `Cursor`, which can each","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/cursor.rs","byte_start":51440,"byte_end":51509,"line_start":11,"line_end":11,"column_start":1,"column_end":70}},{"value":"! contain several images if the cursor is animated. It provides you","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/cursor.rs","byte_start":51510,"byte_end":51579,"line_start":12,"line_end":12,"column_start":1,"column_end":70}},{"value":"! with the means of knowing which frame of the animation should be","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/cursor.rs","byte_start":51580,"byte_end":51648,"line_start":13,"line_end":13,"column_start":1,"column_end":69}},{"value":"! displayed at which time, as well as handles to the buffers containing","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/cursor.rs","byte_start":51649,"byte_end":51722,"line_start":14,"line_end":14,"column_start":1,"column_end":74}},{"value":"! these frames, to attach them to a wayland surface.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/cursor.rs","byte_start":51723,"byte_end":51777,"line_start":15,"line_end":15,"column_start":1,"column_end":55}}]},{"kind":"Function","id":{"krate":0,"index":223},"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/cursor.rs","byte_start":52182,"byte_end":52194,"line_start":31,"line_end":31,"column_start":8,"column_end":20},"name":"is_available","qualname":"::cursor::is_available","value":"pub fn is_available() -> bool","parent":null,"children":[],"decl_id":null,"docs":" Checks if the wayland-cursor lib is available and can be used","sig":null,"attributes":[{"value":"/ Checks if the wayland-cursor lib is available and can be used","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/cursor.rs","byte_start":52004,"byte_end":52069,"line_start":27,"line_end":27,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/cursor.rs","byte_start":52070,"byte_end":52073,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ Trying to call any function of this module if the lib cannot","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/cursor.rs","byte_start":52074,"byte_end":52138,"line_start":29,"line_end":29,"column_start":1,"column_end":65}},{"value":"/ be used will result in a panic.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/cursor.rs","byte_start":52139,"byte_end":52174,"line_start":30,"line_end":30,"column_start":1,"column_end":36}}]},{"kind":"Struct","id":{"krate":0,"index":224},"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/cursor.rs","byte_start":52298,"byte_end":52309,"line_start":36,"line_end":36,"column_start":12,"column_end":23},"name":"CursorTheme","qualname":"::cursor::CursorTheme","value":"CursorTheme {  }","parent":null,"children":[{"krate":0,"index":225}],"decl_id":null,"docs":" Represents a cursor theme loaded from the system.\n","sig":null,"attributes":[{"value":"/ Represents a cursor theme loaded from the system.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/cursor.rs","byte_start":52233,"byte_end":52286,"line_start":35,"line_end":35,"column_start":1,"column_end":54}}]},{"kind":"Function","id":{"krate":0,"index":227},"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/cursor.rs","byte_start":52908,"byte_end":52918,"line_start":56,"line_end":56,"column_start":8,"column_end":18},"name":"load_theme","qualname":"::cursor::load_theme","value":"pub fn load_theme(Option<&str>, u32, &Proxy<WlShm>) -> CursorTheme","parent":null,"children":[],"decl_id":null,"docs":" Attempts to load a cursor theme from given name.","sig":null,"attributes":[{"value":"/ Attempts to load a cursor theme from given name.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/cursor.rs","byte_start":52385,"byte_end":52437,"line_start":42,"line_end":42,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/cursor.rs","byte_start":52438,"byte_end":52441,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ If no name is given or the requested theme is not found, will","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/cursor.rs","byte_start":52442,"byte_end":52507,"line_start":44,"line_end":44,"column_start":1,"column_end":66}},{"value":"/ load the default theme.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/cursor.rs","byte_start":52508,"byte_end":52535,"line_start":45,"line_end":45,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/cursor.rs","byte_start":52536,"byte_end":52539,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ Other arguments are the requested size for the cursor images (ex: 16)","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/cursor.rs","byte_start":52540,"byte_end":52613,"line_start":47,"line_end":47,"column_start":1,"column_end":74}},{"value":"/ and a handle to the global `WlShm` object.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/cursor.rs","byte_start":52614,"byte_end":52660,"line_start":48,"line_end":48,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/cursor.rs","byte_start":52661,"byte_end":52664,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ Panics:","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/cursor.rs","byte_start":52665,"byte_end":52676,"line_start":50,"line_end":50,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/cursor.rs","byte_start":52677,"byte_end":52680,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ - If the `wayland-cursor` lib is not available (see `is_available()` function)","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/cursor.rs","byte_start":52681,"byte_end":52763,"line_start":52,"line_end":52,"column_start":1,"column_end":83}},{"value":"/   in this module.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/cursor.rs","byte_start":52764,"byte_end":52785,"line_start":53,"line_end":53,"column_start":1,"column_end":22}},{"value":"/ - In case of memory allocation failure.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/cursor.rs","byte_start":52786,"byte_end":52829,"line_start":54,"line_end":54,"column_start":1,"column_end":44}},{"value":"/ - If the theme name provided as argument contains an interior null","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/cursor.rs","byte_start":52830,"byte_end":52900,"line_start":55,"line_end":55,"column_start":1,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":229},"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/cursor.rs","byte_start":53933,"byte_end":53943,"line_start":91,"line_end":91,"column_start":12,"column_end":22},"name":"get_cursor","qualname":"<CursorTheme>::get_cursor","value":"pub fn get_cursor(&Self, &str) -> Option<Cursor>","parent":null,"children":[],"decl_id":null,"docs":" Retrieve a cursor from the theme.","sig":null,"attributes":[{"value":"/ Retrieve a cursor from the theme.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/cursor.rs","byte_start":53746,"byte_end":53783,"line_start":86,"line_end":86,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/cursor.rs","byte_start":53788,"byte_end":53791,"line_start":87,"line_end":87,"column_start":5,"column_end":8}},{"value":"/ Returns `None` if this cursor is not provided by the theme.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/cursor.rs","byte_start":53796,"byte_end":53859,"line_start":88,"line_end":88,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/cursor.rs","byte_start":53864,"byte_end":53867,"line_start":89,"line_end":89,"column_start":5,"column_end":8}},{"value":"/ Panics if the name contains an interior null.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/cursor.rs","byte_start":53872,"byte_end":53921,"line_start":90,"line_end":90,"column_start":5,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":232},"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/cursor.rs","byte_start":54733,"byte_end":54739,"line_start":121,"line_end":121,"column_start":12,"column_end":18},"name":"Cursor","qualname":"::cursor::Cursor","value":"Cursor {  }","parent":null,"children":[{"krate":0,"index":234},{"krate":0,"index":235}],"decl_id":null,"docs":" A cursor from a theme. Can contain several images if animated.\n","sig":null,"attributes":[{"value":"/ A cursor from a theme. Can contain several images if animated.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/cursor.rs","byte_start":54655,"byte_end":54721,"line_start":120,"line_end":120,"column_start":1,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":240},"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/cursor.rs","byte_start":54934,"byte_end":54938,"line_start":130,"line_end":130,"column_start":12,"column_end":16},"name":"name","qualname":"<Cursor>::name","value":"pub fn name(&Self) -> String","parent":null,"children":[],"decl_id":null,"docs":" Retrieve the name of this cursor.\n","sig":null,"attributes":[{"value":"/ Retrieve the name of this cursor.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/cursor.rs","byte_start":54885,"byte_end":54922,"line_start":129,"line_end":129,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":241},"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/cursor.rs","byte_start":55167,"byte_end":55178,"line_start":137,"line_end":137,"column_start":12,"column_end":23},"name":"image_count","qualname":"<Cursor>::image_count","value":"pub fn image_count(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Retrieve the number of images contained in this\n animated cursor\n","sig":null,"attributes":[{"value":"/ Retrieve the number of images contained in this","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/cursor.rs","byte_start":55080,"byte_end":55131,"line_start":135,"line_end":135,"column_start":5,"column_end":56}},{"value":"/ animated cursor","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/cursor.rs","byte_start":55136,"byte_end":55155,"line_start":136,"line_end":136,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":242},"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/cursor.rs","byte_start":55535,"byte_end":55540,"line_start":147,"line_end":147,"column_start":12,"column_end":17},"name":"frame","qualname":"<Cursor>::frame","value":"pub fn frame(&Self, u32) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Retrieve the image number of cursor animation.","sig":null,"attributes":[{"value":"/ Retrieve the image number of cursor animation.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/cursor.rs","byte_start":55290,"byte_end":55340,"line_start":142,"line_end":142,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/cursor.rs","byte_start":55345,"byte_end":55348,"line_start":143,"line_end":143,"column_start":5,"column_end":8}},{"value":"/ Returns the image number of the animation that should be displayed","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/cursor.rs","byte_start":55353,"byte_end":55423,"line_start":144,"line_end":144,"column_start":5,"column_end":75}},{"value":"/ after a given amount of time since the beginning of the animation,","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/cursor.rs","byte_start":55428,"byte_end":55498,"line_start":145,"line_end":145,"column_start":5,"column_end":75}},{"value":"/ in milliseconds.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/cursor.rs","byte_start":55503,"byte_end":55523,"line_start":146,"line_end":146,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":243},"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/cursor.rs","byte_start":55901,"byte_end":55919,"line_start":156,"line_end":156,"column_start":12,"column_end":30},"name":"frame_and_duration","qualname":"<Cursor>::frame_and_duration","value":"pub fn frame_and_duration(&Self, u32) -> (usize, u32)","parent":null,"children":[],"decl_id":null,"docs":" Retrieve the image number and its duration.","sig":null,"attributes":[{"value":"/ Retrieve the image number and its duration.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/cursor.rs","byte_start":55717,"byte_end":55764,"line_start":152,"line_end":152,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/cursor.rs","byte_start":55769,"byte_end":55772,"line_start":153,"line_end":153,"column_start":5,"column_end":8}},{"value":"/ Same as `frame()`, but also returns the number of milliseconds this","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/cursor.rs","byte_start":55777,"byte_end":55848,"line_start":154,"line_end":154,"column_start":5,"column_end":76}},{"value":"/ frame should still be displayed.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/cursor.rs","byte_start":55853,"byte_end":55889,"line_start":155,"line_end":155,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":244},"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/cursor.rs","byte_start":56694,"byte_end":56706,"line_start":178,"line_end":178,"column_start":12,"column_end":24},"name":"frame_buffer","qualname":"<Cursor>::frame_buffer","value":"pub fn frame_buffer(&Self, usize) -> Option<CursorImageBuffer>","parent":null,"children":[],"decl_id":null,"docs":" Retrieve a `CursorImageBuffer` containing the given image of an animation.","sig":null,"attributes":[{"value":"/ Retrieve a `CursorImageBuffer` containing the given image of an animation.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/cursor.rs","byte_start":56314,"byte_end":56392,"line_start":170,"line_end":170,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/cursor.rs","byte_start":56397,"byte_end":56400,"line_start":171,"line_end":171,"column_start":5,"column_end":8}},{"value":"/ It can be used to be attached to a surface as a classic `WlBuffer`.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/cursor.rs","byte_start":56405,"byte_end":56476,"line_start":172,"line_end":172,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/cursor.rs","byte_start":56481,"byte_end":56484,"line_start":173,"line_end":173,"column_start":5,"column_end":8}},{"value":"/ Returns `None` if the frame is out of bounds.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/cursor.rs","byte_start":56489,"byte_end":56538,"line_start":174,"line_end":174,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/cursor.rs","byte_start":56543,"byte_end":56546,"line_start":175,"line_end":175,"column_start":5,"column_end":8}},{"value":"/ Note: destroying this buffer (using the `destroy` method) will corrupt","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/cursor.rs","byte_start":56551,"byte_end":56625,"line_start":176,"line_end":176,"column_start":5,"column_end":79}},{"value":"/ your theme data, so you might not want to do it.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/cursor.rs","byte_start":56630,"byte_end":56682,"line_start":177,"line_end":177,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":245},"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/cursor.rs","byte_start":57484,"byte_end":57494,"line_start":200,"line_end":200,"column_start":12,"column_end":22},"name":"frame_info","qualname":"<Cursor>::frame_info","value":"pub fn frame_info(&Self, usize) -> Option<(u32, u32, u32, u32, u32)>","parent":null,"children":[],"decl_id":null,"docs":" Retrieve the metadata associated with given frame of the animation.","sig":null,"attributes":[{"value":"/ Retrieve the metadata associated with given frame of the animation.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/cursor.rs","byte_start":57256,"byte_end":57327,"line_start":195,"line_end":195,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/cursor.rs","byte_start":57332,"byte_end":57335,"line_start":196,"line_end":196,"column_start":5,"column_end":8}},{"value":"/ The tuple contains: `(width, height, hotspot_x, hotspot_y, delay)`","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/cursor.rs","byte_start":57340,"byte_end":57410,"line_start":197,"line_end":197,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/cursor.rs","byte_start":57415,"byte_end":57418,"line_start":198,"line_end":198,"column_start":5,"column_end":8}},{"value":"/ Returns `None` if the frame is out of bounds.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/cursor.rs","byte_start":57423,"byte_end":57472,"line_start":199,"line_end":199,"column_start":5,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":246},"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/cursor.rs","byte_start":58189,"byte_end":58206,"line_start":222,"line_end":222,"column_start":12,"column_end":29},"name":"CursorImageBuffer","qualname":"::cursor::CursorImageBuffer","value":"CursorImageBuffer {  }","parent":null,"children":[{"krate":0,"index":248},{"krate":0,"index":249}],"decl_id":null,"docs":" A buffer containing a cursor image.","sig":null,"attributes":[{"value":"/ A buffer containing a cursor image.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/cursor.rs","byte_start":57921,"byte_end":57960,"line_start":216,"line_end":216,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/cursor.rs","byte_start":57961,"byte_end":57964,"line_start":217,"line_end":217,"column_start":1,"column_end":4}},{"value":"/ You can access the `Proxy<WlBuffer>` via `Deref`.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/cursor.rs","byte_start":57965,"byte_end":58018,"line_start":218,"line_end":218,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/cursor.rs","byte_start":58019,"byte_end":58022,"line_start":219,"line_end":219,"column_start":1,"column_end":4}},{"value":"/ Note that this proxy will be considered as \"unmanaged\" by the crate, as such you should","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/cursor.rs","byte_start":58023,"byte_end":58114,"line_start":220,"line_end":220,"column_start":1,"column_end":92}},{"value":"/ not try to act on it beyond assigning it to `wl_surface`s.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/cursor.rs","byte_start":58115,"byte_end":58177,"line_start":221,"line_end":221,"column_start":1,"column_end":63}}]},{"kind":"Mod","id":{"krate":0,"index":256},"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/egl.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"egl","qualname":"::egl","value":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/egl.rs","parent":null,"children":[{"krate":0,"index":257},{"krate":0,"index":3774},{"krate":0,"index":258},{"krate":0,"index":259},{"krate":0,"index":260},{"krate":0,"index":261},{"krate":0,"index":262},{"krate":0,"index":263},{"krate":0,"index":264},{"krate":0,"index":265},{"krate":0,"index":267},{"krate":0,"index":273}],"decl_id":null,"docs":" EGL utilities","sig":null,"attributes":[{"value":"cfg(feature = \"egl\")","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":6682,"byte_end":6705,"line_start":148,"line_end":148,"column_start":1,"column_end":24}},{"value":"! EGL utilities","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/egl.rs","byte_start":58488,"byte_end":58505,"line_start":1,"line_end":1,"column_start":1,"column_end":18}},{"value":"!","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/egl.rs","byte_start":58506,"byte_end":58509,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! This module contains bindings to the `libwayland-egl.so` library.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/egl.rs","byte_start":58510,"byte_end":58579,"line_start":3,"line_end":3,"column_start":1,"column_end":70}},{"value":"!","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/egl.rs","byte_start":58580,"byte_end":58583,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"! This library is used to interface with the OpenGL stack, and creating","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/egl.rs","byte_start":58584,"byte_end":58657,"line_start":5,"line_end":5,"column_start":1,"column_end":74}},{"value":"! EGL surfaces from a wayland surface.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/egl.rs","byte_start":58658,"byte_end":58698,"line_start":6,"line_end":6,"column_start":1,"column_end":41}},{"value":"!","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/egl.rs","byte_start":58699,"byte_end":58702,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"! See WlEglSurface documentation for details.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/egl.rs","byte_start":58703,"byte_end":58750,"line_start":8,"line_end":8,"column_start":1,"column_end":48}}]},{"kind":"Function","id":{"krate":0,"index":262},"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/egl.rs","byte_start":59064,"byte_end":59076,"line_start":20,"line_end":20,"column_start":8,"column_end":20},"name":"is_available","qualname":"::egl::is_available","value":"pub fn is_available() -> bool","parent":null,"children":[],"decl_id":null,"docs":" Checks if the wayland-egl lib is available and can be used","sig":null,"attributes":[{"value":"/ Checks if the wayland-egl lib is available and can be used","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/egl.rs","byte_start":58887,"byte_end":58949,"line_start":16,"line_end":16,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/egl.rs","byte_start":58950,"byte_end":58953,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ Trying to create an `WlEglSurface` while this function returns","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/egl.rs","byte_start":58954,"byte_end":59020,"line_start":18,"line_end":18,"column_start":1,"column_end":67}},{"value":"/ `false` will result in a panic.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/egl.rs","byte_start":59021,"byte_end":59056,"line_start":19,"line_end":19,"column_start":1,"column_end":36}}]},{"kind":"Struct","id":{"krate":0,"index":265},"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/egl.rs","byte_start":59601,"byte_end":59613,"line_start":34,"line_end":34,"column_start":12,"column_end":24},"name":"WlEglSurface","qualname":"::egl::WlEglSurface","value":"WlEglSurface {  }","parent":null,"children":[{"krate":0,"index":266}],"decl_id":null,"docs":" EGL surface","sig":null,"attributes":[{"value":"/ EGL surface","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/egl.rs","byte_start":59190,"byte_end":59205,"line_start":27,"line_end":27,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/egl.rs","byte_start":59206,"byte_end":59209,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ This object is a simple wrapper around a `WlSurface` to add the EGL","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/egl.rs","byte_start":59210,"byte_end":59281,"line_start":29,"line_end":29,"column_start":1,"column_end":72}},{"value":"/ capabilities. Just use the `ptr` method once this object is created","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/egl.rs","byte_start":59282,"byte_end":59353,"line_start":30,"line_end":30,"column_start":1,"column_end":72}},{"value":"/ to get the window pointer your OpenGL library is needing to initialize the","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/egl.rs","byte_start":59354,"byte_end":59432,"line_start":31,"line_end":31,"column_start":1,"column_end":79}},{"value":"/ EGL context (you'll most likely need the display ptr as well, that you can","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/egl.rs","byte_start":59433,"byte_end":59511,"line_start":32,"line_end":32,"column_start":1,"column_end":79}},{"value":"/ get via the `ptr` method of the `Proxy` trait on the `WlDisplay` object).","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/egl.rs","byte_start":59512,"byte_end":59589,"line_start":33,"line_end":33,"column_start":1,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":268},"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/egl.rs","byte_start":59732,"byte_end":59735,"line_start":40,"line_end":40,"column_start":12,"column_end":15},"name":"new","qualname":"<WlEglSurface>::new","value":"pub fn new(&Proxy<WlSurface>, i32, i32) -> WlEglSurface","parent":null,"children":[],"decl_id":null,"docs":" Create an EGL surface from a wayland surface\n","sig":null,"attributes":[{"value":"/ Create an EGL surface from a wayland surface","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/egl.rs","byte_start":59672,"byte_end":59720,"line_start":39,"line_end":39,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":269},"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/egl.rs","byte_start":60073,"byte_end":60085,"line_start":47,"line_end":47,"column_start":19,"column_end":31},"name":"new_from_raw","qualname":"<WlEglSurface>::new_from_raw","value":"pub unsafe fn new_from_raw(*mut wl_proxy, i32, i32) -> WlEglSurface","parent":null,"children":[],"decl_id":null,"docs":" Create an EGL surface from a raw pointer to a wayland surface","sig":null,"attributes":[{"value":"/ Create an EGL surface from a raw pointer to a wayland surface","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/egl.rs","byte_start":59896,"byte_end":59961,"line_start":44,"line_end":44,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/egl.rs","byte_start":59966,"byte_end":59969,"line_start":45,"line_end":45,"column_start":5,"column_end":8}},{"value":"/ This function is unsafe because `surface` must be a valid wl_surface pointer","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/egl.rs","byte_start":59974,"byte_end":60054,"line_start":46,"line_end":46,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":270},"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/egl.rs","byte_start":60350,"byte_end":60358,"line_start":53,"line_end":53,"column_start":12,"column_end":20},"name":"get_size","qualname":"<WlEglSurface>::get_size","value":"pub fn get_size(&Self) -> (i32, i32)","parent":null,"children":[],"decl_id":null,"docs":" Fetch current size of the EGL surface\n","sig":null,"attributes":[{"value":"/ Fetch current size of the EGL surface","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/egl.rs","byte_start":60297,"byte_end":60338,"line_start":52,"line_end":52,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":271},"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/egl.rs","byte_start":61025,"byte_end":61031,"line_start":74,"line_end":74,"column_start":12,"column_end":18},"name":"resize","qualname":"<WlEglSurface>::resize","value":"pub fn resize(&Self, i32, i32, i32, i32)","parent":null,"children":[],"decl_id":null,"docs":" Resize the EGL surface","sig":null,"attributes":[{"value":"/ Resize the EGL surface","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/egl.rs","byte_start":60711,"byte_end":60737,"line_start":68,"line_end":68,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/egl.rs","byte_start":60742,"byte_end":60745,"line_start":69,"line_end":69,"column_start":5,"column_end":8}},{"value":"/ The two first arguments `(width, height)` are the new size of","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/egl.rs","byte_start":60750,"byte_end":60815,"line_start":70,"line_end":70,"column_start":5,"column_end":70}},{"value":"/ the surface, the two others `(dx, dy)` represent the displacement","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/egl.rs","byte_start":60820,"byte_end":60889,"line_start":71,"line_end":71,"column_start":5,"column_end":74}},{"value":"/ of the top-left corner of the surface. It allows you to control the","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/egl.rs","byte_start":60894,"byte_end":60965,"line_start":72,"line_end":72,"column_start":5,"column_end":76}},{"value":"/ direction of the resizing if necessary.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/egl.rs","byte_start":60970,"byte_end":61013,"line_start":73,"line_end":73,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":272},"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/egl.rs","byte_start":61504,"byte_end":61507,"line_start":92,"line_end":92,"column_start":12,"column_end":15},"name":"ptr","qualname":"<WlEglSurface>::ptr","value":"pub fn ptr(&Self) -> *const c_void","parent":null,"children":[],"decl_id":null,"docs":" Raw pointer to the EGL surface","sig":null,"attributes":[{"value":"/ Raw pointer to the EGL surface","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/egl.rs","byte_start":61349,"byte_end":61383,"line_start":88,"line_end":88,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/egl.rs","byte_start":61388,"byte_end":61391,"line_start":89,"line_end":89,"column_start":5,"column_end":8}},{"value":"/ You'll need this pointer to initialize the EGL context in your","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/egl.rs","byte_start":61396,"byte_end":61462,"line_start":90,"line_end":90,"column_start":5,"column_end":71}},{"value":"/ favourite OpenGL lib.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/egl.rs","byte_start":61467,"byte_end":61492,"line_start":91,"line_end":91,"column_start":5,"column_end":30}}]},{"kind":"Enum","id":{"krate":0,"index":404},"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/native_lib/mod.rs","byte_start":62131,"byte_end":62139,"line_start":15,"line_end":15,"column_start":10,"column_end":18},"name":"ProxyMap","qualname":"::imp::ProxyMap","value":"pub enum ProxyMap { }","parent":null,"children":[],"decl_id":null,"docs":" This type only exists for type-level compatibility\n with the rust implementation.","sig":null,"attributes":[{"value":"/ This type only exists for type-level compatibility","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/native_lib/mod.rs","byte_start":61977,"byte_end":62031,"line_start":11,"line_end":11,"column_start":1,"column_end":55}},{"value":"/ with the rust implementation.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/native_lib/mod.rs","byte_start":62032,"byte_end":62065,"line_start":12,"line_end":12,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/native_lib/mod.rs","byte_start":62066,"byte_end":62069,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ It is an empty enum that cannot be instantiated","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/native_lib/mod.rs","byte_start":62070,"byte_end":62121,"line_start":14,"line_end":14,"column_start":1,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":406},"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/native_lib/mod.rs","byte_start":62238,"byte_end":62241,"line_start":19,"line_end":19,"column_start":12,"column_end":15},"name":"get","qualname":"<ProxyMap>::get","value":"pub fn get<I: Interface>(&mut Self, u32) -> Option<Proxy<I>>","parent":null,"children":[],"decl_id":null,"docs":" Unusable method only existing for type-level compatibility\n","sig":null,"attributes":[{"value":"/ Unusable method only existing for type-level compatibility","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/native_lib/mod.rs","byte_start":62164,"byte_end":62226,"line_start":18,"line_end":18,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":408},"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/native_lib/mod.rs","byte_start":62405,"byte_end":62412,"line_start":24,"line_end":24,"column_start":12,"column_end":19},"name":"get_new","qualname":"<ProxyMap>::get_new","value":"pub fn get_new<I: Interface>(&mut Self, u32) -> Option<NewProxy<I>>","parent":null,"children":[],"decl_id":null,"docs":" Unusable method only existing for type-level compatibility\n","sig":null,"attributes":[{"value":"/ Unusable method only existing for type-level compatibility","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/native_lib/mod.rs","byte_start":62331,"byte_end":62393,"line_start":23,"line_end":23,"column_start":5,"column_end":67}}]},{"kind":"Mod","id":{"krate":0,"index":410},"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":7180,"byte_end":7183,"line_start":167,"line_end":167,"column_start":9,"column_end":12},"name":"sys","qualname":"::sys","value":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","parent":null,"children":[{"krate":0,"index":411},{"krate":0,"index":412},{"krate":0,"index":413},{"krate":0,"index":414}],"decl_id":null,"docs":" C-associated types","sig":null,"attributes":[{"value":"cfg(feature = \"native_lib\")","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":6998,"byte_end":7028,"line_start":162,"line_end":162,"column_start":1,"column_end":31}},{"value":"/ C-associated types","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":7029,"byte_end":7051,"line_start":163,"line_end":163,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":7052,"byte_end":7055,"line_start":164,"line_end":164,"column_start":1,"column_end":4}},{"value":"/ Required for plugging wayland-scanner generated protocols","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":7056,"byte_end":7117,"line_start":165,"line_end":165,"column_start":1,"column_end":62}},{"value":"/ or interfacing with C code using wayland objects.","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":7118,"byte_end":7171,"line_start":166,"line_end":166,"column_start":1,"column_end":54}}]},{"kind":"Mod","id":{"krate":0,"index":415},"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":7362,"byte_end":7370,"line_start":173,"line_end":173,"column_start":9,"column_end":17},"name":"protocol","qualname":"::protocol","value":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","parent":null,"children":[{"krate":0,"index":416}],"decl_id":null,"docs":" Generated interfaces for the core wayland protocol\n","sig":null,"attributes":[{"value":"/ Generated interfaces for the core wayland protocol","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":7299,"byte_end":7353,"line_start":172,"line_end":172,"column_start":1,"column_end":55}}]},{"kind":"Mod","id":{"krate":0,"index":418},"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":7762,"byte_end":7774,"line_start":186,"line_end":186,"column_start":13,"column_end":25},"name":"c_interfaces","qualname":"::generated::c_interfaces","value":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","parent":null,"children":[{"krate":0,"index":473},{"krate":0,"index":474},{"krate":0,"index":475},{"krate":0,"index":476},{"krate":0,"index":477},{"krate":0,"index":478},{"krate":0,"index":480},{"krate":0,"index":482},{"krate":0,"index":484},{"krate":0,"index":486},{"krate":0,"index":488},{"krate":0,"index":489},{"krate":0,"index":491},{"krate":0,"index":493},{"krate":0,"index":494},{"krate":0,"index":496},{"krate":0,"index":497},{"krate":0,"index":499},{"krate":0,"index":501},{"krate":0,"index":503},{"krate":0,"index":504},{"krate":0,"index":506},{"krate":0,"index":508},{"krate":0,"index":509},{"krate":0,"index":511},{"krate":0,"index":513},{"krate":0,"index":515},{"krate":0,"index":516},{"krate":0,"index":518},{"krate":0,"index":520},{"krate":0,"index":521},{"krate":0,"index":523},{"krate":0,"index":525},{"krate":0,"index":526},{"krate":0,"index":528},{"krate":0,"index":530},{"krate":0,"index":531},{"krate":0,"index":533},{"krate":0,"index":535},{"krate":0,"index":537},{"krate":0,"index":539},{"krate":0,"index":541},{"krate":0,"index":543},{"krate":0,"index":545},{"krate":0,"index":546},{"krate":0,"index":548},{"krate":0,"index":550},{"krate":0,"index":552},{"krate":0,"index":553},{"krate":0,"index":555},{"krate":0,"index":557},{"krate":0,"index":558},{"krate":0,"index":560},{"krate":0,"index":562},{"krate":0,"index":564},{"krate":0,"index":566},{"krate":0,"index":568},{"krate":0,"index":570},{"krate":0,"index":572},{"krate":0,"index":574},{"krate":0,"index":575},{"krate":0,"index":577},{"krate":0,"index":579},{"krate":0,"index":581},{"krate":0,"index":583},{"krate":0,"index":585},{"krate":0,"index":587},{"krate":0,"index":589},{"krate":0,"index":591},{"krate":0,"index":592},{"krate":0,"index":594},{"krate":0,"index":596},{"krate":0,"index":598},{"krate":0,"index":600},{"krate":0,"index":602},{"krate":0,"index":603},{"krate":0,"index":605},{"krate":0,"index":607},{"krate":0,"index":609},{"krate":0,"index":611},{"krate":0,"index":613},{"krate":0,"index":614},{"krate":0,"index":616},{"krate":0,"index":618},{"krate":0,"index":620},{"krate":0,"index":622},{"krate":0,"index":623},{"krate":0,"index":625},{"krate":0,"index":627},{"krate":0,"index":629},{"krate":0,"index":630},{"krate":0,"index":632},{"krate":0,"index":634},{"krate":0,"index":635},{"krate":0,"index":637},{"krate":0,"index":638},{"krate":0,"index":640},{"krate":0,"index":642},{"krate":0,"index":643},{"krate":0,"index":645},{"krate":0,"index":647},{"krate":0,"index":649}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(feature = \"native_lib\")","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":7719,"byte_end":7749,"line_start":185,"line_end":185,"column_start":5,"column_end":35}}]},{"kind":"Static","id":{"krate":0,"index":484},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_interfaces.rs","byte_start":8307120,"byte_end":8307139,"line_start":18,"line_end":18,"column_start":16,"column_end":35},"name":"wl_display_requests","qualname":"::generated::c_interfaces::wl_display_requests","value":"[wl_message; ]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Static","id":{"krate":0,"index":486},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_interfaces.rs","byte_start":8307609,"byte_end":8307626,"line_start":30,"line_end":30,"column_start":16,"column_end":33},"name":"wl_display_events","qualname":"::generated::c_interfaces::wl_display_events","value":"[wl_message; ]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Static","id":{"krate":0,"index":488},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_interfaces.rs","byte_start":8308048,"byte_end":8308068,"line_start":42,"line_end":42,"column_start":16,"column_end":36},"name":"wl_display_interface","qualname":"::generated::c_interfaces::wl_display_interface","value":"wl_interface","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Static","id":{"krate":0,"index":489},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_interfaces.rs","byte_start":8308347,"byte_end":8308367,"line_start":50,"line_end":50,"column_start":16,"column_end":36},"name":"wl_registry_requests","qualname":"::generated::c_interfaces::wl_registry_requests","value":"[wl_message; ]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Static","id":{"krate":0,"index":491},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_interfaces.rs","byte_start":8308574,"byte_end":8308592,"line_start":55,"line_end":55,"column_start":16,"column_end":34},"name":"wl_registry_events","qualname":"::generated::c_interfaces::wl_registry_events","value":"[wl_message; ]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Static","id":{"krate":0,"index":493},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_interfaces.rs","byte_start":8309019,"byte_end":8309040,"line_start":67,"line_end":67,"column_start":16,"column_end":37},"name":"wl_registry_interface","qualname":"::generated::c_interfaces::wl_registry_interface","value":"wl_interface","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Static","id":{"krate":0,"index":494},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_interfaces.rs","byte_start":8309322,"byte_end":8309340,"line_start":75,"line_end":75,"column_start":16,"column_end":34},"name":"wl_callback_events","qualname":"::generated::c_interfaces::wl_callback_events","value":"[wl_message; ]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Static","id":{"krate":0,"index":496},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_interfaces.rs","byte_start":8309544,"byte_end":8309565,"line_start":80,"line_end":80,"column_start":16,"column_end":37},"name":"wl_callback_interface","qualname":"::generated::c_interfaces::wl_callback_interface","value":"wl_interface","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Static","id":{"krate":0,"index":501},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_interfaces.rs","byte_start":8310121,"byte_end":8310143,"line_start":92,"line_end":92,"column_start":16,"column_end":38},"name":"wl_compositor_requests","qualname":"::generated::c_interfaces::wl_compositor_requests","value":"[wl_message; ]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Static","id":{"krate":0,"index":503},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_interfaces.rs","byte_start":8310641,"byte_end":8310664,"line_start":104,"line_end":104,"column_start":16,"column_end":39},"name":"wl_compositor_interface","qualname":"::generated::c_interfaces::wl_compositor_interface","value":"wl_interface","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Static","id":{"krate":0,"index":506},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_interfaces.rs","byte_start":8311261,"byte_end":8311281,"line_start":120,"line_end":120,"column_start":16,"column_end":36},"name":"wl_shm_pool_requests","qualname":"::generated::c_interfaces::wl_shm_pool_requests","value":"[wl_message; ]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Static","id":{"krate":0,"index":508},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_interfaces.rs","byte_start":8311930,"byte_end":8311951,"line_start":137,"line_end":137,"column_start":16,"column_end":37},"name":"wl_shm_pool_interface","qualname":"::generated::c_interfaces::wl_shm_pool_interface","value":"wl_interface","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Static","id":{"krate":0,"index":511},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_interfaces.rs","byte_start":8312431,"byte_end":8312446,"line_start":150,"line_end":150,"column_start":16,"column_end":31},"name":"wl_shm_requests","qualname":"::generated::c_interfaces::wl_shm_requests","value":"[wl_message; ]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Static","id":{"krate":0,"index":513},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_interfaces.rs","byte_start":8312682,"byte_end":8312695,"line_start":155,"line_end":155,"column_start":16,"column_end":29},"name":"wl_shm_events","qualname":"::generated::c_interfaces::wl_shm_events","value":"[wl_message; ]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Static","id":{"krate":0,"index":515},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_interfaces.rs","byte_start":8312901,"byte_end":8312917,"line_start":160,"line_end":160,"column_start":16,"column_end":32},"name":"wl_shm_interface","qualname":"::generated::c_interfaces::wl_shm_interface","value":"wl_interface","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Static","id":{"krate":0,"index":516},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_interfaces.rs","byte_start":8313184,"byte_end":8313202,"line_start":168,"line_end":168,"column_start":16,"column_end":34},"name":"wl_buffer_requests","qualname":"::generated::c_interfaces::wl_buffer_requests","value":"[wl_message; ]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Static","id":{"krate":0,"index":518},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_interfaces.rs","byte_start":8313408,"byte_end":8313424,"line_start":173,"line_end":173,"column_start":16,"column_end":32},"name":"wl_buffer_events","qualname":"::generated::c_interfaces::wl_buffer_events","value":"[wl_message; ]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Static","id":{"krate":0,"index":520},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_interfaces.rs","byte_start":8313630,"byte_end":8313649,"line_start":178,"line_end":178,"column_start":16,"column_end":35},"name":"wl_buffer_interface","qualname":"::generated::c_interfaces::wl_buffer_interface","value":"wl_interface","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Static","id":{"krate":0,"index":521},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_interfaces.rs","byte_start":8313925,"byte_end":8313947,"line_start":186,"line_end":186,"column_start":16,"column_end":38},"name":"wl_data_offer_requests","qualname":"::generated::c_interfaces::wl_data_offer_requests","value":"[wl_message; ]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Static","id":{"krate":0,"index":523},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_interfaces.rs","byte_start":8314943,"byte_end":8314963,"line_start":213,"line_end":213,"column_start":16,"column_end":36},"name":"wl_data_offer_events","qualname":"::generated::c_interfaces::wl_data_offer_events","value":"[wl_message; ]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Static","id":{"krate":0,"index":525},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_interfaces.rs","byte_start":8315579,"byte_end":8315602,"line_start":230,"line_end":230,"column_start":16,"column_end":39},"name":"wl_data_offer_interface","qualname":"::generated::c_interfaces::wl_data_offer_interface","value":"wl_interface","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Static","id":{"krate":0,"index":526},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_interfaces.rs","byte_start":8315890,"byte_end":8315913,"line_start":238,"line_end":238,"column_start":16,"column_end":39},"name":"wl_data_source_requests","qualname":"::generated::c_interfaces::wl_data_source_requests","value":"[wl_message; ]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Static","id":{"krate":0,"index":528},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_interfaces.rs","byte_start":8316525,"byte_end":8316546,"line_start":255,"line_end":255,"column_start":16,"column_end":37},"name":"wl_data_source_events","qualname":"::generated::c_interfaces::wl_data_source_events","value":"[wl_message; ]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Static","id":{"krate":0,"index":530},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_interfaces.rs","byte_start":8317741,"byte_end":8317765,"line_start":287,"line_end":287,"column_start":16,"column_end":40},"name":"wl_data_source_interface","qualname":"::generated::c_interfaces::wl_data_source_interface","value":"wl_interface","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Static","id":{"krate":0,"index":535},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_interfaces.rs","byte_start":8318553,"byte_end":8318576,"line_start":305,"line_end":305,"column_start":16,"column_end":39},"name":"wl_data_device_requests","qualname":"::generated::c_interfaces::wl_data_device_requests","value":"[wl_message; ]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Static","id":{"krate":0,"index":543},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_interfaces.rs","byte_start":8319863,"byte_end":8319884,"line_start":333,"line_end":333,"column_start":16,"column_end":37},"name":"wl_data_device_events","qualname":"::generated::c_interfaces::wl_data_device_events","value":"[wl_message; ]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Static","id":{"krate":0,"index":545},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_interfaces.rs","byte_start":8321145,"byte_end":8321169,"line_start":365,"line_end":365,"column_start":16,"column_end":40},"name":"wl_data_device_interface","qualname":"::generated::c_interfaces::wl_data_device_interface","value":"wl_interface","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Static","id":{"krate":0,"index":550},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_interfaces.rs","byte_start":8321844,"byte_end":8321875,"line_start":379,"line_end":379,"column_start":16,"column_end":47},"name":"wl_data_device_manager_requests","qualname":"::generated::c_interfaces::wl_data_device_manager_requests","value":"[wl_message; ]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Static","id":{"krate":0,"index":552},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_interfaces.rs","byte_start":8322404,"byte_end":8322436,"line_start":391,"line_end":391,"column_start":16,"column_end":48},"name":"wl_data_device_manager_interface","qualname":"::generated::c_interfaces::wl_data_device_manager_interface","value":"wl_interface","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Static","id":{"krate":0,"index":555},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_interfaces.rs","byte_start":8322940,"byte_end":8322957,"line_start":403,"line_end":403,"column_start":16,"column_end":33},"name":"wl_shell_requests","qualname":"::generated::c_interfaces::wl_shell_requests","value":"[wl_message; ]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Static","id":{"krate":0,"index":557},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_interfaces.rs","byte_start":8323206,"byte_end":8323224,"line_start":408,"line_end":408,"column_start":16,"column_end":34},"name":"wl_shell_interface","qualname":"::generated::c_interfaces::wl_shell_interface","value":"wl_interface","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Static","id":{"krate":0,"index":570},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_interfaces.rs","byte_start":8324852,"byte_end":8324877,"line_start":446,"line_end":446,"column_start":16,"column_end":41},"name":"wl_shell_surface_requests","qualname":"::generated::c_interfaces::wl_shell_surface_requests","value":"[wl_message; ]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Static","id":{"krate":0,"index":572},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_interfaces.rs","byte_start":8327046,"byte_end":8327069,"line_start":498,"line_end":498,"column_start":16,"column_end":39},"name":"wl_shell_surface_events","qualname":"::generated::c_interfaces::wl_shell_surface_events","value":"[wl_message; ]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Static","id":{"krate":0,"index":574},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_interfaces.rs","byte_start":8327682,"byte_end":8327708,"line_start":515,"line_end":515,"column_start":16,"column_end":42},"name":"wl_shell_surface_interface","qualname":"::generated::c_interfaces::wl_shell_surface_interface","value":"wl_interface","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Static","id":{"krate":0,"index":583},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_interfaces.rs","byte_start":8328639,"byte_end":8328658,"line_start":534,"line_end":534,"column_start":16,"column_end":35},"name":"wl_surface_requests","qualname":"::generated::c_interfaces::wl_surface_requests","value":"[wl_message; ]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Static","id":{"krate":0,"index":589},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_interfaces.rs","byte_start":8331023,"byte_end":8331040,"line_start":590,"line_end":590,"column_start":16,"column_end":33},"name":"wl_surface_events","qualname":"::generated::c_interfaces::wl_surface_events","value":"[wl_message; ]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Static","id":{"krate":0,"index":591},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_interfaces.rs","byte_start":8331494,"byte_end":8331514,"line_start":602,"line_end":602,"column_start":16,"column_end":36},"name":"wl_surface_interface","qualname":"::generated::c_interfaces::wl_surface_interface","value":"wl_interface","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Static","id":{"krate":0,"index":598},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_interfaces.rs","byte_start":8332203,"byte_end":8332219,"line_start":616,"line_end":616,"column_start":16,"column_end":32},"name":"wl_seat_requests","qualname":"::generated::c_interfaces::wl_seat_requests","value":"[wl_message; ]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Static","id":{"krate":0,"index":600},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_interfaces.rs","byte_start":8333101,"byte_end":8333115,"line_start":638,"line_end":638,"column_start":16,"column_end":30},"name":"wl_seat_events","qualname":"::generated::c_interfaces::wl_seat_events","value":"[wl_message; ]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Static","id":{"krate":0,"index":602},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_interfaces.rs","byte_start":8333538,"byte_end":8333555,"line_start":650,"line_end":650,"column_start":16,"column_end":33},"name":"wl_seat_interface","qualname":"::generated::c_interfaces::wl_seat_interface","value":"wl_interface","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Static","id":{"krate":0,"index":605},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_interfaces.rs","byte_start":8334075,"byte_end":8334094,"line_start":664,"line_end":664,"column_start":16,"column_end":35},"name":"wl_pointer_requests","qualname":"::generated::c_interfaces::wl_pointer_requests","value":"[wl_message; ]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Static","id":{"krate":0,"index":611},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_interfaces.rs","byte_start":8334966,"byte_end":8334983,"line_start":686,"line_end":686,"column_start":16,"column_end":33},"name":"wl_pointer_events","qualname":"::generated::c_interfaces::wl_pointer_events","value":"[wl_message; ]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Static","id":{"krate":0,"index":613},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_interfaces.rs","byte_start":8336788,"byte_end":8336808,"line_start":733,"line_end":733,"column_start":16,"column_end":36},"name":"wl_pointer_interface","qualname":"::generated::c_interfaces::wl_pointer_interface","value":"wl_interface","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Static","id":{"krate":0,"index":614},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_interfaces.rs","byte_start":8337087,"byte_end":8337107,"line_start":741,"line_end":741,"column_start":16,"column_end":36},"name":"wl_keyboard_requests","qualname":"::generated::c_interfaces::wl_keyboard_requests","value":"[wl_message; ]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Static","id":{"krate":0,"index":620},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_interfaces.rs","byte_start":8337699,"byte_end":8337717,"line_start":755,"line_end":755,"column_start":16,"column_end":34},"name":"wl_keyboard_events","qualname":"::generated::c_interfaces::wl_keyboard_events","value":"[wl_message; ]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Static","id":{"krate":0,"index":622},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_interfaces.rs","byte_start":8338948,"byte_end":8338969,"line_start":787,"line_end":787,"column_start":16,"column_end":37},"name":"wl_keyboard_interface","qualname":"::generated::c_interfaces::wl_keyboard_interface","value":"wl_interface","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Static","id":{"krate":0,"index":623},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_interfaces.rs","byte_start":8339251,"byte_end":8339268,"line_start":795,"line_end":795,"column_start":16,"column_end":33},"name":"wl_touch_requests","qualname":"::generated::c_interfaces::wl_touch_requests","value":"[wl_message; ]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Static","id":{"krate":0,"index":627},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_interfaces.rs","byte_start":8339787,"byte_end":8339802,"line_start":808,"line_end":808,"column_start":16,"column_end":31},"name":"wl_touch_events","qualname":"::generated::c_interfaces::wl_touch_events","value":"[wl_message; ]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Static","id":{"krate":0,"index":629},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_interfaces.rs","byte_start":8340804,"byte_end":8340822,"line_start":835,"line_end":835,"column_start":16,"column_end":34},"name":"wl_touch_interface","qualname":"::generated::c_interfaces::wl_touch_interface","value":"wl_interface","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Static","id":{"krate":0,"index":630},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_interfaces.rs","byte_start":8341095,"byte_end":8341113,"line_start":843,"line_end":843,"column_start":16,"column_end":34},"name":"wl_output_requests","qualname":"::generated::c_interfaces::wl_output_requests","value":"[wl_message; ]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Static","id":{"krate":0,"index":632},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_interfaces.rs","byte_start":8341320,"byte_end":8341336,"line_start":848,"line_end":848,"column_start":16,"column_end":32},"name":"wl_output_events","qualname":"::generated::c_interfaces::wl_output_events","value":"[wl_message; ]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Static","id":{"krate":0,"index":634},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_interfaces.rs","byte_start":8342140,"byte_end":8342159,"line_start":870,"line_end":870,"column_start":16,"column_end":35},"name":"wl_output_interface","qualname":"::generated::c_interfaces::wl_output_interface","value":"wl_interface","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Static","id":{"krate":0,"index":635},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_interfaces.rs","byte_start":8342435,"byte_end":8342453,"line_start":878,"line_end":878,"column_start":16,"column_end":34},"name":"wl_region_requests","qualname":"::generated::c_interfaces::wl_region_requests","value":"[wl_message; ]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Static","id":{"krate":0,"index":637},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_interfaces.rs","byte_start":8343065,"byte_end":8343084,"line_start":895,"line_end":895,"column_start":16,"column_end":35},"name":"wl_region_interface","qualname":"::generated::c_interfaces::wl_region_interface","value":"wl_interface","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Static","id":{"krate":0,"index":640},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_interfaces.rs","byte_start":8343625,"byte_end":8343650,"line_start":908,"line_end":908,"column_start":16,"column_end":41},"name":"wl_subcompositor_requests","qualname":"::generated::c_interfaces::wl_subcompositor_requests","value":"[wl_message; ]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Static","id":{"krate":0,"index":642},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_interfaces.rs","byte_start":8344114,"byte_end":8344140,"line_start":920,"line_end":920,"column_start":16,"column_end":42},"name":"wl_subcompositor_interface","qualname":"::generated::c_interfaces::wl_subcompositor_interface","value":"wl_interface","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Static","id":{"krate":0,"index":647},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_interfaces.rs","byte_start":8344704,"byte_end":8344726,"line_start":932,"line_end":932,"column_start":16,"column_end":38},"name":"wl_subsurface_requests","qualname":"::generated::c_interfaces::wl_subsurface_requests","value":"[wl_message; ]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Static","id":{"krate":0,"index":649},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_interfaces.rs","byte_start":8345981,"byte_end":8346004,"line_start":964,"line_end":964,"column_start":16,"column_end":39},"name":"wl_subsurface_interface","qualname":"::generated::c_interfaces::wl_subsurface_interface","value":"wl_interface","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":650},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8346417,"byte_end":8346427,"line_start":2,"line_end":2,"column_start":9,"column_end":19},"name":"wl_display","qualname":"::generated::c_api::wl_display","value":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","parent":null,"children":[{"krate":0,"index":651},{"krate":0,"index":652},{"krate":0,"index":653},{"krate":0,"index":654},{"krate":0,"index":655},{"krate":0,"index":656},{"krate":0,"index":657},{"krate":0,"index":3890},{"krate":0,"index":658},{"krate":0,"index":659},{"krate":0,"index":660},{"krate":0,"index":661},{"krate":0,"index":662},{"krate":0,"index":663},{"krate":0,"index":664},{"krate":0,"index":665},{"krate":0,"index":666},{"krate":0,"index":667},{"krate":0,"index":2666},{"krate":0,"index":2683},{"krate":0,"index":2681},{"krate":0,"index":2679},{"krate":0,"index":2676},{"krate":0,"index":2677},{"krate":0,"index":668},{"krate":0,"index":671},{"krate":0,"index":676},{"krate":0,"index":691},{"krate":0,"index":698},{"krate":0,"index":712},{"krate":0,"index":714},{"krate":0,"index":720},{"krate":0,"index":725},{"krate":0,"index":730},{"krate":0,"index":731},{"krate":0,"index":732},{"krate":0,"index":733}],"decl_id":null,"docs":"core global object","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2667},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8346952,"byte_end":8346965,"line_start":14,"line_end":14,"column_start":9,"column_end":22},"name":"InvalidObject","qualname":"::generated::c_api::wl_display::Error::InvalidObject","value":"Error::InvalidObject","parent":{"krate":0,"index":2666},"children":[],"decl_id":null,"docs":"server couldn't find object\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2670},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8347046,"byte_end":8347059,"line_start":16,"line_end":16,"column_start":9,"column_end":22},"name":"InvalidMethod","qualname":"::generated::c_api::wl_display::Error::InvalidMethod","value":"Error::InvalidMethod","parent":{"krate":0,"index":2666},"children":[],"decl_id":null,"docs":"method doesn't exist on the specified interface\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2673},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8347116,"byte_end":8347124,"line_start":18,"line_end":18,"column_start":9,"column_end":17},"name":"NoMemory","qualname":"::generated::c_api::wl_display::Error::NoMemory","value":"Error::NoMemory","parent":{"krate":0,"index":2666},"children":[],"decl_id":null,"docs":"server is out of memory\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2666},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8346889,"byte_end":8346894,"line_start":12,"line_end":12,"column_start":14,"column_end":19},"name":"Error","qualname":"::generated::c_api::wl_display::Error","value":"pub enum Error {\n\n    #[doc = \"server couldn't find object\"]\n    InvalidObject = ,\n\n    #[doc = \"method doesn't exist on the specified interface\"]\n    InvalidMethod = ,\n\n    #[doc = \"server is out of memory\"]\n    NoMemory = ,\n}","parent":null,"children":[{"krate":0,"index":2667},{"krate":0,"index":2670},{"krate":0,"index":2673}],"decl_id":null,"docs":"global error values","sig":null,"attributes":[{"value":"repr(u32)","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8346818,"byte_end":8346830,"line_start":10,"line_end":10,"column_start":5,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":669},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8347168,"byte_end":8347176,"line_start":21,"line_end":21,"column_start":16,"column_end":24},"name":"from_raw","qualname":"<Error>::from_raw","value":"pub fn from_raw(u32) -> Option<Error>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":670},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8347442,"byte_end":8347448,"line_start":29,"line_end":29,"column_start":16,"column_end":22},"name":"to_raw","qualname":"<Error>::to_raw","value":"pub fn to_raw(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":672},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8348096,"byte_end":8348100,"line_start":35,"line_end":35,"column_start":9,"column_end":13},"name":"Sync","qualname":"::generated::c_api::wl_display::Request::Sync","value":"Request::Sync { callback }","parent":{"krate":0,"index":671},"children":[],"decl_id":null,"docs":"asynchronous roundtrip","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":674},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8348363,"byte_end":8348374,"line_start":39,"line_end":39,"column_start":9,"column_end":20},"name":"GetRegistry","qualname":"::generated::c_api::wl_display::Request::GetRegistry","value":"Request::GetRegistry { registry }","parent":{"krate":0,"index":671},"children":[],"decl_id":null,"docs":"get global registry object","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":671},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8347519,"byte_end":8347526,"line_start":33,"line_end":33,"column_start":14,"column_end":21},"name":"Request","qualname":"::generated::c_api::wl_display::Request","value":"pub enum Request {\n\n    #[doc =\n      \"asynchronous roundtrip\\n\\nThe sync request asks the server to emit the 'done' event\\non the returned wl_callback object.  Since requests are\\nhandled in-order and events are delivered in-order, this can\\nbe used as a barrier to ensure all previous requests and the\\nresulting events have been handled.\\n\\nThe object returned by this request will be destroyed by the\\ncompositor after the callback is fired and as such the client must not\\nattempt to use it after that point.\\n\\nThe callback_data passed in the callback is the event serial.\"]\n    Sync {\n        callback: Proxy<super::wl_callback::WlCallback>,\n    },\n\n    #[doc =\n      \"get global registry object\\n\\nThis request creates a registry object that allows the client\\nto list and bind the global objects available from the\\ncompositor.\"]\n    GetRegistry {\n        registry: Proxy<super::wl_registry::WlRegistry>,\n    },\n}","parent":null,"children":[{"krate":0,"index":672},{"krate":0,"index":674}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":692},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8351947,"byte_end":8351952,"line_start":129,"line_end":129,"column_start":9,"column_end":14},"name":"Error","qualname":"::generated::c_api::wl_display::Event::Error","value":"Event::Error { object_id, code, message }","parent":{"krate":0,"index":691},"children":[],"decl_id":null,"docs":"fatal error event","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":696},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8352403,"byte_end":8352411,"line_start":135,"line_end":135,"column_start":9,"column_end":17},"name":"DeleteId","qualname":"::generated::c_api::wl_display::Event::DeleteId","value":"Event::DeleteId { id }","parent":{"krate":0,"index":691},"children":[],"decl_id":null,"docs":"acknowledge object ID deletion","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":691},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8351479,"byte_end":8351484,"line_start":127,"line_end":127,"column_start":14,"column_end":19},"name":"Event","qualname":"::generated::c_api::wl_display::Event","value":"pub enum Event {\n\n    #[doc =\n      \"fatal error event\\n\\nThe error event is sent out when a fatal (non-recoverable)\\nerror has occurred.  The object_id argument is the object\\nwhere the error occurred, most often in response to a request\\nto that object.  The code identifies the error and is defined\\nby the object interface.  As such, each interface defines its\\nown set of error codes.  The message is a brief description\\nof the error, for (debugging) convenience.\"]\n    Error {\n        object_id: Proxy<AnonymousObject>,\n        code: u32,\n        message: String,\n    },\n\n    #[doc =\n      \"acknowledge object ID deletion\\n\\nThis event is used internally by the object ID management\\nlogic.  When a client deletes an object, the server will send\\nthis event to acknowledge that it has seen the delete request.\\nWhen the client receives this event, it will know that it can\\nsafely reuse the object ID.\"]\n    DeleteId {\n        id: u32,\n    },\n}","parent":null,"children":[{"krate":0,"index":692},{"krate":0,"index":696}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":712},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8356693,"byte_end":8356702,"line_start":254,"line_end":254,"column_start":16,"column_end":25},"name":"WlDisplay","qualname":"::generated::c_api::wl_display::WlDisplay","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":720},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8357033,"byte_end":8357046,"line_start":264,"line_end":264,"column_start":15,"column_end":28},"name":"RequestsTrait","qualname":"::generated::c_api::wl_display::RequestsTrait","value":"RequestsTrait","parent":null,"children":[{"krate":0,"index":721},{"krate":0,"index":723}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":721},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8357619,"byte_end":8357623,"line_start":266,"line_end":266,"column_start":12,"column_end":16},"name":"sync","qualname":"::generated::c_api::wl_display::RequestsTrait::sync","value":"pub fn sync<F>(&Self, F) -> Result<Proxy<super::wl_callback::WlCallback>, ()>\nwhere F: FnOnce(NewProxy<super::wl_callback::WlCallback>) ->\nProxy<super::wl_callback::WlCallback>","parent":{"krate":0,"index":720},"children":[],"decl_id":null,"docs":"asynchronous roundtrip","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":723},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8358045,"byte_end":8358057,"line_start":272,"line_end":272,"column_start":12,"column_end":24},"name":"get_registry","qualname":"::generated::c_api::wl_display::RequestsTrait::get_registry","value":"pub fn get_registry<F>(&Self, F)\n-> Result<Proxy<super::wl_registry::WlRegistry>, ()> where\nF: FnOnce(NewProxy<super::wl_registry::WlRegistry>) ->\nProxy<super::wl_registry::WlRegistry>","parent":{"krate":0,"index":720},"children":[],"decl_id":null,"docs":"get global registry object","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":730},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8359371,"byte_end":8359385,"line_start":309,"line_end":309,"column_start":15,"column_end":29},"name":"REQ_SYNC_SINCE","qualname":"::generated::c_api::wl_display::REQ_SYNC_SINCE","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" The minimal object version supporting this request\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":731},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8359481,"byte_end":8359503,"line_start":311,"line_end":311,"column_start":15,"column_end":37},"name":"REQ_GET_REGISTRY_SINCE","qualname":"::generated::c_api::wl_display::REQ_GET_REGISTRY_SINCE","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" The minimal object version supporting this request\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":732},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8359597,"byte_end":8359612,"line_start":313,"line_end":313,"column_start":15,"column_end":30},"name":"EVT_ERROR_SINCE","qualname":"::generated::c_api::wl_display::EVT_ERROR_SINCE","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" The minimal object version supporting this event\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":733},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8359706,"byte_end":8359725,"line_start":315,"line_end":315,"column_start":15,"column_end":34},"name":"EVT_DELETE_ID_SINCE","qualname":"::generated::c_api::wl_display::EVT_DELETE_ID_SINCE","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" The minimal object version supporting this event\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":734},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8360759,"byte_end":8360770,"line_start":318,"line_end":318,"column_start":9,"column_end":20},"name":"wl_registry","qualname":"::generated::c_api::wl_registry","value":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","parent":null,"children":[{"krate":0,"index":735},{"krate":0,"index":736},{"krate":0,"index":737},{"krate":0,"index":738},{"krate":0,"index":739},{"krate":0,"index":740},{"krate":0,"index":741},{"krate":0,"index":3918},{"krate":0,"index":742},{"krate":0,"index":743},{"krate":0,"index":744},{"krate":0,"index":745},{"krate":0,"index":746},{"krate":0,"index":747},{"krate":0,"index":748},{"krate":0,"index":749},{"krate":0,"index":750},{"krate":0,"index":751},{"krate":0,"index":752},{"krate":0,"index":756},{"krate":0,"index":770},{"krate":0,"index":777},{"krate":0,"index":791},{"krate":0,"index":793},{"krate":0,"index":799},{"krate":0,"index":803},{"krate":0,"index":807},{"krate":0,"index":808},{"krate":0,"index":809}],"decl_id":null,"docs":"global registry object","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":753},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8361217,"byte_end":8361221,"line_start":327,"line_end":327,"column_start":9,"column_end":13},"name":"Bind","qualname":"::generated::c_api::wl_registry::Request::Bind","value":"Request::Bind { name, id }","parent":{"krate":0,"index":752},"children":[],"decl_id":null,"docs":"bind an object to the display","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":752},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8361053,"byte_end":8361060,"line_start":325,"line_end":325,"column_start":14,"column_end":21},"name":"Request","qualname":"::generated::c_api::wl_registry::Request","value":"pub enum Request {\n\n    #[doc =\n      \"bind an object to the display\\n\\nBinds a new, client-created object to the server using the\\nspecified name as the identifier.\"]\n    Bind {\n        name: u32,\n        id: (String, u32, Proxy<AnonymousObject>),\n    },\n}","parent":null,"children":[{"krate":0,"index":753}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":771},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8364045,"byte_end":8364051,"line_start":403,"line_end":403,"column_start":9,"column_end":15},"name":"Global","qualname":"::generated::c_api::wl_registry::Event::Global","value":"Event::Global { name, interface, version }","parent":{"krate":0,"index":770},"children":[],"decl_id":null,"docs":"announce global object","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":775},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8364638,"byte_end":8364650,"line_start":409,"line_end":409,"column_start":9,"column_end":21},"name":"GlobalRemove","qualname":"::generated::c_api::wl_registry::Event::GlobalRemove","value":"Event::GlobalRemove { name }","parent":{"krate":0,"index":770},"children":[],"decl_id":null,"docs":"announce removal of global object","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":770},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8363793,"byte_end":8363798,"line_start":401,"line_end":401,"column_start":14,"column_end":19},"name":"Event","qualname":"::generated::c_api::wl_registry::Event","value":"pub enum Event {\n\n    #[doc =\n      \"announce global object\\n\\nNotify the client of global objects.\\n\\nThe event notifies the client that a global object with\\nthe given name is now available, and it implements the\\ngiven version of the given interface.\"]\n    Global {\n        name: u32,\n        interface: String,\n        version: u32,\n    },\n\n    #[doc =\n      \"announce removal of global object\\n\\nNotify the client of removed global objects.\\n\\nThis event notifies the client that the global identified\\nby name is no longer available.  If the client bound to\\nthe global using the bind request, the client should now\\ndestroy that object.\\n\\nThe object remains valid and requests to the object will be\\nignored until the client destroys it, to avoid races between\\nthe global going away and a client sending a request to it.\"]\n    GlobalRemove {\n        name: u32,\n    },\n}","parent":null,"children":[{"krate":0,"index":771},{"krate":0,"index":775}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":791},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8368886,"byte_end":8368896,"line_start":528,"line_end":528,"column_start":16,"column_end":26},"name":"WlRegistry","qualname":"::generated::c_api::wl_registry::WlRegistry","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":799},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8369230,"byte_end":8369243,"line_start":538,"line_end":538,"column_start":15,"column_end":28},"name":"RequestsTrait","qualname":"::generated::c_api::wl_registry::RequestsTrait","value":"RequestsTrait","parent":null,"children":[{"krate":0,"index":800}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":800},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8369403,"byte_end":8369407,"line_start":540,"line_end":540,"column_start":12,"column_end":16},"name":"bind","qualname":"::generated::c_api::wl_registry::RequestsTrait::bind","value":"pub fn bind<T: Interface, F>(&Self, u32, u32, F) -> Result<Proxy<T>, ()> where\nF: FnOnce(NewProxy<T>) -> Proxy<T>","parent":{"krate":0,"index":799},"children":[],"decl_id":null,"docs":"bind an object to the display","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":807},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8370226,"byte_end":8370240,"line_start":567,"line_end":567,"column_start":15,"column_end":29},"name":"REQ_BIND_SINCE","qualname":"::generated::c_api::wl_registry::REQ_BIND_SINCE","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" The minimal object version supporting this request\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":808},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8370334,"byte_end":8370350,"line_start":569,"line_end":569,"column_start":15,"column_end":31},"name":"EVT_GLOBAL_SINCE","qualname":"::generated::c_api::wl_registry::EVT_GLOBAL_SINCE","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" The minimal object version supporting this event\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":809},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8370444,"byte_end":8370467,"line_start":571,"line_end":571,"column_start":15,"column_end":38},"name":"EVT_GLOBAL_REMOVE_SINCE","qualname":"::generated::c_api::wl_registry::EVT_GLOBAL_REMOVE_SINCE","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" The minimal object version supporting this event\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":810},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8370608,"byte_end":8370619,"line_start":574,"line_end":574,"column_start":9,"column_end":20},"name":"wl_callback","qualname":"::generated::c_api::wl_callback","value":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","parent":null,"children":[{"krate":0,"index":811},{"krate":0,"index":812},{"krate":0,"index":813},{"krate":0,"index":814},{"krate":0,"index":815},{"krate":0,"index":816},{"krate":0,"index":817},{"krate":0,"index":3946},{"krate":0,"index":818},{"krate":0,"index":819},{"krate":0,"index":820},{"krate":0,"index":821},{"krate":0,"index":822},{"krate":0,"index":823},{"krate":0,"index":824},{"krate":0,"index":825},{"krate":0,"index":826},{"krate":0,"index":827},{"krate":0,"index":828},{"krate":0,"index":829},{"krate":0,"index":842},{"krate":0,"index":845},{"krate":0,"index":858},{"krate":0,"index":860},{"krate":0,"index":866},{"krate":0,"index":867},{"krate":0,"index":868}],"decl_id":null,"docs":"callback object","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":828},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8370902,"byte_end":8370909,"line_start":581,"line_end":581,"column_start":14,"column_end":21},"name":"Request","qualname":"::generated::c_api::wl_callback::Request","value":"pub enum Request { }","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":843},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8372292,"byte_end":8372296,"line_start":622,"line_end":622,"column_start":9,"column_end":13},"name":"Done","qualname":"::generated::c_api::wl_callback::Event::Done","value":"Event::Done { callback_data }","parent":{"krate":0,"index":842},"children":[],"decl_id":null,"docs":"done event","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":842},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8372113,"byte_end":8372118,"line_start":620,"line_end":620,"column_start":14,"column_end":19},"name":"Event","qualname":"::generated::c_api::wl_callback::Event","value":"pub enum Event {\n\n    #[doc =\n      \"done event\\n\\nNotify the client when the related request is done.\\n\\nThis is a destructor, once received this object cannot be used any longer.\"]\n    Done {\n        callback_data: u32,\n    },\n}","parent":null,"children":[{"krate":0,"index":843}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":858},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8374542,"byte_end":8374552,"line_start":692,"line_end":692,"column_start":16,"column_end":26},"name":"WlCallback","qualname":"::generated::c_api::wl_callback::WlCallback","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":866},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8374886,"byte_end":8374899,"line_start":702,"line_end":702,"column_start":15,"column_end":28},"name":"RequestsTrait","qualname":"::generated::c_api::wl_callback::RequestsTrait","value":"RequestsTrait","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":868},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8375031,"byte_end":8375045,"line_start":705,"line_end":705,"column_start":15,"column_end":29},"name":"EVT_DONE_SINCE","qualname":"::generated::c_api::wl_callback::EVT_DONE_SINCE","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" The minimal object version supporting this event\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":869},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8375265,"byte_end":8375278,"line_start":708,"line_end":708,"column_start":9,"column_end":22},"name":"wl_compositor","qualname":"::generated::c_api::wl_compositor","value":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","parent":null,"children":[{"krate":0,"index":870},{"krate":0,"index":871},{"krate":0,"index":872},{"krate":0,"index":873},{"krate":0,"index":874},{"krate":0,"index":875},{"krate":0,"index":876},{"krate":0,"index":3974},{"krate":0,"index":877},{"krate":0,"index":878},{"krate":0,"index":879},{"krate":0,"index":880},{"krate":0,"index":881},{"krate":0,"index":882},{"krate":0,"index":883},{"krate":0,"index":884},{"krate":0,"index":885},{"krate":0,"index":886},{"krate":0,"index":887},{"krate":0,"index":892},{"krate":0,"index":907},{"krate":0,"index":908},{"krate":0,"index":921},{"krate":0,"index":923},{"krate":0,"index":929},{"krate":0,"index":934},{"krate":0,"index":939},{"krate":0,"index":940}],"decl_id":null,"docs":"the compositor singleton","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":888},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8375664,"byte_end":8375677,"line_start":717,"line_end":717,"column_start":9,"column_end":22},"name":"CreateSurface","qualname":"::generated::c_api::wl_compositor::Request::CreateSurface","value":"Request::CreateSurface { id }","parent":{"krate":0,"index":887},"children":[],"decl_id":null,"docs":"create new surface","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":890},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8375835,"byte_end":8375847,"line_start":721,"line_end":721,"column_start":9,"column_end":21},"name":"CreateRegion","qualname":"::generated::c_api::wl_compositor::Request::CreateRegion","value":"Request::CreateRegion { id }","parent":{"krate":0,"index":887},"children":[],"decl_id":null,"docs":"create new region","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":887},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8375561,"byte_end":8375568,"line_start":715,"line_end":715,"column_start":14,"column_end":21},"name":"Request","qualname":"::generated::c_api::wl_compositor::Request","value":"pub enum Request {\n\n    #[doc =\n      \"create new surface\\n\\nAsk the compositor to create a new surface.\"]\n    CreateSurface {\n        id: Proxy<super::wl_surface::WlSurface>,\n    },\n\n    #[doc = \"create new region\\n\\nAsk the compositor to create a new region.\"]\n    CreateRegion {\n        id: Proxy<super::wl_region::WlRegion>,\n    },\n}","parent":null,"children":[{"krate":0,"index":888},{"krate":0,"index":890}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":907},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8378929,"byte_end":8378934,"line_start":809,"line_end":809,"column_start":14,"column_end":19},"name":"Event","qualname":"::generated::c_api::wl_compositor::Event","value":"pub enum Event { }","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":921},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8380234,"byte_end":8380246,"line_start":852,"line_end":852,"column_start":16,"column_end":28},"name":"WlCompositor","qualname":"::generated::c_api::wl_compositor::WlCompositor","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":929},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8380586,"byte_end":8380599,"line_start":862,"line_end":862,"column_start":15,"column_end":28},"name":"RequestsTrait","qualname":"::generated::c_api::wl_compositor::RequestsTrait","value":"RequestsTrait","parent":null,"children":[{"krate":0,"index":930},{"krate":0,"index":932}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":930},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8380698,"byte_end":8380712,"line_start":864,"line_end":864,"column_start":12,"column_end":26},"name":"create_surface","qualname":"::generated::c_api::wl_compositor::RequestsTrait::create_surface","value":"pub fn create_surface<F>(&Self, F)\n-> Result<Proxy<super::wl_surface::WlSurface>, ()> where\nF: FnOnce(NewProxy<super::wl_surface::WlSurface>) ->\nProxy<super::wl_surface::WlSurface>","parent":{"krate":0,"index":929},"children":[],"decl_id":null,"docs":"create new surface","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":932},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8381066,"byte_end":8381079,"line_start":873,"line_end":873,"column_start":12,"column_end":25},"name":"create_region","qualname":"::generated::c_api::wl_compositor::RequestsTrait::create_region","value":"pub fn create_region<F>(&Self, F)\n-> Result<Proxy<super::wl_region::WlRegion>, ()> where\nF: FnOnce(NewProxy<super::wl_region::WlRegion>) ->\nProxy<super::wl_region::WlRegion>","parent":{"krate":0,"index":929},"children":[],"decl_id":null,"docs":"create new region","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":939},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8382278,"byte_end":8382302,"line_start":903,"line_end":903,"column_start":15,"column_end":39},"name":"REQ_CREATE_SURFACE_SINCE","qualname":"::generated::c_api::wl_compositor::REQ_CREATE_SURFACE_SINCE","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" The minimal object version supporting this request\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":940},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8382398,"byte_end":8382421,"line_start":905,"line_end":905,"column_start":15,"column_end":38},"name":"REQ_CREATE_REGION_SINCE","qualname":"::generated::c_api::wl_compositor::REQ_CREATE_REGION_SINCE","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" The minimal object version supporting this request\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":941},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8382895,"byte_end":8382906,"line_start":908,"line_end":908,"column_start":9,"column_end":20},"name":"wl_shm_pool","qualname":"::generated::c_api::wl_shm_pool","value":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","parent":null,"children":[{"krate":0,"index":942},{"krate":0,"index":943},{"krate":0,"index":944},{"krate":0,"index":945},{"krate":0,"index":946},{"krate":0,"index":947},{"krate":0,"index":948},{"krate":0,"index":4002},{"krate":0,"index":949},{"krate":0,"index":950},{"krate":0,"index":951},{"krate":0,"index":952},{"krate":0,"index":953},{"krate":0,"index":954},{"krate":0,"index":955},{"krate":0,"index":956},{"krate":0,"index":957},{"krate":0,"index":958},{"krate":0,"index":959},{"krate":0,"index":971},{"krate":0,"index":987},{"krate":0,"index":988},{"krate":0,"index":1001},{"krate":0,"index":1003},{"krate":0,"index":1009},{"krate":0,"index":1014},{"krate":0,"index":1019},{"krate":0,"index":1020},{"krate":0,"index":1021}],"decl_id":null,"docs":"a shared memory pool","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":960},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8383769,"byte_end":8383781,"line_start":917,"line_end":917,"column_start":9,"column_end":21},"name":"CreateBuffer","qualname":"::generated::c_api::wl_shm_pool::Request::CreateBuffer","value":"Request::CreateBuffer { id, offset, width, height, stride, format }","parent":{"krate":0,"index":959},"children":[],"decl_id":null,"docs":"create a buffer from the pool","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":967},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8384247,"byte_end":8384254,"line_start":926,"line_end":926,"column_start":9,"column_end":16},"name":"Destroy","qualname":"::generated::c_api::wl_shm_pool::Request::Destroy","value":"Request::Destroy","parent":{"krate":0,"index":959},"children":[],"decl_id":null,"docs":"destroy the pool","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":969},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8384540,"byte_end":8384546,"line_start":928,"line_end":928,"column_start":9,"column_end":15},"name":"Resize","qualname":"::generated::c_api::wl_shm_pool::Request::Resize","value":"Request::Resize { size }","parent":{"krate":0,"index":959},"children":[],"decl_id":null,"docs":"change the size of the pool mapping","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":959},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8383189,"byte_end":8383196,"line_start":915,"line_end":915,"column_start":14,"column_end":21},"name":"Request","qualname":"::generated::c_api::wl_shm_pool::Request","value":"pub enum Request {\n\n    #[doc =\n      \"create a buffer from the pool\\n\\nCreate a wl_buffer object from the pool.\\n\\nThe buffer is created offset bytes into the pool and has\\nwidth and height as specified.  The stride argument specifies\\nthe number of bytes from the beginning of one row to the beginning\\nof the next.  The format is the pixel format of the buffer and\\nmust be one of those advertised through the wl_shm.format event.\\n\\nA buffer will keep a reference to the pool it was created from\\nso it is valid to destroy the pool immediately after creating\\na buffer from it.\"]\n    CreateBuffer {\n        id: Proxy<super::wl_buffer::WlBuffer>,\n        offset: i32,\n        width: i32,\n        height: i32,\n        stride: i32,\n        format: super::wl_shm::Format,\n    },\n\n    #[doc =\n      \"destroy the pool\\n\\nDestroy the shared memory pool.\\n\\nThe mmapped memory will be released when all\\nbuffers that have been created from this pool\\nare gone.\\n\\nThis is a destructor, once sent this object cannot be used any longer.\"]\n    Destroy,\n\n    #[doc =\n      \"change the size of the pool mapping\\n\\nThis request will cause the server to remap the backing memory\\nfor the pool from the file descriptor passed when the pool was\\ncreated, but using the new size.  This request can only be\\nused to make the pool bigger.\"]\n    Resize {\n        size: i32,\n    },\n}","parent":null,"children":[{"krate":0,"index":960},{"krate":0,"index":967},{"krate":0,"index":969}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":987},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8389106,"byte_end":8389111,"line_start":1059,"line_end":1059,"column_start":14,"column_end":19},"name":"Event","qualname":"::generated::c_api::wl_shm_pool::Event","value":"pub enum Event { }","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1001},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8390411,"byte_end":8390420,"line_start":1102,"line_end":1102,"column_start":16,"column_end":25},"name":"WlShmPool","qualname":"::generated::c_api::wl_shm_pool::WlShmPool","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1009},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8390753,"byte_end":8390766,"line_start":1112,"line_end":1112,"column_start":15,"column_end":28},"name":"RequestsTrait","qualname":"::generated::c_api::wl_shm_pool::RequestsTrait","value":"RequestsTrait","parent":null,"children":[{"krate":0,"index":1010},{"krate":0,"index":1012},{"krate":0,"index":1013}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1010},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8391342,"byte_end":8391355,"line_start":1114,"line_end":1114,"column_start":12,"column_end":25},"name":"create_buffer","qualname":"::generated::c_api::wl_shm_pool::RequestsTrait::create_buffer","value":"pub fn create_buffer<F>(&Self, i32, i32, i32, i32, super::wl_shm::Format, F)\n-> Result<Proxy<super::wl_buffer::WlBuffer>, ()> where\nF: FnOnce(NewProxy<super::wl_buffer::WlBuffer>) ->\nProxy<super::wl_buffer::WlBuffer>","parent":{"krate":0,"index":1009},"children":[],"decl_id":null,"docs":"create a buffer from the pool","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1012},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8392012,"byte_end":8392019,"line_start":1126,"line_end":1126,"column_start":12,"column_end":19},"name":"destroy","qualname":"::generated::c_api::wl_shm_pool::RequestsTrait::destroy","value":"pub fn destroy(&Self) -> ()","parent":{"krate":0,"index":1009},"children":[],"decl_id":null,"docs":"destroy the pool","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1013},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8392321,"byte_end":8392327,"line_start":1128,"line_end":1128,"column_start":12,"column_end":18},"name":"resize","qualname":"::generated::c_api::wl_shm_pool::RequestsTrait::resize","value":"pub fn resize(&Self, i32) -> ()","parent":{"krate":0,"index":1009},"children":[],"decl_id":null,"docs":"change the size of the pool mapping","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1019},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8393473,"byte_end":8393496,"line_start":1163,"line_end":1163,"column_start":15,"column_end":38},"name":"REQ_CREATE_BUFFER_SINCE","qualname":"::generated::c_api::wl_shm_pool::REQ_CREATE_BUFFER_SINCE","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" The minimal object version supporting this request\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1020},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8393592,"byte_end":8393609,"line_start":1165,"line_end":1165,"column_start":15,"column_end":32},"name":"REQ_DESTROY_SINCE","qualname":"::generated::c_api::wl_shm_pool::REQ_DESTROY_SINCE","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" The minimal object version supporting this request\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1021},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8393705,"byte_end":8393721,"line_start":1167,"line_end":1167,"column_start":15,"column_end":31},"name":"REQ_RESIZE_SINCE","qualname":"::generated::c_api::wl_shm_pool::REQ_RESIZE_SINCE","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" The minimal object version supporting this request\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1022},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8394082,"byte_end":8394088,"line_start":1170,"line_end":1170,"column_start":9,"column_end":15},"name":"wl_shm","qualname":"::generated::c_api::wl_shm","value":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","parent":null,"children":[{"krate":0,"index":1023},{"krate":0,"index":1024},{"krate":0,"index":1025},{"krate":0,"index":1026},{"krate":0,"index":1027},{"krate":0,"index":1028},{"krate":0,"index":1029},{"krate":0,"index":4030},{"krate":0,"index":1030},{"krate":0,"index":1031},{"krate":0,"index":1032},{"krate":0,"index":1033},{"krate":0,"index":1034},{"krate":0,"index":1035},{"krate":0,"index":1036},{"krate":0,"index":1037},{"krate":0,"index":1038},{"krate":0,"index":1039},{"krate":0,"index":2684},{"krate":0,"index":2701},{"krate":0,"index":2699},{"krate":0,"index":2697},{"krate":0,"index":2694},{"krate":0,"index":2695},{"krate":0,"index":1040},{"krate":0,"index":2702},{"krate":0,"index":2884},{"krate":0,"index":2882},{"krate":0,"index":2880},{"krate":0,"index":2877},{"krate":0,"index":2878},{"krate":0,"index":1043},{"krate":0,"index":1046},{"krate":0,"index":1051},{"krate":0,"index":1065},{"krate":0,"index":1068},{"krate":0,"index":1081},{"krate":0,"index":1083},{"krate":0,"index":1089},{"krate":0,"index":1092},{"krate":0,"index":1095},{"krate":0,"index":1096}],"decl_id":null,"docs":"shared memory support","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2685},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8394593,"byte_end":8394606,"line_start":1182,"line_end":1182,"column_start":9,"column_end":22},"name":"InvalidFormat","qualname":"::generated::c_api::wl_shm::Error::InvalidFormat","value":"Error::InvalidFormat","parent":{"krate":0,"index":2684},"children":[],"decl_id":null,"docs":"buffer format is not known\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2688},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8394693,"byte_end":8394706,"line_start":1184,"line_end":1184,"column_start":9,"column_end":22},"name":"InvalidStride","qualname":"::generated::c_api::wl_shm::Error::InvalidStride","value":"Error::InvalidStride","parent":{"krate":0,"index":2684},"children":[],"decl_id":null,"docs":"invalid size or stride during pool or buffer creation\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2691},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8394775,"byte_end":8394784,"line_start":1186,"line_end":1186,"column_start":9,"column_end":18},"name":"InvalidFd","qualname":"::generated::c_api::wl_shm::Error::InvalidFd","value":"Error::InvalidFd","parent":{"krate":0,"index":2684},"children":[],"decl_id":null,"docs":"mmapping the file descriptor failed\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2684},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8394531,"byte_end":8394536,"line_start":1180,"line_end":1180,"column_start":14,"column_end":19},"name":"Error","qualname":"::generated::c_api::wl_shm::Error","value":"pub enum Error {\n\n    #[doc = \"buffer format is not known\"]\n    InvalidFormat = ,\n\n    #[doc = \"invalid size or stride during pool or buffer creation\"]\n    InvalidStride = ,\n\n    #[doc = \"mmapping the file descriptor failed\"]\n    InvalidFd = ,\n}","parent":null,"children":[{"krate":0,"index":2685},{"krate":0,"index":2688},{"krate":0,"index":2691}],"decl_id":null,"docs":"wl_shm error values","sig":null,"attributes":[{"value":"repr(u32)","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8394460,"byte_end":8394472,"line_start":1178,"line_end":1178,"column_start":5,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":1041},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8394828,"byte_end":8394836,"line_start":1189,"line_end":1189,"column_start":16,"column_end":24},"name":"from_raw","qualname":"<Error>::from_raw","value":"pub fn from_raw(u32) -> Option<Error>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1042},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8395103,"byte_end":8395109,"line_start":1197,"line_end":1197,"column_start":16,"column_end":22},"name":"to_raw","qualname":"<Error>::to_raw","value":"pub fn to_raw(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2703},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8395724,"byte_end":8395732,"line_start":1206,"line_end":1206,"column_start":9,"column_end":17},"name":"Argb8888","qualname":"::generated::c_api::wl_shm::Format::Argb8888","value":"Format::Argb8888","parent":{"krate":0,"index":2702},"children":[],"decl_id":null,"docs":"32-bit ARGB format, [31:0] A:R:G:B 8:8:8:8 little endian\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2706},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8395821,"byte_end":8395829,"line_start":1208,"line_end":1208,"column_start":9,"column_end":17},"name":"Xrgb8888","qualname":"::generated::c_api::wl_shm::Format::Xrgb8888","value":"Format::Xrgb8888","parent":{"krate":0,"index":2702},"children":[],"decl_id":null,"docs":"32-bit RGB format, [31:0] x:R:G:B 8:8:8:8 little endian\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2709},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8395896,"byte_end":8395898,"line_start":1210,"line_end":1210,"column_start":9,"column_end":11},"name":"C8","qualname":"::generated::c_api::wl_shm::Format::C8","value":"Format::C8","parent":{"krate":0,"index":2702},"children":[],"decl_id":null,"docs":"8-bit color index format, [7:0] C\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2712},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8395975,"byte_end":8395981,"line_start":1212,"line_end":1212,"column_start":9,"column_end":15},"name":"Rgb332","qualname":"::generated::c_api::wl_shm::Format::Rgb332","value":"Format::Rgb332","parent":{"krate":0,"index":2702},"children":[],"decl_id":null,"docs":"8-bit RGB format, [7:0] R:G:B 3:3:2\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2715},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8396058,"byte_end":8396064,"line_start":1214,"line_end":1214,"column_start":9,"column_end":15},"name":"Bgr233","qualname":"::generated::c_api::wl_shm::Format::Bgr233","value":"Format::Bgr233","parent":{"krate":0,"index":2702},"children":[],"decl_id":null,"docs":"8-bit BGR format, [7:0] B:G:R 2:3:3\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2718},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8396162,"byte_end":8396170,"line_start":1216,"line_end":1216,"column_start":9,"column_end":17},"name":"Xrgb4444","qualname":"::generated::c_api::wl_shm::Format::Xrgb4444","value":"Format::Xrgb4444","parent":{"krate":0,"index":2702},"children":[],"decl_id":null,"docs":"16-bit xRGB format, [15:0] x:R:G:B 4:4:4:4 little endian\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2721},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8396268,"byte_end":8396276,"line_start":1218,"line_end":1218,"column_start":9,"column_end":17},"name":"Xbgr4444","qualname":"::generated::c_api::wl_shm::Format::Xbgr4444","value":"Format::Xbgr4444","parent":{"krate":0,"index":2702},"children":[],"decl_id":null,"docs":"16-bit xBGR format, [15:0] x:B:G:R 4:4:4:4 little endian\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2724},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8396374,"byte_end":8396382,"line_start":1220,"line_end":1220,"column_start":9,"column_end":17},"name":"Rgbx4444","qualname":"::generated::c_api::wl_shm::Format::Rgbx4444","value":"Format::Rgbx4444","parent":{"krate":0,"index":2702},"children":[],"decl_id":null,"docs":"16-bit RGBx format, [15:0] R:G:B:x 4:4:4:4 little endian\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2727},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8396480,"byte_end":8396488,"line_start":1222,"line_end":1222,"column_start":9,"column_end":17},"name":"Bgrx4444","qualname":"::generated::c_api::wl_shm::Format::Bgrx4444","value":"Format::Bgrx4444","parent":{"krate":0,"index":2702},"children":[],"decl_id":null,"docs":"16-bit BGRx format, [15:0] B:G:R:x 4:4:4:4 little endian\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2730},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8396586,"byte_end":8396594,"line_start":1224,"line_end":1224,"column_start":9,"column_end":17},"name":"Argb4444","qualname":"::generated::c_api::wl_shm::Format::Argb4444","value":"Format::Argb4444","parent":{"krate":0,"index":2702},"children":[],"decl_id":null,"docs":"16-bit ARGB format, [15:0] A:R:G:B 4:4:4:4 little endian\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2733},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8396692,"byte_end":8396700,"line_start":1226,"line_end":1226,"column_start":9,"column_end":17},"name":"Abgr4444","qualname":"::generated::c_api::wl_shm::Format::Abgr4444","value":"Format::Abgr4444","parent":{"krate":0,"index":2702},"children":[],"decl_id":null,"docs":"16-bit ABGR format, [15:0] A:B:G:R 4:4:4:4 little endian\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2736},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8396798,"byte_end":8396806,"line_start":1228,"line_end":1228,"column_start":9,"column_end":17},"name":"Rgba4444","qualname":"::generated::c_api::wl_shm::Format::Rgba4444","value":"Format::Rgba4444","parent":{"krate":0,"index":2702},"children":[],"decl_id":null,"docs":"16-bit RBGA format, [15:0] R:G:B:A 4:4:4:4 little endian\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2739},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8396904,"byte_end":8396912,"line_start":1230,"line_end":1230,"column_start":9,"column_end":17},"name":"Bgra4444","qualname":"::generated::c_api::wl_shm::Format::Bgra4444","value":"Format::Bgra4444","parent":{"krate":0,"index":2702},"children":[],"decl_id":null,"docs":"16-bit BGRA format, [15:0] B:G:R:A 4:4:4:4 little endian\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2742},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8397010,"byte_end":8397018,"line_start":1232,"line_end":1232,"column_start":9,"column_end":17},"name":"Xrgb1555","qualname":"::generated::c_api::wl_shm::Format::Xrgb1555","value":"Format::Xrgb1555","parent":{"krate":0,"index":2702},"children":[],"decl_id":null,"docs":"16-bit xRGB format, [15:0] x:R:G:B 1:5:5:5 little endian\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2745},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8397121,"byte_end":8397129,"line_start":1234,"line_end":1234,"column_start":9,"column_end":17},"name":"Xbgr1555","qualname":"::generated::c_api::wl_shm::Format::Xbgr1555","value":"Format::Xbgr1555","parent":{"krate":0,"index":2702},"children":[],"decl_id":null,"docs":"16-bit xBGR 1555 format, [15:0] x:B:G:R 1:5:5:5 little endian\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2748},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8397232,"byte_end":8397240,"line_start":1236,"line_end":1236,"column_start":9,"column_end":17},"name":"Rgbx5551","qualname":"::generated::c_api::wl_shm::Format::Rgbx5551","value":"Format::Rgbx5551","parent":{"krate":0,"index":2702},"children":[],"decl_id":null,"docs":"16-bit RGBx 5551 format, [15:0] R:G:B:x 5:5:5:1 little endian\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2751},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8397343,"byte_end":8397351,"line_start":1238,"line_end":1238,"column_start":9,"column_end":17},"name":"Bgrx5551","qualname":"::generated::c_api::wl_shm::Format::Bgrx5551","value":"Format::Bgrx5551","parent":{"krate":0,"index":2702},"children":[],"decl_id":null,"docs":"16-bit BGRx 5551 format, [15:0] B:G:R:x 5:5:5:1 little endian\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2754},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8397454,"byte_end":8397462,"line_start":1240,"line_end":1240,"column_start":9,"column_end":17},"name":"Argb1555","qualname":"::generated::c_api::wl_shm::Format::Argb1555","value":"Format::Argb1555","parent":{"krate":0,"index":2702},"children":[],"decl_id":null,"docs":"16-bit ARGB 1555 format, [15:0] A:R:G:B 1:5:5:5 little endian\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2757},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8397565,"byte_end":8397573,"line_start":1242,"line_end":1242,"column_start":9,"column_end":17},"name":"Abgr1555","qualname":"::generated::c_api::wl_shm::Format::Abgr1555","value":"Format::Abgr1555","parent":{"krate":0,"index":2702},"children":[],"decl_id":null,"docs":"16-bit ABGR 1555 format, [15:0] A:B:G:R 1:5:5:5 little endian\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2760},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8397676,"byte_end":8397684,"line_start":1244,"line_end":1244,"column_start":9,"column_end":17},"name":"Rgba5551","qualname":"::generated::c_api::wl_shm::Format::Rgba5551","value":"Format::Rgba5551","parent":{"krate":0,"index":2702},"children":[],"decl_id":null,"docs":"16-bit RGBA 5551 format, [15:0] R:G:B:A 5:5:5:1 little endian\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2763},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8397787,"byte_end":8397795,"line_start":1246,"line_end":1246,"column_start":9,"column_end":17},"name":"Bgra5551","qualname":"::generated::c_api::wl_shm::Format::Bgra5551","value":"Format::Bgra5551","parent":{"krate":0,"index":2702},"children":[],"decl_id":null,"docs":"16-bit BGRA 5551 format, [15:0] B:G:R:A 5:5:5:1 little endian\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2766},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8397892,"byte_end":8397898,"line_start":1248,"line_end":1248,"column_start":9,"column_end":15},"name":"Rgb565","qualname":"::generated::c_api::wl_shm::Format::Rgb565","value":"Format::Rgb565","parent":{"krate":0,"index":2702},"children":[],"decl_id":null,"docs":"16-bit RGB 565 format, [15:0] R:G:B 5:6:5 little endian\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2769},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8397995,"byte_end":8398001,"line_start":1250,"line_end":1250,"column_start":9,"column_end":15},"name":"Bgr565","qualname":"::generated::c_api::wl_shm::Format::Bgr565","value":"Format::Bgr565","parent":{"krate":0,"index":2702},"children":[],"decl_id":null,"docs":"16-bit BGR 565 format, [15:0] B:G:R 5:6:5 little endian\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2772},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8398088,"byte_end":8398094,"line_start":1252,"line_end":1252,"column_start":9,"column_end":15},"name":"Rgb888","qualname":"::generated::c_api::wl_shm::Format::Rgb888","value":"Format::Rgb888","parent":{"krate":0,"index":2702},"children":[],"decl_id":null,"docs":"24-bit RGB format, [23:0] R:G:B little endian\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2775},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8398181,"byte_end":8398187,"line_start":1254,"line_end":1254,"column_start":9,"column_end":15},"name":"Bgr888","qualname":"::generated::c_api::wl_shm::Format::Bgr888","value":"Format::Bgr888","parent":{"krate":0,"index":2702},"children":[],"decl_id":null,"docs":"24-bit BGR format, [23:0] B:G:R little endian\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2778},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8398285,"byte_end":8398293,"line_start":1256,"line_end":1256,"column_start":9,"column_end":17},"name":"Xbgr8888","qualname":"::generated::c_api::wl_shm::Format::Xbgr8888","value":"Format::Xbgr8888","parent":{"krate":0,"index":2702},"children":[],"decl_id":null,"docs":"32-bit xBGR format, [31:0] x:B:G:R 8:8:8:8 little endian\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2781},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8398391,"byte_end":8398399,"line_start":1258,"line_end":1258,"column_start":9,"column_end":17},"name":"Rgbx8888","qualname":"::generated::c_api::wl_shm::Format::Rgbx8888","value":"Format::Rgbx8888","parent":{"krate":0,"index":2702},"children":[],"decl_id":null,"docs":"32-bit RGBx format, [31:0] R:G:B:x 8:8:8:8 little endian\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2784},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8398497,"byte_end":8398505,"line_start":1260,"line_end":1260,"column_start":9,"column_end":17},"name":"Bgrx8888","qualname":"::generated::c_api::wl_shm::Format::Bgrx8888","value":"Format::Bgrx8888","parent":{"krate":0,"index":2702},"children":[],"decl_id":null,"docs":"32-bit BGRx format, [31:0] B:G:R:x 8:8:8:8 little endian\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2787},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8398603,"byte_end":8398611,"line_start":1262,"line_end":1262,"column_start":9,"column_end":17},"name":"Abgr8888","qualname":"::generated::c_api::wl_shm::Format::Abgr8888","value":"Format::Abgr8888","parent":{"krate":0,"index":2702},"children":[],"decl_id":null,"docs":"32-bit ABGR format, [31:0] A:B:G:R 8:8:8:8 little endian\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2790},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8398709,"byte_end":8398717,"line_start":1264,"line_end":1264,"column_start":9,"column_end":17},"name":"Rgba8888","qualname":"::generated::c_api::wl_shm::Format::Rgba8888","value":"Format::Rgba8888","parent":{"krate":0,"index":2702},"children":[],"decl_id":null,"docs":"32-bit RGBA format, [31:0] R:G:B:A 8:8:8:8 little endian\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2793},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8398815,"byte_end":8398823,"line_start":1266,"line_end":1266,"column_start":9,"column_end":17},"name":"Bgra8888","qualname":"::generated::c_api::wl_shm::Format::Bgra8888","value":"Format::Bgra8888","parent":{"krate":0,"index":2702},"children":[],"decl_id":null,"docs":"32-bit BGRA format, [31:0] B:G:R:A 8:8:8:8 little endian\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2796},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8398924,"byte_end":8398935,"line_start":1268,"line_end":1268,"column_start":9,"column_end":20},"name":"Xrgb2101010","qualname":"::generated::c_api::wl_shm::Format::Xrgb2101010","value":"Format::Xrgb2101010","parent":{"krate":0,"index":2702},"children":[],"decl_id":null,"docs":"32-bit xRGB format, [31:0] x:R:G:B 2:10:10:10 little endian\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2799},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8399036,"byte_end":8399047,"line_start":1270,"line_end":1270,"column_start":9,"column_end":20},"name":"Xbgr2101010","qualname":"::generated::c_api::wl_shm::Format::Xbgr2101010","value":"Format::Xbgr2101010","parent":{"krate":0,"index":2702},"children":[],"decl_id":null,"docs":"32-bit xBGR format, [31:0] x:B:G:R 2:10:10:10 little endian\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2802},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8399148,"byte_end":8399159,"line_start":1272,"line_end":1272,"column_start":9,"column_end":20},"name":"Rgbx1010102","qualname":"::generated::c_api::wl_shm::Format::Rgbx1010102","value":"Format::Rgbx1010102","parent":{"krate":0,"index":2702},"children":[],"decl_id":null,"docs":"32-bit RGBx format, [31:0] R:G:B:x 10:10:10:2 little endian\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2805},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8399260,"byte_end":8399271,"line_start":1274,"line_end":1274,"column_start":9,"column_end":20},"name":"Bgrx1010102","qualname":"::generated::c_api::wl_shm::Format::Bgrx1010102","value":"Format::Bgrx1010102","parent":{"krate":0,"index":2702},"children":[],"decl_id":null,"docs":"32-bit BGRx format, [31:0] B:G:R:x 10:10:10:2 little endian\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2808},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8399372,"byte_end":8399383,"line_start":1276,"line_end":1276,"column_start":9,"column_end":20},"name":"Argb2101010","qualname":"::generated::c_api::wl_shm::Format::Argb2101010","value":"Format::Argb2101010","parent":{"krate":0,"index":2702},"children":[],"decl_id":null,"docs":"32-bit ARGB format, [31:0] A:R:G:B 2:10:10:10 little endian\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2811},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8399484,"byte_end":8399495,"line_start":1278,"line_end":1278,"column_start":9,"column_end":20},"name":"Abgr2101010","qualname":"::generated::c_api::wl_shm::Format::Abgr2101010","value":"Format::Abgr2101010","parent":{"krate":0,"index":2702},"children":[],"decl_id":null,"docs":"32-bit ABGR format, [31:0] A:B:G:R 2:10:10:10 little endian\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2814},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8399596,"byte_end":8399607,"line_start":1280,"line_end":1280,"column_start":9,"column_end":20},"name":"Rgba1010102","qualname":"::generated::c_api::wl_shm::Format::Rgba1010102","value":"Format::Rgba1010102","parent":{"krate":0,"index":2702},"children":[],"decl_id":null,"docs":"32-bit RGBA format, [31:0] R:G:B:A 10:10:10:2 little endian\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2817},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8399708,"byte_end":8399719,"line_start":1282,"line_end":1282,"column_start":9,"column_end":20},"name":"Bgra1010102","qualname":"::generated::c_api::wl_shm::Format::Bgra1010102","value":"Format::Bgra1010102","parent":{"krate":0,"index":2702},"children":[],"decl_id":null,"docs":"32-bit BGRA format, [31:0] B:G:R:A 10:10:10:2 little endian\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2820},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8399824,"byte_end":8399828,"line_start":1284,"line_end":1284,"column_start":9,"column_end":13},"name":"Yuyv","qualname":"::generated::c_api::wl_shm::Format::Yuyv","value":"Format::Yuyv","parent":{"krate":0,"index":2702},"children":[],"decl_id":null,"docs":"packed YCbCr format, [31:0] Cr0:Y1:Cb0:Y0 8:8:8:8 little endian\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2823},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8399934,"byte_end":8399938,"line_start":1286,"line_end":1286,"column_start":9,"column_end":13},"name":"Yvyu","qualname":"::generated::c_api::wl_shm::Format::Yvyu","value":"Format::Yvyu","parent":{"krate":0,"index":2702},"children":[],"decl_id":null,"docs":"packed YCbCr format, [31:0] Cb0:Y1:Cr0:Y0 8:8:8:8 little endian\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2826},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8400044,"byte_end":8400048,"line_start":1288,"line_end":1288,"column_start":9,"column_end":13},"name":"Uyvy","qualname":"::generated::c_api::wl_shm::Format::Uyvy","value":"Format::Uyvy","parent":{"krate":0,"index":2702},"children":[],"decl_id":null,"docs":"packed YCbCr format, [31:0] Y1:Cr0:Y0:Cb0 8:8:8:8 little endian\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2829},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8400154,"byte_end":8400158,"line_start":1290,"line_end":1290,"column_start":9,"column_end":13},"name":"Vyuy","qualname":"::generated::c_api::wl_shm::Format::Vyuy","value":"Format::Vyuy","parent":{"krate":0,"index":2702},"children":[],"decl_id":null,"docs":"packed YCbCr format, [31:0] Y1:Cb0:Y0:Cr0 8:8:8:8 little endian\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2832},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8400261,"byte_end":8400265,"line_start":1292,"line_end":1292,"column_start":9,"column_end":13},"name":"Ayuv","qualname":"::generated::c_api::wl_shm::Format::Ayuv","value":"Format::Ayuv","parent":{"krate":0,"index":2702},"children":[],"decl_id":null,"docs":"packed AYCbCr format, [31:0] A:Y:Cb:Cr 8:8:8:8 little endian\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2835},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8400362,"byte_end":8400366,"line_start":1294,"line_end":1294,"column_start":9,"column_end":13},"name":"Nv12","qualname":"::generated::c_api::wl_shm::Format::Nv12","value":"Format::Nv12","parent":{"krate":0,"index":2702},"children":[],"decl_id":null,"docs":"2 plane YCbCr Cr:Cb format, 2x2 subsampled Cr:Cb plane\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2838},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8400462,"byte_end":8400466,"line_start":1296,"line_end":1296,"column_start":9,"column_end":13},"name":"Nv21","qualname":"::generated::c_api::wl_shm::Format::Nv21","value":"Format::Nv21","parent":{"krate":0,"index":2702},"children":[],"decl_id":null,"docs":"2 plane YCbCr Cb:Cr format, 2x2 subsampled Cb:Cr plane\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2841},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8400562,"byte_end":8400566,"line_start":1298,"line_end":1298,"column_start":9,"column_end":13},"name":"Nv16","qualname":"::generated::c_api::wl_shm::Format::Nv16","value":"Format::Nv16","parent":{"krate":0,"index":2702},"children":[],"decl_id":null,"docs":"2 plane YCbCr Cr:Cb format, 2x1 subsampled Cr:Cb plane\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2844},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8400662,"byte_end":8400666,"line_start":1300,"line_end":1300,"column_start":9,"column_end":13},"name":"Nv61","qualname":"::generated::c_api::wl_shm::Format::Nv61","value":"Format::Nv61","parent":{"krate":0,"index":2702},"children":[],"decl_id":null,"docs":"2 plane YCbCr Cb:Cr format, 2x1 subsampled Cb:Cr plane\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2847},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8400769,"byte_end":8400775,"line_start":1302,"line_end":1302,"column_start":9,"column_end":15},"name":"Yuv410","qualname":"::generated::c_api::wl_shm::Format::Yuv410","value":"Format::Yuv410","parent":{"krate":0,"index":2702},"children":[],"decl_id":null,"docs":"3 plane YCbCr format, 4x4 subsampled Cb (1) and Cr (2) planes\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2850},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8400878,"byte_end":8400884,"line_start":1304,"line_end":1304,"column_start":9,"column_end":15},"name":"Yvu410","qualname":"::generated::c_api::wl_shm::Format::Yvu410","value":"Format::Yvu410","parent":{"krate":0,"index":2702},"children":[],"decl_id":null,"docs":"3 plane YCbCr format, 4x4 subsampled Cr (1) and Cb (2) planes\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2853},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8400987,"byte_end":8400993,"line_start":1306,"line_end":1306,"column_start":9,"column_end":15},"name":"Yuv411","qualname":"::generated::c_api::wl_shm::Format::Yuv411","value":"Format::Yuv411","parent":{"krate":0,"index":2702},"children":[],"decl_id":null,"docs":"3 plane YCbCr format, 4x1 subsampled Cb (1) and Cr (2) planes\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2856},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8401096,"byte_end":8401102,"line_start":1308,"line_end":1308,"column_start":9,"column_end":15},"name":"Yvu411","qualname":"::generated::c_api::wl_shm::Format::Yvu411","value":"Format::Yvu411","parent":{"krate":0,"index":2702},"children":[],"decl_id":null,"docs":"3 plane YCbCr format, 4x1 subsampled Cr (1) and Cb (2) planes\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2859},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8401205,"byte_end":8401211,"line_start":1310,"line_end":1310,"column_start":9,"column_end":15},"name":"Yuv420","qualname":"::generated::c_api::wl_shm::Format::Yuv420","value":"Format::Yuv420","parent":{"krate":0,"index":2702},"children":[],"decl_id":null,"docs":"3 plane YCbCr format, 2x2 subsampled Cb (1) and Cr (2) planes\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2862},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8401314,"byte_end":8401320,"line_start":1312,"line_end":1312,"column_start":9,"column_end":15},"name":"Yvu420","qualname":"::generated::c_api::wl_shm::Format::Yvu420","value":"Format::Yvu420","parent":{"krate":0,"index":2702},"children":[],"decl_id":null,"docs":"3 plane YCbCr format, 2x2 subsampled Cr (1) and Cb (2) planes\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2865},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8401423,"byte_end":8401429,"line_start":1314,"line_end":1314,"column_start":9,"column_end":15},"name":"Yuv422","qualname":"::generated::c_api::wl_shm::Format::Yuv422","value":"Format::Yuv422","parent":{"krate":0,"index":2702},"children":[],"decl_id":null,"docs":"3 plane YCbCr format, 2x1 subsampled Cb (1) and Cr (2) planes\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2868},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8401532,"byte_end":8401538,"line_start":1316,"line_end":1316,"column_start":9,"column_end":15},"name":"Yvu422","qualname":"::generated::c_api::wl_shm::Format::Yvu422","value":"Format::Yvu422","parent":{"krate":0,"index":2702},"children":[],"decl_id":null,"docs":"3 plane YCbCr format, 2x1 subsampled Cr (1) and Cb (2) planes\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2871},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8401641,"byte_end":8401647,"line_start":1318,"line_end":1318,"column_start":9,"column_end":15},"name":"Yuv444","qualname":"::generated::c_api::wl_shm::Format::Yuv444","value":"Format::Yuv444","parent":{"krate":0,"index":2702},"children":[],"decl_id":null,"docs":"3 plane YCbCr format, non-subsampled Cb (1) and Cr (2) planes\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2874},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8401750,"byte_end":8401756,"line_start":1320,"line_end":1320,"column_start":9,"column_end":15},"name":"Yvu444","qualname":"::generated::c_api::wl_shm::Format::Yvu444","value":"Format::Yvu444","parent":{"krate":0,"index":2702},"children":[],"decl_id":null,"docs":"3 plane YCbCr format, non-subsampled Cr (1) and Cb (2) planes\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2702},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8395631,"byte_end":8395637,"line_start":1204,"line_end":1204,"column_start":14,"column_end":20},"name":"Format","qualname":"::generated::c_api::wl_shm::Format","value":"pub enum Format {\n\n    #[doc = \"32-bit ARGB format, [31:0] A:R:G:B 8:8:8:8 little endian\"]\n    Argb8888 = ,\n\n    #[doc = \"32-bit RGB format, [31:0] x:R:G:B 8:8:8:8 little endian\"]\n    Xrgb8888 = ,\n\n    #[doc = \"8-bit color index format, [7:0] C\"]\n    C8 = ,\n\n    #[doc = \"8-bit RGB format, [7:0] R:G:B 3:3:2\"]\n    Rgb332 = ,\n\n    #[doc = \"8-bit BGR format, [7:0] B:G:R 2:3:3\"]\n    Bgr233 = ,\n\n    #[doc = \"16-bit xRGB format, [15:0] x:R:G:B 4:4:4:4 little endian\"]\n    Xrgb4444 = ,\n\n    #[doc = \"16-bit xBGR format, [15:0] x:B:G:R 4:4:4:4 little endian\"]\n    Xbgr4444 = ,\n\n    #[doc = \"16-bit RGBx format, [15:0] R:G:B:x 4:4:4:4 little endian\"]\n    Rgbx4444 = ,\n\n    #[doc = \"16-bit BGRx format, [15:0] B:G:R:x 4:4:4:4 little endian\"]\n    Bgrx4444 = ,\n\n    #[doc = \"16-bit ARGB format, [15:0] A:R:G:B 4:4:4:4 little endian\"]\n    Argb4444 = ,\n\n    #[doc = \"16-bit ABGR format, [15:0] A:B:G:R 4:4:4:4 little endian\"]\n    Abgr4444 = ,\n\n    #[doc = \"16-bit RBGA format, [15:0] R:G:B:A 4:4:4:4 little endian\"]\n    Rgba4444 = ,\n\n    #[doc = \"16-bit BGRA format, [15:0] B:G:R:A 4:4:4:4 little endian\"]\n    Bgra4444 = ,\n\n    #[doc = \"16-bit xRGB format, [15:0] x:R:G:B 1:5:5:5 little endian\"]\n    Xrgb1555 = ,\n\n    #[doc = \"16-bit xBGR 1555 format, [15:0] x:B:G:R 1:5:5:5 little endian\"]\n    Xbgr1555 = ,\n\n    #[doc = \"16-bit RGBx 5551 format, [15:0] R:G:B:x 5:5:5:1 little endian\"]\n    Rgbx5551 = ,\n\n    #[doc = \"16-bit BGRx 5551 format, [15:0] B:G:R:x 5:5:5:1 little endian\"]\n    Bgrx5551 = ,\n\n    #[doc = \"16-bit ARGB 1555 format, [15:0] A:R:G:B 1:5:5:5 little endian\"]\n    Argb1555 = ,\n\n    #[doc = \"16-bit ABGR 1555 format, [15:0] A:B:G:R 1:5:5:5 little endian\"]\n    Abgr1555 = ,\n\n    #[doc = \"16-bit RGBA 5551 format, [15:0] R:G:B:A 5:5:5:1 little endian\"]\n    Rgba5551 = ,\n\n    #[doc = \"16-bit BGRA 5551 format, [15:0] B:G:R:A 5:5:5:1 little endian\"]\n    Bgra5551 = ,\n\n    #[doc = \"16-bit RGB 565 format, [15:0] R:G:B 5:6:5 little endian\"]\n    Rgb565 = ,\n\n    #[doc = \"16-bit BGR 565 format, [15:0] B:G:R 5:6:5 little endian\"]\n    Bgr565 = ,\n\n    #[doc = \"24-bit RGB format, [23:0] R:G:B little endian\"]\n    Rgb888 = ,\n\n    #[doc = \"24-bit BGR format, [23:0] B:G:R little endian\"]\n    Bgr888 = ,\n\n    #[doc = \"32-bit xBGR format, [31:0] x:B:G:R 8:8:8:8 little endian\"]\n    Xbgr8888 = ,\n\n    #[doc = \"32-bit RGBx format, [31:0] R:G:B:x 8:8:8:8 little endian\"]\n    Rgbx8888 = ,\n\n    #[doc = \"32-bit BGRx format, [31:0] B:G:R:x 8:8:8:8 little endian\"]\n    Bgrx8888 = ,\n\n    #[doc = \"32-bit ABGR format, [31:0] A:B:G:R 8:8:8:8 little endian\"]\n    Abgr8888 = ,\n\n    #[doc = \"32-bit RGBA format, [31:0] R:G:B:A 8:8:8:8 little endian\"]\n    Rgba8888 = ,\n\n    #[doc = \"32-bit BGRA format, [31:0] B:G:R:A 8:8:8:8 little endian\"]\n    Bgra8888 = ,\n\n    #[doc = \"32-bit xRGB format, [31:0] x:R:G:B 2:10:10:10 little endian\"]\n    Xrgb2101010 = ,\n\n    #[doc = \"32-bit xBGR format, [31:0] x:B:G:R 2:10:10:10 little endian\"]\n    Xbgr2101010 = ,\n\n    #[doc = \"32-bit RGBx format, [31:0] R:G:B:x 10:10:10:2 little endian\"]\n    Rgbx1010102 = ,\n\n    #[doc = \"32-bit BGRx format, [31:0] B:G:R:x 10:10:10:2 little endian\"]\n    Bgrx1010102 = ,\n\n    #[doc = \"32-bit ARGB format, [31:0] A:R:G:B 2:10:10:10 little endian\"]\n    Argb2101010 = ,\n\n    #[doc = \"32-bit ABGR format, [31:0] A:B:G:R 2:10:10:10 little endian\"]\n    Abgr2101010 = ,\n\n    #[doc = \"32-bit RGBA format, [31:0] R:G:B:A 10:10:10:2 little endian\"]\n    Rgba1010102 = ,\n\n    #[doc = \"32-bit BGRA format, [31:0] B:G:R:A 10:10:10:2 little endian\"]\n    Bgra1010102 = ,\n\n    #[doc = \"packed YCbCr format, [31:0] Cr0:Y1:Cb0:Y0 8:8:8:8 little endian\"]\n    Yuyv = ,\n\n    #[doc = \"packed YCbCr format, [31:0] Cb0:Y1:Cr0:Y0 8:8:8:8 little endian\"]\n    Yvyu = ,\n\n    #[doc = \"packed YCbCr format, [31:0] Y1:Cr0:Y0:Cb0 8:8:8:8 little endian\"]\n    Uyvy = ,\n\n    #[doc = \"packed YCbCr format, [31:0] Y1:Cb0:Y0:Cr0 8:8:8:8 little endian\"]\n    Vyuy = ,\n\n    #[doc = \"packed AYCbCr format, [31:0] A:Y:Cb:Cr 8:8:8:8 little endian\"]\n    Ayuv = ,\n\n    #[doc = \"2 plane YCbCr Cr:Cb format, 2x2 subsampled Cr:Cb plane\"]\n    Nv12 = ,\n\n    #[doc = \"2 plane YCbCr Cb:Cr format, 2x2 subsampled Cb:Cr plane\"]\n    Nv21 = ,\n\n    #[doc = \"2 plane YCbCr Cr:Cb format, 2x1 subsampled Cr:Cb plane\"]\n    Nv16 = ,\n\n    #[doc = \"2 plane YCbCr Cb:Cr format, 2x1 subsampled Cb:Cr plane\"]\n    Nv61 = ,\n\n    #[doc = \"3 plane YCbCr format, 4x4 subsampled Cb (1) and Cr (2) planes\"]\n    Yuv410 = ,\n\n    #[doc = \"3 plane YCbCr format, 4x4 subsampled Cr (1) and Cb (2) planes\"]\n    Yvu410 = ,\n\n    #[doc = \"3 plane YCbCr format, 4x1 subsampled Cb (1) and Cr (2) planes\"]\n    Yuv411 = ,\n\n    #[doc = \"3 plane YCbCr format, 4x1 subsampled Cr (1) and Cb (2) planes\"]\n    Yvu411 = ,\n\n    #[doc = \"3 plane YCbCr format, 2x2 subsampled Cb (1) and Cr (2) planes\"]\n    Yuv420 = ,\n\n    #[doc = \"3 plane YCbCr format, 2x2 subsampled Cr (1) and Cb (2) planes\"]\n    Yvu420 = ,\n\n    #[doc = \"3 plane YCbCr format, 2x1 subsampled Cb (1) and Cr (2) planes\"]\n    Yuv422 = ,\n\n    #[doc = \"3 plane YCbCr format, 2x1 subsampled Cr (1) and Cb (2) planes\"]\n    Yvu422 = ,\n\n    #[doc = \"3 plane YCbCr format, non-subsampled Cb (1) and Cr (2) planes\"]\n    Yuv444 = ,\n\n    #[doc = \"3 plane YCbCr format, non-subsampled Cr (1) and Cb (2) planes\"]\n    Yvu444 = ,\n}","parent":null,"children":[{"krate":0,"index":2703},{"krate":0,"index":2706},{"krate":0,"index":2709},{"krate":0,"index":2712},{"krate":0,"index":2715},{"krate":0,"index":2718},{"krate":0,"index":2721},{"krate":0,"index":2724},{"krate":0,"index":2727},{"krate":0,"index":2730},{"krate":0,"index":2733},{"krate":0,"index":2736},{"krate":0,"index":2739},{"krate":0,"index":2742},{"krate":0,"index":2745},{"krate":0,"index":2748},{"krate":0,"index":2751},{"krate":0,"index":2754},{"krate":0,"index":2757},{"krate":0,"index":2760},{"krate":0,"index":2763},{"krate":0,"index":2766},{"krate":0,"index":2769},{"krate":0,"index":2772},{"krate":0,"index":2775},{"krate":0,"index":2778},{"krate":0,"index":2781},{"krate":0,"index":2784},{"krate":0,"index":2787},{"krate":0,"index":2790},{"krate":0,"index":2793},{"krate":0,"index":2796},{"krate":0,"index":2799},{"krate":0,"index":2802},{"krate":0,"index":2805},{"krate":0,"index":2808},{"krate":0,"index":2811},{"krate":0,"index":2814},{"krate":0,"index":2817},{"krate":0,"index":2820},{"krate":0,"index":2823},{"krate":0,"index":2826},{"krate":0,"index":2829},{"krate":0,"index":2832},{"krate":0,"index":2835},{"krate":0,"index":2838},{"krate":0,"index":2841},{"krate":0,"index":2844},{"krate":0,"index":2847},{"krate":0,"index":2850},{"krate":0,"index":2853},{"krate":0,"index":2856},{"krate":0,"index":2859},{"krate":0,"index":2862},{"krate":0,"index":2865},{"krate":0,"index":2868},{"krate":0,"index":2871},{"krate":0,"index":2874}],"decl_id":null,"docs":"pixel formats","sig":null,"attributes":[{"value":"repr(u32)","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8395560,"byte_end":8395572,"line_start":1202,"line_end":1202,"column_start":5,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":1044},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8401809,"byte_end":8401817,"line_start":1323,"line_end":1323,"column_start":16,"column_end":24},"name":"from_raw","qualname":"<Format>::from_raw","value":"pub fn from_raw(u32) -> Option<Format>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1045},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8404955,"byte_end":8404961,"line_start":1386,"line_end":1386,"column_start":16,"column_end":22},"name":"to_raw","qualname":"<Format>::to_raw","value":"pub fn to_raw(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":1047},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8405298,"byte_end":8405308,"line_start":1392,"line_end":1392,"column_start":9,"column_end":19},"name":"CreatePool","qualname":"::generated::c_api::wl_shm::Request::CreatePool","value":"Request::CreatePool { id, fd, size }","parent":{"krate":0,"index":1046},"children":[],"decl_id":null,"docs":"create a shm pool","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1046},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8405032,"byte_end":8405039,"line_start":1390,"line_end":1390,"column_start":14,"column_end":21},"name":"Request","qualname":"::generated::c_api::wl_shm::Request","value":"pub enum Request {\n\n    #[doc =\n      \"create a shm pool\\n\\nCreate a new wl_shm_pool object.\\n\\nThe pool can be used to create shared memory based buffer\\nobjects.  The server will mmap size bytes of the passed file\\ndescriptor, to use as backing memory for the pool.\"]\n    CreatePool {\n        id: Proxy<super::wl_shm_pool::WlShmPool>,\n        fd: ::std::os::unix::io::RawFd,\n        size: i32,\n    },\n}","parent":null,"children":[{"krate":0,"index":1047}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":1066},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8408094,"byte_end":8408100,"line_start":1472,"line_end":1472,"column_start":9,"column_end":15},"name":"Format","qualname":"::generated::c_api::wl_shm::Event::Format","value":"Event::Format { format }","parent":{"krate":0,"index":1065},"children":[],"decl_id":null,"docs":"pixel format description","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1065},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8407908,"byte_end":8407913,"line_start":1470,"line_end":1470,"column_start":14,"column_end":19},"name":"Event","qualname":"::generated::c_api::wl_shm::Event","value":"pub enum Event {\n\n    #[doc =\n      \"pixel format description\\n\\nInforms the client about a valid pixel format that\\ncan be used for buffers. Known formats include\\nargb8888 and xrgb8888.\"]\n    Format {\n        format: Format,\n    },\n}","parent":null,"children":[{"krate":0,"index":1066}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1081},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8410378,"byte_end":8410383,"line_start":1542,"line_end":1542,"column_start":16,"column_end":21},"name":"WlShm","qualname":"::generated::c_api::wl_shm::WlShm","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1089},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8410702,"byte_end":8410715,"line_start":1552,"line_end":1552,"column_start":15,"column_end":28},"name":"RequestsTrait","qualname":"::generated::c_api::wl_shm::RequestsTrait","value":"RequestsTrait","parent":null,"children":[{"krate":0,"index":1090}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1090},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8410977,"byte_end":8410988,"line_start":1554,"line_end":1554,"column_start":12,"column_end":23},"name":"create_pool","qualname":"::generated::c_api::wl_shm::RequestsTrait::create_pool","value":"pub fn create_pool<F>(&Self, ::std::os::unix::io::RawFd, i32, F)\n-> Result<Proxy<super::wl_shm_pool::WlShmPool>, ()> where\nF: FnOnce(NewProxy<super::wl_shm_pool::WlShmPool>) ->\nProxy<super::wl_shm_pool::WlShmPool>","parent":{"krate":0,"index":1089},"children":[],"decl_id":null,"docs":"create a shm pool","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1095},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8412041,"byte_end":8412062,"line_start":1586,"line_end":1586,"column_start":15,"column_end":36},"name":"REQ_CREATE_POOL_SINCE","qualname":"::generated::c_api::wl_shm::REQ_CREATE_POOL_SINCE","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" The minimal object version supporting this request\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1096},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8412156,"byte_end":8412172,"line_start":1588,"line_end":1588,"column_start":15,"column_end":31},"name":"EVT_FORMAT_SINCE","qualname":"::generated::c_api::wl_shm::EVT_FORMAT_SINCE","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" The minimal object version supporting this event\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1097},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8412548,"byte_end":8412557,"line_start":1591,"line_end":1591,"column_start":9,"column_end":18},"name":"wl_buffer","qualname":"::generated::c_api::wl_buffer","value":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","parent":null,"children":[{"krate":0,"index":1098},{"krate":0,"index":1099},{"krate":0,"index":1100},{"krate":0,"index":1101},{"krate":0,"index":1102},{"krate":0,"index":1103},{"krate":0,"index":1104},{"krate":0,"index":4058},{"krate":0,"index":1105},{"krate":0,"index":1106},{"krate":0,"index":1107},{"krate":0,"index":1108},{"krate":0,"index":1109},{"krate":0,"index":1110},{"krate":0,"index":1111},{"krate":0,"index":1112},{"krate":0,"index":1113},{"krate":0,"index":1114},{"krate":0,"index":1115},{"krate":0,"index":1118},{"krate":0,"index":1132},{"krate":0,"index":1135},{"krate":0,"index":1148},{"krate":0,"index":1150},{"krate":0,"index":1156},{"krate":0,"index":1158},{"krate":0,"index":1160},{"krate":0,"index":1161}],"decl_id":null,"docs":"content for a wl_surface","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1116},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8413151,"byte_end":8413158,"line_start":1600,"line_end":1600,"column_start":9,"column_end":16},"name":"Destroy","qualname":"::generated::c_api::wl_buffer::Request::Destroy","value":"Request::Destroy","parent":{"krate":0,"index":1115},"children":[],"decl_id":null,"docs":"destroy a buffer","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1115},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8412840,"byte_end":8412847,"line_start":1598,"line_end":1598,"column_start":14,"column_end":21},"name":"Request","qualname":"::generated::c_api::wl_buffer::Request","value":"pub enum Request {\n\n    #[doc =\n      \"destroy a buffer\\n\\nDestroy a buffer. If and how you need to release the backing\\nstorage is defined by the buffer factory interface.\\n\\nFor possible side-effects to a surface, see wl_surface.attach.\\n\\nThis is a destructor, once sent this object cannot be used any longer.\"]\n    Destroy,\n}","parent":null,"children":[{"krate":0,"index":1116}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1133},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8415682,"byte_end":8415689,"line_start":1661,"line_end":1661,"column_start":9,"column_end":16},"name":"Release","qualname":"::generated::c_api::wl_buffer::Event::Release","value":"Event::Release","parent":{"krate":0,"index":1132},"children":[],"decl_id":null,"docs":"compositor releases buffer","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1132},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8414972,"byte_end":8414977,"line_start":1659,"line_end":1659,"column_start":14,"column_end":19},"name":"Event","qualname":"::generated::c_api::wl_buffer::Event","value":"pub enum Event {\n\n    #[doc =\n      \"compositor releases buffer\\n\\nSent when this wl_buffer is no longer used by the compositor.\\nThe client is now free to reuse or destroy this buffer and its\\nbacking storage.\\n\\nIf a client receives a release event before the frame callback\\nrequested in the same wl_surface.commit that attaches this\\nwl_buffer to a surface, then the client is immediately free to\\nreuse the buffer and its backing storage, and does not need a\\nsecond buffer for the next surface content update. Typically\\nthis is possible, when the compositor maintains a copy of the\\nwl_surface contents, e.g. as a GL texture. This is an important\\noptimization for GL(ES) compositors with wl_shm clients.\"]\n    Release,\n}","parent":null,"children":[{"krate":0,"index":1133}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1148},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8417275,"byte_end":8417283,"line_start":1715,"line_end":1715,"column_start":16,"column_end":24},"name":"WlBuffer","qualname":"::generated::c_api::wl_buffer::WlBuffer","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1156},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8417611,"byte_end":8417624,"line_start":1725,"line_end":1725,"column_start":15,"column_end":28},"name":"RequestsTrait","qualname":"::generated::c_api::wl_buffer::RequestsTrait","value":"RequestsTrait","parent":null,"children":[{"krate":0,"index":1157}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1157},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8417961,"byte_end":8417968,"line_start":1727,"line_end":1727,"column_start":12,"column_end":19},"name":"destroy","qualname":"::generated::c_api::wl_buffer::RequestsTrait::destroy","value":"pub fn destroy(&Self) -> ()","parent":{"krate":0,"index":1156},"children":[],"decl_id":null,"docs":"destroy a buffer","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1160},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8418234,"byte_end":8418251,"line_start":1736,"line_end":1736,"column_start":15,"column_end":32},"name":"REQ_DESTROY_SINCE","qualname":"::generated::c_api::wl_buffer::REQ_DESTROY_SINCE","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" The minimal object version supporting this request\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1161},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8418345,"byte_end":8418362,"line_start":1738,"line_end":1738,"column_start":15,"column_end":32},"name":"EVT_RELEASE_SINCE","qualname":"::generated::c_api::wl_buffer::EVT_RELEASE_SINCE","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" The minimal object version supporting this event\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1162},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8418761,"byte_end":8418774,"line_start":1741,"line_end":1741,"column_start":9,"column_end":22},"name":"wl_data_offer","qualname":"::generated::c_api::wl_data_offer","value":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","parent":null,"children":[{"krate":0,"index":1163},{"krate":0,"index":1164},{"krate":0,"index":1165},{"krate":0,"index":1166},{"krate":0,"index":1167},{"krate":0,"index":1168},{"krate":0,"index":1169},{"krate":0,"index":4086},{"krate":0,"index":1170},{"krate":0,"index":1171},{"krate":0,"index":1172},{"krate":0,"index":1173},{"krate":0,"index":1174},{"krate":0,"index":1175},{"krate":0,"index":1176},{"krate":0,"index":1177},{"krate":0,"index":1178},{"krate":0,"index":1179},{"krate":0,"index":2885},{"krate":0,"index":2905},{"krate":0,"index":2903},{"krate":0,"index":2901},{"krate":0,"index":2898},{"krate":0,"index":2899},{"krate":0,"index":1180},{"krate":0,"index":1183},{"krate":0,"index":1197},{"krate":0,"index":1217},{"krate":0,"index":1224},{"krate":0,"index":1238},{"krate":0,"index":1240},{"krate":0,"index":1246},{"krate":0,"index":1252},{"krate":0,"index":1258},{"krate":0,"index":1259},{"krate":0,"index":1260},{"krate":0,"index":1261},{"krate":0,"index":1262},{"krate":0,"index":1263},{"krate":0,"index":1264},{"krate":0,"index":1265}],"decl_id":null,"docs":"offer to transfer data","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2886},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8419189,"byte_end":8419202,"line_start":1752,"line_end":1752,"column_start":9,"column_end":22},"name":"InvalidFinish","qualname":"::generated::c_api::wl_data_offer::Error::InvalidFinish","value":"Error::InvalidFinish","parent":{"krate":0,"index":2885},"children":[],"decl_id":null,"docs":"finish request was called untimely\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2889},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8419271,"byte_end":8419288,"line_start":1754,"line_end":1754,"column_start":9,"column_end":26},"name":"InvalidActionMask","qualname":"::generated::c_api::wl_data_offer::Error::InvalidActionMask","value":"Error::InvalidActionMask","parent":{"krate":0,"index":2885},"children":[],"decl_id":null,"docs":"action mask contains invalid values\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2892},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8419358,"byte_end":8419371,"line_start":1756,"line_end":1756,"column_start":9,"column_end":22},"name":"InvalidAction","qualname":"::generated::c_api::wl_data_offer::Error::InvalidAction","value":"Error::InvalidAction","parent":{"krate":0,"index":2885},"children":[],"decl_id":null,"docs":"action argument has an invalid value\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2895},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8419438,"byte_end":8419450,"line_start":1758,"line_end":1758,"column_start":9,"column_end":21},"name":"InvalidOffer","qualname":"::generated::c_api::wl_data_offer::Error::InvalidOffer","value":"Error::InvalidOffer","parent":{"krate":0,"index":2885},"children":[],"decl_id":null,"docs":"offer doesn't accept this request\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2885},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8419119,"byte_end":8419124,"line_start":1750,"line_end":1750,"column_start":14,"column_end":19},"name":"Error","qualname":"::generated::c_api::wl_data_offer::Error","value":"pub enum Error {\n\n    #[doc = \"finish request was called untimely\"]\n    InvalidFinish = ,\n\n    #[doc = \"action mask contains invalid values\"]\n    InvalidActionMask = ,\n\n    #[doc = \"action argument has an invalid value\"]\n    InvalidAction = ,\n\n    #[doc = \"offer doesn't accept this request\"]\n    InvalidOffer = ,\n}","parent":null,"children":[{"krate":0,"index":2886},{"krate":0,"index":2889},{"krate":0,"index":2892},{"krate":0,"index":2895}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"repr(u32)","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8419048,"byte_end":8419060,"line_start":1748,"line_end":1748,"column_start":5,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":1181},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8419494,"byte_end":8419502,"line_start":1761,"line_end":1761,"column_start":16,"column_end":24},"name":"from_raw","qualname":"<Error>::from_raw","value":"pub fn from_raw(u32) -> Option<Error>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1182},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8419825,"byte_end":8419831,"line_start":1770,"line_end":1770,"column_start":16,"column_end":22},"name":"to_raw","qualname":"<Error>::to_raw","value":"pub fn to_raw(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":1184},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8420701,"byte_end":8420707,"line_start":1776,"line_end":1776,"column_start":9,"column_end":15},"name":"Accept","qualname":"::generated::c_api::wl_data_offer::Request::Accept","value":"Request::Accept { serial, mime_type }","parent":{"krate":0,"index":1183},"children":[],"decl_id":null,"docs":"accept one of the offered mime types","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":1187},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8421551,"byte_end":8421558,"line_start":1781,"line_end":1781,"column_start":9,"column_end":16},"name":"Receive","qualname":"::generated::c_api::wl_data_offer::Request::Receive","value":"Request::Receive { mime_type, fd }","parent":{"krate":0,"index":1183},"children":[],"decl_id":null,"docs":"request that the data is transferred","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1190},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8421794,"byte_end":8421801,"line_start":1786,"line_end":1786,"column_start":9,"column_end":16},"name":"Destroy","qualname":"::generated::c_api::wl_data_offer::Request::Destroy","value":"Request::Destroy","parent":{"krate":0,"index":1183},"children":[],"decl_id":null,"docs":"destroy data offer","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1192},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8422389,"byte_end":8422395,"line_start":1788,"line_end":1788,"column_start":9,"column_end":15},"name":"Finish","qualname":"::generated::c_api::wl_data_offer::Request::Finish","value":"Request::Finish","parent":{"krate":0,"index":1183},"children":[],"decl_id":null,"docs":"the offer will no longer be used","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":1194},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8424053,"byte_end":8424063,"line_start":1790,"line_end":1790,"column_start":9,"column_end":19},"name":"SetActions","qualname":"::generated::c_api::wl_data_offer::Request::SetActions","value":"Request::SetActions { dnd_actions, preferred_action }","parent":{"krate":0,"index":1183},"children":[],"decl_id":null,"docs":"set the available/preferred drag-and-drop actions","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1183},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8419902,"byte_end":8419909,"line_start":1774,"line_end":1774,"column_start":14,"column_end":21},"name":"Request","qualname":"::generated::c_api::wl_data_offer::Request","value":"pub enum Request {\n\n    #[doc =\n      \"accept one of the offered mime types\\n\\nIndicate that the client can accept the given mime type, or\\nNULL for not accepted.\\n\\nFor objects of version 2 or older, this request is used by the\\nclient to give feedback whether the client can receive the given\\nmime type, or NULL if none is accepted; the feedback does not\\ndetermine whether the drag-and-drop operation succeeds or not.\\n\\nFor objects of version 3 or newer, this request determines the\\nfinal result of the drag-and-drop operation. If the end result\\nis that no mime types were accepted, the drag-and-drop operation\\nwill be cancelled and the corresponding drag source will receive\\nwl_data_source.cancelled. Clients may still use this event in\\nconjunction with wl_data_source.action for feedback.\"]\n    Accept {\n        serial: u32,\n        mime_type: Option<String>,\n    },\n\n    #[doc =\n      \"request that the data is transferred\\n\\nTo transfer the offered data, the client issues this request\\nand indicates the mime type it wants to receive.  The transfer\\nhappens through the passed file descriptor (typically created\\nwith the pipe system call).  The source client writes the data\\nin the mime type representation requested and then closes the\\nfile descriptor.\\n\\nThe receiving client reads from the read end of the pipe until\\nEOF and then closes its end, at which point the transfer is\\ncomplete.\\n\\nThis request may happen multiple times for different mime types,\\nboth before and after wl_data_device.drop. Drag-and-drop destination\\nclients may preemptively fetch data or examine it more closely to\\ndetermine acceptance.\"]\n    Receive {\n        mime_type: String,\n        fd: ::std::os::unix::io::RawFd,\n    },\n\n    #[doc =\n      \"destroy data offer\\n\\nDestroy the data offer.\\n\\nThis is a destructor, once sent this object cannot be used any longer.\"]\n    Destroy,\n\n    #[doc =\n      \"the offer will no longer be used\\n\\nNotifies the compositor that the drag destination successfully\\nfinished the drag-and-drop operation.\\n\\nUpon receiving this request, the compositor will emit\\nwl_data_source.dnd_finished on the drag source client.\\n\\nIt is a client error to perform other requests than\\nwl_data_offer.destroy after this one. It is also an error to perform\\nthis request after a NULL mime type has been set in\\nwl_data_offer.accept or no action was received through\\nwl_data_offer.action.\\n\\nOnly available since version 3 of the interface\"]\n    Finish,\n\n    #[doc =\n      \"set the available/preferred drag-and-drop actions\\n\\nSets the actions that the destination side client supports for\\nthis operation. This request may trigger the emission of\\nwl_data_source.action and wl_data_offer.action events if the compositor\\nneeds to change the selected action.\\n\\nThis request can be called multiple times throughout the\\ndrag-and-drop operation, typically in response to wl_data_device.enter\\nor wl_data_device.motion events.\\n\\nThis request determines the final result of the drag-and-drop\\noperation. If the end result is that no action is accepted,\\nthe drag source will receive wl_drag_source.cancelled.\\n\\nThe dnd_actions argument must contain only values expressed in the\\nwl_data_device_manager.dnd_actions enum, and the preferred_action\\nargument must only contain one of those values set, otherwise it\\nwill result in a protocol error.\\n\\nWhile managing an \\\"ask\\\" action, the destination drag-and-drop client\\nmay perform further wl_data_offer.receive requests, and is expected\\nto perform one last wl_data_offer.set_actions request with a preferred\\naction other than \\\"ask\\\" (and optionally wl_data_offer.accept) before\\nrequesting wl_data_offer.finish, in order to convey the action selected\\nby the user. If the preferred action is not in the\\nwl_data_offer.source_actions mask, an error will be raised.\\n\\nIf the \\\"ask\\\" action is dismissed (e.g. user cancellation), the client\\nis expected to perform wl_data_offer.destroy right away.\\n\\nThis request can only be made on drag-and-drop offers, a protocol error\\nwill be raised otherwise.\\n\\nOnly available since version 3 of the interface\"]\n    SetActions {\n        dnd_actions: u32,\n        preferred_action: u32,\n    },\n}","parent":null,"children":[{"krate":0,"index":1184},{"krate":0,"index":1187},{"krate":0,"index":1190},{"krate":0,"index":1192},{"krate":0,"index":1194}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":1218},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8429992,"byte_end":8429997,"line_start":1946,"line_end":1946,"column_start":9,"column_end":14},"name":"Offer","qualname":"::generated::c_api::wl_data_offer::Event::Offer","value":"Event::Offer { mime_type }","parent":{"krate":0,"index":1217},"children":[],"decl_id":null,"docs":"advertise offered mime type","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":1220},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8430347,"byte_end":8430360,"line_start":1948,"line_end":1948,"column_start":9,"column_end":22},"name":"SourceActions","qualname":"::generated::c_api::wl_data_offer::Event::SourceActions","value":"Event::SourceActions { source_actions }","parent":{"krate":0,"index":1217},"children":[],"decl_id":null,"docs":"notify the source-side available actions","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":1222},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8432232,"byte_end":8432238,"line_start":1950,"line_end":1950,"column_start":9,"column_end":15},"name":"Action","qualname":"::generated::c_api::wl_data_offer::Event::Action","value":"Event::Action { dnd_action }","parent":{"krate":0,"index":1217},"children":[],"decl_id":null,"docs":"notify the selected action","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1217},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8429833,"byte_end":8429838,"line_start":1944,"line_end":1944,"column_start":14,"column_end":19},"name":"Event","qualname":"::generated::c_api::wl_data_offer::Event","value":"pub enum Event {\n\n    #[doc =\n      \"advertise offered mime type\\n\\nSent immediately after creating the wl_data_offer object.  One\\nevent per offered mime type.\"]\n    Offer {\n        mime_type: String,\n    },\n\n    #[doc =\n      \"notify the source-side available actions\\n\\nThis event indicates the actions offered by the data source. It\\nwill be sent right after wl_data_device.enter, or anytime the source\\nside changes its offered actions through wl_data_source.set_actions.\\n\\nOnly available since version 3 of the interface\"]\n    SourceActions {\n        source_actions: u32,\n    },\n\n    #[doc =\n      \"notify the selected action\\n\\nThis event indicates the action selected by the compositor after\\nmatching the source/destination side actions. Only one action (or\\nnone) will be offered here.\\n\\nThis event can be emitted multiple times during the drag-and-drop\\noperation in response to destination side action changes through\\nwl_data_offer.set_actions.\\n\\nThis event will no longer be emitted after wl_data_device.drop\\nhappened on the drag-and-drop destination, the client must\\nhonor the last action received, or the last preferred one set\\nthrough wl_data_offer.set_actions when handling an \\\"ask\\\" action.\\n\\nCompositors may also change the selected action on the fly, mainly\\nin response to keyboard modifier changes during the drag-and-drop\\noperation.\\n\\nThe most recent action received is always the valid one. Prior to\\nreceiving wl_data_device.drop, the chosen action may change (e.g.\\ndue to keyboard modifiers being pressed). At the time of receiving\\nwl_data_device.drop the drag-and-drop destination must honor the\\nlast action received.\\n\\nAction changes may still happen after wl_data_device.drop,\\nespecially on \\\"ask\\\" actions, where the drag-and-drop destination\\nmay choose another action afterwards. Action changes happening\\nat this stage are always the result of inter-client negotiation, the\\ncompositor shall no longer be able to induce a different action.\\n\\nUpon \\\"ask\\\" actions, it is expected that the drag-and-drop destination\\nmay potentially choose a different action and/or mime type,\\nbased on wl_data_offer.source_actions and finally chosen by the\\nuser (e.g. popping up a menu with the available options). The\\nfinal wl_data_offer.set_actions and wl_data_offer.accept requests\\nmust happen before the call to wl_data_offer.finish.\\n\\nOnly available since version 3 of the interface\"]\n    Action {\n        dnd_action: u32,\n    },\n}","parent":null,"children":[{"krate":0,"index":1218},{"krate":0,"index":1220},{"krate":0,"index":1222}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1238},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8436629,"byte_end":8436640,"line_start":2075,"line_end":2075,"column_start":16,"column_end":27},"name":"WlDataOffer","qualname":"::generated::c_api::wl_data_offer::WlDataOffer","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1246},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8436979,"byte_end":8436992,"line_start":2085,"line_end":2085,"column_start":15,"column_end":28},"name":"RequestsTrait","qualname":"::generated::c_api::wl_data_offer::RequestsTrait","value":"RequestsTrait","parent":null,"children":[{"krate":0,"index":1247},{"krate":0,"index":1248},{"krate":0,"index":1249},{"krate":0,"index":1250},{"krate":0,"index":1251}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1247},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8437787,"byte_end":8437793,"line_start":2087,"line_end":2087,"column_start":12,"column_end":18},"name":"accept","qualname":"::generated::c_api::wl_data_offer::RequestsTrait::accept","value":"pub fn accept(&Self, u32, Option<String>) -> ()","parent":{"krate":0,"index":1246},"children":[],"decl_id":null,"docs":"accept one of the offered mime types","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1248},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8438617,"byte_end":8438624,"line_start":2089,"line_end":2089,"column_start":12,"column_end":19},"name":"receive","qualname":"::generated::c_api::wl_data_offer::RequestsTrait::receive","value":"pub fn receive(&Self, String, ::std::os::unix::io::RawFd) -> ()","parent":{"krate":0,"index":1246},"children":[],"decl_id":null,"docs":"request that the data is transferred","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1249},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8438870,"byte_end":8438877,"line_start":2091,"line_end":2091,"column_start":12,"column_end":19},"name":"destroy","qualname":"::generated::c_api::wl_data_offer::RequestsTrait::destroy","value":"pub fn destroy(&Self) -> ()","parent":{"krate":0,"index":1246},"children":[],"decl_id":null,"docs":"destroy data offer","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1250},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8439482,"byte_end":8439488,"line_start":2093,"line_end":2093,"column_start":12,"column_end":18},"name":"finish","qualname":"::generated::c_api::wl_data_offer::RequestsTrait::finish","value":"pub fn finish(&Self) -> ()","parent":{"krate":0,"index":1246},"children":[],"decl_id":null,"docs":"the offer will no longer be used","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1251},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8441163,"byte_end":8441174,"line_start":2095,"line_end":2095,"column_start":12,"column_end":23},"name":"set_actions","qualname":"::generated::c_api::wl_data_offer::RequestsTrait::set_actions","value":"pub fn set_actions(&Self, u32, u32) -> ()","parent":{"krate":0,"index":1246},"children":[],"decl_id":null,"docs":"set the available/preferred drag-and-drop actions","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1258},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8442341,"byte_end":8442357,"line_start":2129,"line_end":2129,"column_start":15,"column_end":31},"name":"REQ_ACCEPT_SINCE","qualname":"::generated::c_api::wl_data_offer::REQ_ACCEPT_SINCE","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" The minimal object version supporting this request\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1259},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8442453,"byte_end":8442470,"line_start":2131,"line_end":2131,"column_start":15,"column_end":32},"name":"REQ_RECEIVE_SINCE","qualname":"::generated::c_api::wl_data_offer::REQ_RECEIVE_SINCE","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" The minimal object version supporting this request\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1260},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8442566,"byte_end":8442583,"line_start":2133,"line_end":2133,"column_start":15,"column_end":32},"name":"REQ_DESTROY_SINCE","qualname":"::generated::c_api::wl_data_offer::REQ_DESTROY_SINCE","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" The minimal object version supporting this request\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1261},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8442679,"byte_end":8442695,"line_start":2135,"line_end":2135,"column_start":15,"column_end":31},"name":"REQ_FINISH_SINCE","qualname":"::generated::c_api::wl_data_offer::REQ_FINISH_SINCE","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" The minimal object version supporting this request\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1262},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8442791,"byte_end":8442812,"line_start":2137,"line_end":2137,"column_start":15,"column_end":36},"name":"REQ_SET_ACTIONS_SINCE","qualname":"::generated::c_api::wl_data_offer::REQ_SET_ACTIONS_SINCE","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" The minimal object version supporting this request\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1263},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8442906,"byte_end":8442921,"line_start":2139,"line_end":2139,"column_start":15,"column_end":30},"name":"EVT_OFFER_SINCE","qualname":"::generated::c_api::wl_data_offer::EVT_OFFER_SINCE","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" The minimal object version supporting this event\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1264},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8443015,"byte_end":8443039,"line_start":2141,"line_end":2141,"column_start":15,"column_end":39},"name":"EVT_SOURCE_ACTIONS_SINCE","qualname":"::generated::c_api::wl_data_offer::EVT_SOURCE_ACTIONS_SINCE","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" The minimal object version supporting this event\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1265},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8443133,"byte_end":8443149,"line_start":2143,"line_end":2143,"column_start":15,"column_end":31},"name":"EVT_ACTION_SINCE","qualname":"::generated::c_api::wl_data_offer::EVT_ACTION_SINCE","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" The minimal object version supporting this event\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1266},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8443435,"byte_end":8443449,"line_start":2146,"line_end":2146,"column_start":9,"column_end":23},"name":"wl_data_source","qualname":"::generated::c_api::wl_data_source","value":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","parent":null,"children":[{"krate":0,"index":1267},{"krate":0,"index":1268},{"krate":0,"index":1269},{"krate":0,"index":1270},{"krate":0,"index":1271},{"krate":0,"index":1272},{"krate":0,"index":1273},{"krate":0,"index":4114},{"krate":0,"index":1274},{"krate":0,"index":1275},{"krate":0,"index":1276},{"krate":0,"index":1277},{"krate":0,"index":1278},{"krate":0,"index":1279},{"krate":0,"index":1280},{"krate":0,"index":1281},{"krate":0,"index":1282},{"krate":0,"index":1283},{"krate":0,"index":2906},{"krate":0,"index":2920},{"krate":0,"index":2918},{"krate":0,"index":2916},{"krate":0,"index":2913},{"krate":0,"index":2914},{"krate":0,"index":1284},{"krate":0,"index":1287},{"krate":0,"index":1294},{"krate":0,"index":1310},{"krate":0,"index":1324},{"krate":0,"index":1339},{"krate":0,"index":1341},{"krate":0,"index":1347},{"krate":0,"index":1351},{"krate":0,"index":1355},{"krate":0,"index":1356},{"krate":0,"index":1357},{"krate":0,"index":1358},{"krate":0,"index":1359},{"krate":0,"index":1360},{"krate":0,"index":1361},{"krate":0,"index":1362},{"krate":0,"index":1363}],"decl_id":null,"docs":"offer to transfer data","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2907},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8443865,"byte_end":8443882,"line_start":2157,"line_end":2157,"column_start":9,"column_end":26},"name":"InvalidActionMask","qualname":"::generated::c_api::wl_data_source::Error::InvalidActionMask","value":"Error::InvalidActionMask","parent":{"krate":0,"index":2906},"children":[],"decl_id":null,"docs":"action mask contains invalid values\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2910},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8443950,"byte_end":8443963,"line_start":2159,"line_end":2159,"column_start":9,"column_end":22},"name":"InvalidSource","qualname":"::generated::c_api::wl_data_source::Error::InvalidSource","value":"Error::InvalidSource","parent":{"krate":0,"index":2906},"children":[],"decl_id":null,"docs":"source doesn't accept this request\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2906},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8443794,"byte_end":8443799,"line_start":2155,"line_end":2155,"column_start":14,"column_end":19},"name":"Error","qualname":"::generated::c_api::wl_data_source::Error","value":"pub enum Error {\n\n    #[doc = \"action mask contains invalid values\"]\n    InvalidActionMask = ,\n\n    #[doc = \"source doesn't accept this request\"]\n    InvalidSource = ,\n}","parent":null,"children":[{"krate":0,"index":2907},{"krate":0,"index":2910}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"repr(u32)","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8443723,"byte_end":8443735,"line_start":2153,"line_end":2153,"column_start":5,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":1285},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8444007,"byte_end":8444015,"line_start":2162,"line_end":2162,"column_start":16,"column_end":24},"name":"from_raw","qualname":"<Error>::from_raw","value":"pub fn from_raw(u32) -> Option<Error>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1286},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8444241,"byte_end":8444247,"line_start":2169,"line_end":2169,"column_start":16,"column_end":22},"name":"to_raw","qualname":"<Error>::to_raw","value":"pub fn to_raw(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":1288},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8444517,"byte_end":8444522,"line_start":2175,"line_end":2175,"column_start":9,"column_end":14},"name":"Offer","qualname":"::generated::c_api::wl_data_source::Request::Offer","value":"Request::Offer { mime_type }","parent":{"krate":0,"index":1287},"children":[],"decl_id":null,"docs":"add an offered mime type","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1290},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8444699,"byte_end":8444706,"line_start":2177,"line_end":2177,"column_start":9,"column_end":16},"name":"Destroy","qualname":"::generated::c_api::wl_data_source::Request::Destroy","value":"Request::Destroy","parent":{"krate":0,"index":1287},"children":[],"decl_id":null,"docs":"destroy the data source","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":1292},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8445442,"byte_end":8445452,"line_start":2179,"line_end":2179,"column_start":9,"column_end":19},"name":"SetActions","qualname":"::generated::c_api::wl_data_source::Request::SetActions","value":"Request::SetActions { dnd_actions }","parent":{"krate":0,"index":1287},"children":[],"decl_id":null,"docs":"set the available drag-and-drop actions","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1287},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8444318,"byte_end":8444325,"line_start":2173,"line_end":2173,"column_start":14,"column_end":21},"name":"Request","qualname":"::generated::c_api::wl_data_source::Request","value":"pub enum Request {\n\n    #[doc =\n      \"add an offered mime type\\n\\nThis request adds a mime type to the set of mime types\\nadvertised to targets.  Can be called several times to offer\\nmultiple types.\"]\n    Offer {\n        mime_type: String,\n    },\n\n    #[doc =\n      \"destroy the data source\\n\\nDestroy the data source.\\n\\nThis is a destructor, once sent this object cannot be used any longer.\"]\n    Destroy,\n\n    #[doc =\n      \"set the available drag-and-drop actions\\n\\nSets the actions that the source side client supports for this\\noperation. This request may trigger wl_data_source.action and\\nwl_data_offer.action events if the compositor needs to change the\\nselected action.\\n\\nThe dnd_actions argument must contain only values expressed in the\\nwl_data_device_manager.dnd_actions enum, otherwise it will result\\nin a protocol error.\\n\\nThis request must be made once only, and can only be made on sources\\nused in drag-and-drop, so it must be performed before\\nwl_data_device.start_drag. Attempting to use the source other than\\nfor drag-and-drop will raise a protocol error.\\n\\nOnly available since version 3 of the interface\"]\n    SetActions {\n        dnd_actions: u32,\n    },\n}","parent":null,"children":[{"krate":0,"index":1288},{"krate":0,"index":1290},{"krate":0,"index":1292}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":1311},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8449155,"byte_end":8449161,"line_start":2278,"line_end":2278,"column_start":9,"column_end":15},"name":"Target","qualname":"::generated::c_api::wl_data_source::Event::Target","value":"Event::Target { mime_type }","parent":{"krate":0,"index":1310},"children":[],"decl_id":null,"docs":"a target accepts an offered mime type","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":1313},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8449363,"byte_end":8449367,"line_start":2280,"line_end":2280,"column_start":9,"column_end":13},"name":"Send","qualname":"::generated::c_api::wl_data_source::Event::Send","value":"Event::Send { mime_type, fd }","parent":{"krate":0,"index":1310},"children":[],"decl_id":null,"docs":"send the data","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1316},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8450391,"byte_end":8450400,"line_start":2285,"line_end":2285,"column_start":9,"column_end":18},"name":"Cancelled","qualname":"::generated::c_api::wl_data_source::Event::Cancelled","value":"Event::Cancelled","parent":{"krate":0,"index":1310},"children":[],"decl_id":null,"docs":"selection was cancelled","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1318},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8450960,"byte_end":8450976,"line_start":2287,"line_end":2287,"column_start":9,"column_end":25},"name":"DndDropPerformed","qualname":"::generated::c_api::wl_data_source::Event::DndDropPerformed","value":"Event::DndDropPerformed","parent":{"krate":0,"index":1310},"children":[],"decl_id":null,"docs":"the drag-and-drop operation physically finished","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1320},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8451361,"byte_end":8451372,"line_start":2289,"line_end":2289,"column_start":9,"column_end":20},"name":"DndFinished","qualname":"::generated::c_api::wl_data_source::Event::DndFinished","value":"Event::DndFinished","parent":{"krate":0,"index":1310},"children":[],"decl_id":null,"docs":"the drag-and-drop operation concluded","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":1322},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8452627,"byte_end":8452633,"line_start":2291,"line_end":2291,"column_start":9,"column_end":15},"name":"Action","qualname":"::generated::c_api::wl_data_source::Event::Action","value":"Event::Action { dnd_action }","parent":{"krate":0,"index":1310},"children":[],"decl_id":null,"docs":"notify the selected action","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1310},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8448907,"byte_end":8448912,"line_start":2276,"line_end":2276,"column_start":14,"column_end":19},"name":"Event","qualname":"::generated::c_api::wl_data_source::Event","value":"pub enum Event {\n\n    #[doc =\n      \"a target accepts an offered mime type\\n\\nSent when a target accepts pointer_focus or motion events.  If\\na target does not accept any of the offered types, type is NULL.\\n\\nUsed for feedback during drag-and-drop.\"]\n    Target {\n        mime_type: Option<String>,\n    },\n\n    #[doc =\n      \"send the data\\n\\nRequest for data from the client.  Send the data as the\\nspecified mime type over the passed file descriptor, then\\nclose it.\"]\n    Send {\n        mime_type: String,\n        fd: ::std::os::unix::io::RawFd,\n    },\n\n    #[doc =\n      \"selection was cancelled\\n\\nThis data source is no longer valid. There are several reasons why\\nthis could happen:\\n\\n- The data source has been replaced by another data source.\\n- The drag-and-drop operation was performed, but the drop destination\\ndid not accept any of the mime types offered through\\nwl_data_source.target.\\n- The drag-and-drop operation was performed, but the drop destination\\ndid not select any of the actions present in the mask offered through\\nwl_data_source.action.\\n- The drag-and-drop operation was performed but didn't happen over a\\nsurface.\\n- The compositor cancelled the drag-and-drop operation (e.g. compositor\\ndependent timeouts to avoid stale drag-and-drop transfers).\\n\\nThe client should clean up and destroy this data source.\\n\\nFor objects of version 2 or older, wl_data_source.cancelled will\\nonly be emitted if the data source was replaced by another data\\nsource.\"]\n    Cancelled,\n\n    #[doc =\n      \"the drag-and-drop operation physically finished\\n\\nThe user performed the drop action. This event does not indicate\\nacceptance, wl_data_source.cancelled may still be emitted afterwards\\nif the drop destination does not accept any mime type.\\n\\nHowever, this event might however not be received if the compositor\\ncancelled the drag-and-drop operation before this event could happen.\\n\\nNote that the data_source may still be used in the future and should\\nnot be destroyed here.\\n\\nOnly available since version 3 of the interface\"]\n    DndDropPerformed,\n\n    #[doc =\n      \"the drag-and-drop operation concluded\\n\\nThe drop destination finished interoperating with this data\\nsource, so the client is now free to destroy this data source and\\nfree all associated data.\\n\\nIf the action used to perform the operation was \\\"move\\\", the\\nsource can now delete the transferred data.\\n\\nOnly available since version 3 of the interface\"]\n    DndFinished,\n\n    #[doc =\n      \"notify the selected action\\n\\nThis event indicates the action selected by the compositor after\\nmatching the source/destination side actions. Only one action (or\\nnone) will be offered here.\\n\\nThis event can be emitted multiple times during the drag-and-drop\\noperation, mainly in response to destination side changes through\\nwl_data_offer.set_actions, and as the data device enters/leaves\\nsurfaces.\\n\\nIt is only possible to receive this event after\\nwl_data_source.dnd_drop_performed if the drag-and-drop operation\\nended in an \\\"ask\\\" action, in which case the final wl_data_source.action\\nevent will happen immediately before wl_data_source.dnd_finished.\\n\\nCompositors may also change the selected action on the fly, mainly\\nin response to keyboard modifier changes during the drag-and-drop\\noperation.\\n\\nThe most recent action received is always the valid one. The chosen\\naction may change alongside negotiation (e.g. an \\\"ask\\\" action can turn\\ninto a \\\"move\\\" operation), so the effects of the final action must\\nalways be applied in wl_data_offer.dnd_finished.\\n\\nClients can trigger cursor surface changes from this point, so\\nthey reflect the current action.\\n\\nOnly available since version 3 of the interface\"]\n    Action {\n        dnd_action: u32,\n    },\n}","parent":null,"children":[{"krate":0,"index":1311},{"krate":0,"index":1313},{"krate":0,"index":1316},{"krate":0,"index":1318},{"krate":0,"index":1320},{"krate":0,"index":1322}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1339},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8458903,"byte_end":8458915,"line_start":2463,"line_end":2463,"column_start":16,"column_end":28},"name":"WlDataSource","qualname":"::generated::c_api::wl_data_source::WlDataSource","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1347},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8459257,"byte_end":8459270,"line_start":2473,"line_end":2473,"column_start":15,"column_end":28},"name":"RequestsTrait","qualname":"::generated::c_api::wl_data_source::RequestsTrait","value":"RequestsTrait","parent":null,"children":[{"krate":0,"index":1348},{"krate":0,"index":1349},{"krate":0,"index":1350}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1348},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8459465,"byte_end":8459470,"line_start":2475,"line_end":2475,"column_start":12,"column_end":17},"name":"offer","qualname":"::generated::c_api::wl_data_source::RequestsTrait::offer","value":"pub fn offer(&Self, String) -> ()","parent":{"krate":0,"index":1347},"children":[],"decl_id":null,"docs":"add an offered mime type","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1349},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8459690,"byte_end":8459697,"line_start":2477,"line_end":2477,"column_start":12,"column_end":19},"name":"destroy","qualname":"::generated::c_api::wl_data_source::RequestsTrait::destroy","value":"pub fn destroy(&Self) -> ()","parent":{"krate":0,"index":1347},"children":[],"decl_id":null,"docs":"destroy the data source","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1350},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8460450,"byte_end":8460461,"line_start":2479,"line_end":2479,"column_start":12,"column_end":23},"name":"set_actions","qualname":"::generated::c_api::wl_data_source::RequestsTrait::set_actions","value":"pub fn set_actions(&Self, u32) -> ()","parent":{"krate":0,"index":1347},"children":[],"decl_id":null,"docs":"set the available drag-and-drop actions","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1355},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8461125,"byte_end":8461140,"line_start":2500,"line_end":2500,"column_start":15,"column_end":30},"name":"REQ_OFFER_SINCE","qualname":"::generated::c_api::wl_data_source::REQ_OFFER_SINCE","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" The minimal object version supporting this request\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1356},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8461236,"byte_end":8461253,"line_start":2502,"line_end":2502,"column_start":15,"column_end":32},"name":"REQ_DESTROY_SINCE","qualname":"::generated::c_api::wl_data_source::REQ_DESTROY_SINCE","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" The minimal object version supporting this request\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1357},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8461349,"byte_end":8461370,"line_start":2504,"line_end":2504,"column_start":15,"column_end":36},"name":"REQ_SET_ACTIONS_SINCE","qualname":"::generated::c_api::wl_data_source::REQ_SET_ACTIONS_SINCE","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" The minimal object version supporting this request\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1358},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8461464,"byte_end":8461480,"line_start":2506,"line_end":2506,"column_start":15,"column_end":31},"name":"EVT_TARGET_SINCE","qualname":"::generated::c_api::wl_data_source::EVT_TARGET_SINCE","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" The minimal object version supporting this event\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1359},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8461574,"byte_end":8461588,"line_start":2508,"line_end":2508,"column_start":15,"column_end":29},"name":"EVT_SEND_SINCE","qualname":"::generated::c_api::wl_data_source::EVT_SEND_SINCE","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" The minimal object version supporting this event\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1360},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8461682,"byte_end":8461701,"line_start":2510,"line_end":2510,"column_start":15,"column_end":34},"name":"EVT_CANCELLED_SINCE","qualname":"::generated::c_api::wl_data_source::EVT_CANCELLED_SINCE","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" The minimal object version supporting this event\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1361},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8461795,"byte_end":8461823,"line_start":2512,"line_end":2512,"column_start":15,"column_end":43},"name":"EVT_DND_DROP_PERFORMED_SINCE","qualname":"::generated::c_api::wl_data_source::EVT_DND_DROP_PERFORMED_SINCE","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" The minimal object version supporting this event\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1362},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8461917,"byte_end":8461939,"line_start":2514,"line_end":2514,"column_start":15,"column_end":37},"name":"EVT_DND_FINISHED_SINCE","qualname":"::generated::c_api::wl_data_source::EVT_DND_FINISHED_SINCE","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" The minimal object version supporting this event\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1363},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8462033,"byte_end":8462049,"line_start":2516,"line_end":2516,"column_start":15,"column_end":31},"name":"EVT_ACTION_SINCE","qualname":"::generated::c_api::wl_data_source::EVT_ACTION_SINCE","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" The minimal object version supporting this event\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1364},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8462338,"byte_end":8462352,"line_start":2519,"line_end":2519,"column_start":9,"column_end":23},"name":"wl_data_device","qualname":"::generated::c_api::wl_data_device","value":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","parent":null,"children":[{"krate":0,"index":1365},{"krate":0,"index":1366},{"krate":0,"index":1367},{"krate":0,"index":1368},{"krate":0,"index":1369},{"krate":0,"index":1370},{"krate":0,"index":1371},{"krate":0,"index":4142},{"krate":0,"index":1372},{"krate":0,"index":1373},{"krate":0,"index":1374},{"krate":0,"index":1375},{"krate":0,"index":1376},{"krate":0,"index":1377},{"krate":0,"index":1378},{"krate":0,"index":1379},{"krate":0,"index":1380},{"krate":0,"index":1381},{"krate":0,"index":2921},{"krate":0,"index":2932},{"krate":0,"index":2930},{"krate":0,"index":2928},{"krate":0,"index":2925},{"krate":0,"index":2926},{"krate":0,"index":1382},{"krate":0,"index":1385},{"krate":0,"index":1396},{"krate":0,"index":1415},{"krate":0,"index":1434},{"krate":0,"index":1447},{"krate":0,"index":1449},{"krate":0,"index":1455},{"krate":0,"index":1459},{"krate":0,"index":1466},{"krate":0,"index":1467},{"krate":0,"index":1468},{"krate":0,"index":1469},{"krate":0,"index":1470},{"krate":0,"index":1471},{"krate":0,"index":1472},{"krate":0,"index":1473},{"krate":0,"index":1474}],"decl_id":null,"docs":"data transfer device","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2922},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8462766,"byte_end":8462770,"line_start":2530,"line_end":2530,"column_start":9,"column_end":13},"name":"Role","qualname":"::generated::c_api::wl_data_device::Error::Role","value":"Error::Role","parent":{"krate":0,"index":2921},"children":[],"decl_id":null,"docs":"given wl_surface has another role\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2921},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8462697,"byte_end":8462702,"line_start":2528,"line_end":2528,"column_start":14,"column_end":19},"name":"Error","qualname":"::generated::c_api::wl_data_device::Error","value":"pub enum Error {\n\n    #[doc = \"given wl_surface has another role\"]\n    Role = ,\n}","parent":null,"children":[{"krate":0,"index":2922}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"repr(u32)","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8462626,"byte_end":8462638,"line_start":2526,"line_end":2526,"column_start":5,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":1383},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8462814,"byte_end":8462822,"line_start":2533,"line_end":2533,"column_start":16,"column_end":24},"name":"from_raw","qualname":"<Error>::from_raw","value":"pub fn from_raw(u32) -> Option<Error>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1384},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8462986,"byte_end":8462992,"line_start":2539,"line_end":2539,"column_start":16,"column_end":22},"name":"to_raw","qualname":"<Error>::to_raw","value":"pub fn to_raw(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":1386},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8464418,"byte_end":8464427,"line_start":2545,"line_end":2545,"column_start":9,"column_end":18},"name":"StartDrag","qualname":"::generated::c_api::wl_data_device::Request::StartDrag","value":"Request::StartDrag { source, origin, icon, serial }","parent":{"krate":0,"index":1385},"children":[],"decl_id":null,"docs":"start drag-and-drop operation","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":1391},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8464874,"byte_end":8464886,"line_start":2552,"line_end":2552,"column_start":9,"column_end":21},"name":"SetSelection","qualname":"::generated::c_api::wl_data_device::Request::SetSelection","value":"Request::SetSelection { source, serial }","parent":{"krate":0,"index":1385},"children":[],"decl_id":null,"docs":"copy data to the selection","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1394},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8465209,"byte_end":8465216,"line_start":2557,"line_end":2557,"column_start":9,"column_end":16},"name":"Release","qualname":"::generated::c_api::wl_data_device::Request::Release","value":"Request::Release","parent":{"krate":0,"index":1385},"children":[],"decl_id":null,"docs":"destroy data device","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1385},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8463063,"byte_end":8463070,"line_start":2543,"line_end":2543,"column_start":14,"column_end":21},"name":"Request","qualname":"::generated::c_api::wl_data_device::Request","value":"pub enum Request {\n\n    #[doc =\n      \"start drag-and-drop operation\\n\\nThis request asks the compositor to start a drag-and-drop\\noperation on behalf of the client.\\n\\nThe source argument is the data source that provides the data\\nfor the eventual data transfer. If source is NULL, enter, leave\\nand motion events are sent only to the client that initiated the\\ndrag and the client is expected to handle the data passing\\ninternally.\\n\\nThe origin surface is the surface where the drag originates and\\nthe client must have an active implicit grab that matches the\\nserial.\\n\\nThe icon surface is an optional (can be NULL) surface that\\nprovides an icon to be moved around with the cursor.  Initially,\\nthe top-left corner of the icon surface is placed at the cursor\\nhotspot, but subsequent wl_surface.attach request can move the\\nrelative position. Attach requests must be confirmed with\\nwl_surface.commit as usual. The icon surface is given the role of\\na drag-and-drop icon. If the icon surface already has another role,\\nit raises a protocol error.\\n\\nThe current and pending input regions of the icon wl_surface are\\ncleared, and wl_surface.set_input_region is ignored until the\\nwl_surface is no longer used as the icon surface. When the use\\nas an icon ends, the current and pending input regions become\\nundefined, and the wl_surface is unmapped.\"]\n    StartDrag {\n        source: Option<Proxy<super::wl_data_source::WlDataSource>>,\n        origin: Proxy<super::wl_surface::WlSurface>,\n        icon: Option<Proxy<super::wl_surface::WlSurface>>,\n        serial: u32,\n    },\n\n    #[doc =\n      \"copy data to the selection\\n\\nThis request asks the compositor to set the selection\\nto the data from the source on behalf of the client.\\n\\nTo unset the selection, set the source to NULL.\"]\n    SetSelection {\n        source: Option<Proxy<super::wl_data_source::WlDataSource>>,\n        serial: u32,\n    },\n\n    #[doc =\n      \"destroy data device\\n\\nThis request destroys the data device.\\n\\nThis is a destructor, once sent this object cannot be used any longer.\\nOnly available since version 2 of the interface\"]\n    Release,\n}","parent":null,"children":[{"krate":0,"index":1386},{"krate":0,"index":1391},{"krate":0,"index":1394}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":1416},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8470289,"byte_end":8470298,"line_start":2686,"line_end":2686,"column_start":9,"column_end":18},"name":"DataOffer","qualname":"::generated::c_api::wl_data_device::Event::DataOffer","value":"Event::DataOffer { id }","parent":{"krate":0,"index":1415},"children":[],"decl_id":null,"docs":"introduce a new wl_data_offer","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":1418},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8470642,"byte_end":8470647,"line_start":2690,"line_end":2690,"column_start":9,"column_end":14},"name":"Enter","qualname":"::generated::c_api::wl_data_device::Event::Enter","value":"Event::Enter { serial, surface, x, y, id }","parent":{"krate":0,"index":1415},"children":[],"decl_id":null,"docs":"initiate drag-and-drop session","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1424},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8471082,"byte_end":8471087,"line_start":2698,"line_end":2698,"column_start":9,"column_end":14},"name":"Leave","qualname":"::generated::c_api::wl_data_device::Event::Leave","value":"Event::Leave","parent":{"krate":0,"index":1415},"children":[],"decl_id":null,"docs":"end drag-and-drop session","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":1426},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8471345,"byte_end":8471351,"line_start":2700,"line_end":2700,"column_start":9,"column_end":15},"name":"Motion","qualname":"::generated::c_api::wl_data_device::Event::Motion","value":"Event::Motion { time, x, y }","parent":{"krate":0,"index":1415},"children":[],"decl_id":null,"docs":"drag-and-drop session motion","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1430},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8472090,"byte_end":8472094,"line_start":2702,"line_end":2702,"column_start":9,"column_end":13},"name":"Drop","qualname":"::generated::c_api::wl_data_device::Event::Drop","value":"Event::Drop","parent":{"krate":0,"index":1415},"children":[],"decl_id":null,"docs":"end drag-and-drop session successfully","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":1432},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8472769,"byte_end":8472778,"line_start":2704,"line_end":2704,"column_start":9,"column_end":18},"name":"Selection","qualname":"::generated::c_api::wl_data_device::Event::Selection","value":"Event::Selection { id }","parent":{"krate":0,"index":1415},"children":[],"decl_id":null,"docs":"advertise new selection","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1415},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8469853,"byte_end":8469858,"line_start":2684,"line_end":2684,"column_start":14,"column_end":19},"name":"Event","qualname":"::generated::c_api::wl_data_device::Event","value":"pub enum Event {\n\n    #[doc =\n      \"introduce a new wl_data_offer\\n\\nThe data_offer event introduces a new wl_data_offer object,\\nwhich will subsequently be used in either the\\ndata_device.enter event (for drag-and-drop) or the\\ndata_device.selection event (for selections).  Immediately\\nfollowing the data_device_data_offer event, the new data_offer\\nobject will send out data_offer.offer events to describe the\\nmime types it offers.\"]\n    DataOffer {\n        id: NewProxy<super::wl_data_offer::WlDataOffer>,\n    },\n\n    #[doc =\n      \"initiate drag-and-drop session\\n\\nThis event is sent when an active drag-and-drop pointer enters\\na surface owned by the client.  The position of the pointer at\\nenter time is provided by the x and y arguments, in surface-local\\ncoordinates.\"]\n    Enter {\n        serial: u32,\n        surface: Proxy<super::wl_surface::WlSurface>,\n        x: f64,\n        y: f64,\n        id: Option<Proxy<super::wl_data_offer::WlDataOffer>>,\n    },\n\n    #[doc =\n      \"end drag-and-drop session\\n\\nThis event is sent when the drag-and-drop pointer leaves the\\nsurface and the session ends.  The client must destroy the\\nwl_data_offer introduced at enter time at this point.\"]\n    Leave,\n\n    #[doc =\n      \"drag-and-drop session motion\\n\\nThis event is sent when the drag-and-drop pointer moves within\\nthe currently focused surface. The new position of the pointer\\nis provided by the x and y arguments, in surface-local\\ncoordinates.\"]\n    Motion {\n        time: u32,\n        x: f64,\n        y: f64,\n    },\n\n    #[doc =\n      \"end drag-and-drop session successfully\\n\\nThe event is sent when a drag-and-drop operation is ended\\nbecause the implicit grab is removed.\\n\\nThe drag-and-drop destination is expected to honor the last action\\nreceived through wl_data_offer.action, if the resulting action is\\n\\\"copy\\\" or \\\"move\\\", the destination can still perform\\nwl_data_offer.receive requests, and is expected to end all\\ntransfers with a wl_data_offer.finish request.\\n\\nIf the resulting action is \\\"ask\\\", the action will not be considered\\nfinal. The drag-and-drop destination is expected to perform one last\\nwl_data_offer.set_actions request, or wl_data_offer.destroy in order\\nto cancel the operation.\"]\n    Drop,\n\n    #[doc =\n      \"advertise new selection\\n\\nThe selection event is sent out to notify the client of a new\\nwl_data_offer for the selection for this device.  The\\ndata_device.data_offer and the data_offer.offer events are\\nsent out immediately before this event to introduce the data\\noffer object.  The selection event is sent to a client\\nimmediately before receiving keyboard focus and when a new\\nselection is set while the client has keyboard focus.  The\\ndata_offer is valid until a new data_offer or NULL is received\\nor until the client loses keyboard focus.  The client must\\ndestroy the previous selection data_offer, if any, upon receiving\\nthis event.\"]\n    Selection {\n        id: Option<Proxy<super::wl_data_offer::WlDataOffer>>,\n    },\n}","parent":null,"children":[{"krate":0,"index":1416},{"krate":0,"index":1418},{"krate":0,"index":1424},{"krate":0,"index":1426},{"krate":0,"index":1430},{"krate":0,"index":1432}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1447},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8482074,"byte_end":8482086,"line_start":2952,"line_end":2952,"column_start":16,"column_end":28},"name":"WlDataDevice","qualname":"::generated::c_api::wl_data_device::WlDataDevice","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1455},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8482428,"byte_end":8482441,"line_start":2962,"line_end":2962,"column_start":15,"column_end":28},"name":"RequestsTrait","qualname":"::generated::c_api::wl_data_device::RequestsTrait","value":"RequestsTrait","parent":null,"children":[{"krate":0,"index":1456},{"krate":0,"index":1457},{"krate":0,"index":1458}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1456},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8483792,"byte_end":8483802,"line_start":2964,"line_end":2964,"column_start":12,"column_end":22},"name":"start_drag","qualname":"::generated::c_api::wl_data_device::RequestsTrait::start_drag","value":"pub fn start_drag(&Self, Option<&Proxy<super::wl_data_source::WlDataSource>>,\n                  &Proxy<super::wl_surface::WlSurface>,\n                  Option<&Proxy<super::wl_surface::WlSurface>>, u32) -> ()","parent":{"krate":0,"index":1455},"children":[],"decl_id":null,"docs":"start drag-and-drop operation","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1457},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8484279,"byte_end":8484292,"line_start":2972,"line_end":2972,"column_start":12,"column_end":25},"name":"set_selection","qualname":"::generated::c_api::wl_data_device::RequestsTrait::set_selection","value":"pub fn set_selection(&Self,\n                     Option<&Proxy<super::wl_data_source::WlDataSource>>, u32)\n-> ()","parent":{"krate":0,"index":1455},"children":[],"decl_id":null,"docs":"copy data to the selection","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1458},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8484674,"byte_end":8484681,"line_start":2978,"line_end":2978,"column_start":12,"column_end":19},"name":"release","qualname":"::generated::c_api::wl_data_device::RequestsTrait::release","value":"pub fn release(&Self) -> ()","parent":{"krate":0,"index":1455},"children":[],"decl_id":null,"docs":"destroy data device","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1466},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8485840,"byte_end":8485860,"line_start":3013,"line_end":3013,"column_start":15,"column_end":35},"name":"REQ_START_DRAG_SINCE","qualname":"::generated::c_api::wl_data_device::REQ_START_DRAG_SINCE","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" The minimal object version supporting this request\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1467},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8485956,"byte_end":8485979,"line_start":3015,"line_end":3015,"column_start":15,"column_end":38},"name":"REQ_SET_SELECTION_SINCE","qualname":"::generated::c_api::wl_data_device::REQ_SET_SELECTION_SINCE","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" The minimal object version supporting this request\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1468},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8486075,"byte_end":8486092,"line_start":3017,"line_end":3017,"column_start":15,"column_end":32},"name":"REQ_RELEASE_SINCE","qualname":"::generated::c_api::wl_data_device::REQ_RELEASE_SINCE","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" The minimal object version supporting this request\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1469},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8486186,"byte_end":8486206,"line_start":3019,"line_end":3019,"column_start":15,"column_end":35},"name":"EVT_DATA_OFFER_SINCE","qualname":"::generated::c_api::wl_data_device::EVT_DATA_OFFER_SINCE","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" The minimal object version supporting this event\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1470},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8486300,"byte_end":8486315,"line_start":3021,"line_end":3021,"column_start":15,"column_end":30},"name":"EVT_ENTER_SINCE","qualname":"::generated::c_api::wl_data_device::EVT_ENTER_SINCE","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" The minimal object version supporting this event\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1471},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8486409,"byte_end":8486424,"line_start":3023,"line_end":3023,"column_start":15,"column_end":30},"name":"EVT_LEAVE_SINCE","qualname":"::generated::c_api::wl_data_device::EVT_LEAVE_SINCE","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" The minimal object version supporting this event\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1472},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8486518,"byte_end":8486534,"line_start":3025,"line_end":3025,"column_start":15,"column_end":31},"name":"EVT_MOTION_SINCE","qualname":"::generated::c_api::wl_data_device::EVT_MOTION_SINCE","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" The minimal object version supporting this event\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1473},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8486628,"byte_end":8486642,"line_start":3027,"line_end":3027,"column_start":15,"column_end":29},"name":"EVT_DROP_SINCE","qualname":"::generated::c_api::wl_data_device::EVT_DROP_SINCE","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" The minimal object version supporting this event\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1474},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8486736,"byte_end":8486755,"line_start":3029,"line_end":3029,"column_start":15,"column_end":34},"name":"EVT_SELECTION_SINCE","qualname":"::generated::c_api::wl_data_device::EVT_SELECTION_SINCE","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" The minimal object version supporting this event\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1475},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8487356,"byte_end":8487378,"line_start":3032,"line_end":3032,"column_start":9,"column_end":31},"name":"wl_data_device_manager","qualname":"::generated::c_api::wl_data_device_manager","value":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","parent":null,"children":[{"krate":0,"index":1476},{"krate":0,"index":1477},{"krate":0,"index":1478},{"krate":0,"index":1479},{"krate":0,"index":1480},{"krate":0,"index":1481},{"krate":0,"index":1482},{"krate":0,"index":4170},{"krate":0,"index":1483},{"krate":0,"index":1484},{"krate":0,"index":1485},{"krate":0,"index":1486},{"krate":0,"index":1487},{"krate":0,"index":1488},{"krate":0,"index":1489},{"krate":0,"index":1490},{"krate":0,"index":1491},{"krate":0,"index":1492},{"krate":0,"index":2936},{"krate":0,"index":2958},{"krate":0,"index":2954},{"krate":0,"index":2955},{"krate":0,"index":2951},{"krate":0,"index":2952},{"krate":0,"index":2949},{"krate":0,"index":2943},{"krate":0,"index":2941},{"krate":0,"index":2938},{"krate":0,"index":2959},{"krate":0,"index":2967},{"krate":0,"index":2969},{"krate":0,"index":2971},{"krate":0,"index":2973},{"krate":0,"index":2975},{"krate":0,"index":2985},{"krate":0,"index":2988},{"krate":0,"index":2990},{"krate":0,"index":2993},{"krate":0,"index":2995},{"krate":0,"index":2998},{"krate":0,"index":3000},{"krate":0,"index":3003},{"krate":0,"index":3005},{"krate":0,"index":3008},{"krate":0,"index":3011},{"krate":0,"index":1493},{"krate":0,"index":1496},{"krate":0,"index":1502},{"krate":0,"index":1517},{"krate":0,"index":1518},{"krate":0,"index":1531},{"krate":0,"index":1533},{"krate":0,"index":1539},{"krate":0,"index":1544},{"krate":0,"index":1549},{"krate":0,"index":1550}],"decl_id":null,"docs":"data transfer interface","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2936},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8488755,"byte_end":8488764,"line_start":3039,"line_end":3039,"column_start":1108,"column_end":1117},"name":"DndAction","qualname":"::generated::c_api::wl_data_device_manager::DndAction","value":"DndAction {  }","parent":null,"children":[{"krate":0,"index":2937}],"decl_id":null,"docs":"drag and drop actions","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2976},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8488803,"byte_end":8488807,"line_start":3039,"line_end":3039,"column_start":1156,"column_end":1160},"name":"None","qualname":"::generated::c_api::wl_data_device_manager::DndAction::None","value":"DndAction","parent":{"krate":0,"index":2975},"children":[],"decl_id":null,"docs":"no action\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2977},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8488846,"byte_end":8488850,"line_start":3039,"line_end":3039,"column_start":1199,"column_end":1203},"name":"Copy","qualname":"::generated::c_api::wl_data_device_manager::DndAction::Copy","value":"DndAction","parent":{"krate":0,"index":2975},"children":[],"decl_id":null,"docs":"copy action\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2978},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8488889,"byte_end":8488893,"line_start":3039,"line_end":3039,"column_start":1242,"column_end":1246},"name":"Move","qualname":"::generated::c_api::wl_data_device_manager::DndAction::Move","value":"DndAction","parent":{"krate":0,"index":2975},"children":[],"decl_id":null,"docs":"move action\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2979},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8488931,"byte_end":8488934,"line_start":3039,"line_end":3039,"column_start":1284,"column_end":1287},"name":"Ask","qualname":"::generated::c_api::wl_data_device_manager::DndAction::Ask","value":"DndAction","parent":{"krate":0,"index":2975},"children":[],"decl_id":null,"docs":"ask action\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1494},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8488981,"byte_end":8488989,"line_start":3041,"line_end":3041,"column_start":16,"column_end":24},"name":"from_raw","qualname":"<DndAction>::from_raw","value":"pub fn from_raw(u32) -> Option<DndAction>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1495},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8489097,"byte_end":8489103,"line_start":3044,"line_end":3044,"column_start":16,"column_end":22},"name":"to_raw","qualname":"<DndAction>::to_raw","value":"pub fn to_raw(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":1497},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8489264,"byte_end":8489280,"line_start":3050,"line_end":3050,"column_start":9,"column_end":25},"name":"CreateDataSource","qualname":"::generated::c_api::wl_data_device_manager::Request::CreateDataSource","value":"Request::CreateDataSource { id }","parent":{"krate":0,"index":1496},"children":[],"decl_id":null,"docs":"create a new data source","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":1499},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8489452,"byte_end":8489465,"line_start":3054,"line_end":3054,"column_start":9,"column_end":22},"name":"GetDataDevice","qualname":"::generated::c_api::wl_data_device_manager::Request::GetDataDevice","value":"Request::GetDataDevice { id, seat }","parent":{"krate":0,"index":1496},"children":[],"decl_id":null,"docs":"create a new data device","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1496},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8489173,"byte_end":8489180,"line_start":3048,"line_end":3048,"column_start":14,"column_end":21},"name":"Request","qualname":"::generated::c_api::wl_data_device_manager::Request","value":"pub enum Request {\n\n    #[doc = \"create a new data source\\n\\nCreate a new data source.\"]\n    CreateDataSource {\n        id: Proxy<super::wl_data_source::WlDataSource>,\n    },\n\n    #[doc =\n      \"create a new data device\\n\\nCreate a new data device for a given seat.\"]\n    GetDataDevice {\n        id: Proxy<super::wl_data_device::WlDataDevice>,\n        seat: Proxy<super::wl_seat::WlSeat>,\n    },\n}","parent":null,"children":[{"krate":0,"index":1497},{"krate":0,"index":1499}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1517},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8492874,"byte_end":8492879,"line_start":3148,"line_end":3148,"column_start":14,"column_end":19},"name":"Event","qualname":"::generated::c_api::wl_data_device_manager::Event","value":"pub enum Event { }","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1531},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8494179,"byte_end":8494198,"line_start":3191,"line_end":3191,"column_start":16,"column_end":35},"name":"WlDataDeviceManager","qualname":"::generated::c_api::wl_data_device_manager::WlDataDeviceManager","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1539},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8494563,"byte_end":8494576,"line_start":3201,"line_end":3201,"column_start":15,"column_end":28},"name":"RequestsTrait","qualname":"::generated::c_api::wl_data_device_manager::RequestsTrait","value":"RequestsTrait","parent":null,"children":[{"krate":0,"index":1540},{"krate":0,"index":1542}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1540},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8494663,"byte_end":8494681,"line_start":3203,"line_end":3203,"column_start":12,"column_end":30},"name":"create_data_source","qualname":"::generated::c_api::wl_data_device_manager::RequestsTrait::create_data_source","value":"pub fn create_data_source<F>(&Self, F)\n-> Result<Proxy<super::wl_data_source::WlDataSource>, ()> where\nF: FnOnce(NewProxy<super::wl_data_source::WlDataSource>) ->\nProxy<super::wl_data_source::WlDataSource>","parent":{"krate":0,"index":1539},"children":[],"decl_id":null,"docs":"create a new data source","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1542},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8495063,"byte_end":8495078,"line_start":3212,"line_end":3212,"column_start":12,"column_end":27},"name":"get_data_device","qualname":"::generated::c_api::wl_data_device_manager::RequestsTrait::get_data_device","value":"pub fn get_data_device<F>(&Self, &Proxy<super::wl_seat::WlSeat>, F)\n-> Result<Proxy<super::wl_data_device::WlDataDevice>, ()> where\nF: FnOnce(NewProxy<super::wl_data_device::WlDataDevice>) ->\nProxy<super::wl_data_device::WlDataDevice>","parent":{"krate":0,"index":1539},"children":[],"decl_id":null,"docs":"create a new data device","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1549},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8496637,"byte_end":8496665,"line_start":3255,"line_end":3255,"column_start":15,"column_end":43},"name":"REQ_CREATE_DATA_SOURCE_SINCE","qualname":"::generated::c_api::wl_data_device_manager::REQ_CREATE_DATA_SOURCE_SINCE","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" The minimal object version supporting this request\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1550},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8496761,"byte_end":8496786,"line_start":3257,"line_end":3257,"column_start":15,"column_end":40},"name":"REQ_GET_DATA_DEVICE_SINCE","qualname":"::generated::c_api::wl_data_device_manager::REQ_GET_DATA_DEVICE_SINCE","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" The minimal object version supporting this request\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1551},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8497016,"byte_end":8497024,"line_start":3260,"line_end":3260,"column_start":9,"column_end":17},"name":"wl_shell","qualname":"::generated::c_api::wl_shell","value":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","parent":null,"children":[{"krate":0,"index":1552},{"krate":0,"index":1553},{"krate":0,"index":1554},{"krate":0,"index":1555},{"krate":0,"index":1556},{"krate":0,"index":1557},{"krate":0,"index":1558},{"krate":0,"index":4198},{"krate":0,"index":1559},{"krate":0,"index":1560},{"krate":0,"index":1561},{"krate":0,"index":1562},{"krate":0,"index":1563},{"krate":0,"index":1564},{"krate":0,"index":1565},{"krate":0,"index":1566},{"krate":0,"index":1567},{"krate":0,"index":1568},{"krate":0,"index":3037},{"krate":0,"index":3048},{"krate":0,"index":3046},{"krate":0,"index":3044},{"krate":0,"index":3041},{"krate":0,"index":3042},{"krate":0,"index":1569},{"krate":0,"index":1572},{"krate":0,"index":1576},{"krate":0,"index":1590},{"krate":0,"index":1591},{"krate":0,"index":1604},{"krate":0,"index":1606},{"krate":0,"index":1612},{"krate":0,"index":1615},{"krate":0,"index":1618}],"decl_id":null,"docs":"create desktop-style surfaces","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3038},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8497438,"byte_end":8497442,"line_start":3271,"line_end":3271,"column_start":9,"column_end":13},"name":"Role","qualname":"::generated::c_api::wl_shell::Error::Role","value":"Error::Role","parent":{"krate":0,"index":3037},"children":[],"decl_id":null,"docs":"given wl_surface has another role\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3037},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8497369,"byte_end":8497374,"line_start":3269,"line_end":3269,"column_start":14,"column_end":19},"name":"Error","qualname":"::generated::c_api::wl_shell::Error","value":"pub enum Error {\n\n    #[doc = \"given wl_surface has another role\"]\n    Role = ,\n}","parent":null,"children":[{"krate":0,"index":3038}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"repr(u32)","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8497298,"byte_end":8497310,"line_start":3267,"line_end":3267,"column_start":5,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":1570},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8497486,"byte_end":8497494,"line_start":3274,"line_end":3274,"column_start":16,"column_end":24},"name":"from_raw","qualname":"<Error>::from_raw","value":"pub fn from_raw(u32) -> Option<Error>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1571},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8497658,"byte_end":8497664,"line_start":3280,"line_end":3280,"column_start":16,"column_end":22},"name":"to_raw","qualname":"<Error>::to_raw","value":"pub fn to_raw(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":1573},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8498056,"byte_end":8498071,"line_start":3286,"line_end":3286,"column_start":9,"column_end":24},"name":"GetShellSurface","qualname":"::generated::c_api::wl_shell::Request::GetShellSurface","value":"Request::GetShellSurface { id, surface }","parent":{"krate":0,"index":1572},"children":[],"decl_id":null,"docs":"create a shell surface from a surface","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1572},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8497735,"byte_end":8497742,"line_start":3284,"line_end":3284,"column_start":14,"column_end":21},"name":"Request","qualname":"::generated::c_api::wl_shell::Request","value":"pub enum Request {\n\n    #[doc =\n      \"create a shell surface from a surface\\n\\nCreate a shell surface for an existing surface. This gives\\nthe wl_surface the role of a shell surface. If the wl_surface\\nalready has another role, it raises a protocol error.\\n\\nOnly one shell surface can be associated with a given surface.\"]\n    GetShellSurface {\n        id: Proxy<super::wl_shell_surface::WlShellSurface>,\n        surface: Proxy<super::wl_surface::WlSurface>,\n    },\n}","parent":null,"children":[{"krate":0,"index":1573}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1590},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8500472,"byte_end":8500477,"line_start":3353,"line_end":3353,"column_start":14,"column_end":19},"name":"Event","qualname":"::generated::c_api::wl_shell::Event","value":"pub enum Event { }","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1604},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8501777,"byte_end":8501784,"line_start":3396,"line_end":3396,"column_start":16,"column_end":23},"name":"WlShell","qualname":"::generated::c_api::wl_shell::WlShell","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1612},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8502109,"byte_end":8502122,"line_start":3406,"line_end":3406,"column_start":15,"column_end":28},"name":"RequestsTrait","qualname":"::generated::c_api::wl_shell::RequestsTrait","value":"RequestsTrait","parent":null,"children":[{"krate":0,"index":1613}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1613},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8502439,"byte_end":8502456,"line_start":3408,"line_end":3408,"column_start":12,"column_end":29},"name":"get_shell_surface","qualname":"::generated::c_api::wl_shell::RequestsTrait::get_shell_surface","value":"pub fn get_shell_surface<F>(&Self, &Proxy<super::wl_surface::WlSurface>, F)\n-> Result<Proxy<super::wl_shell_surface::WlShellSurface>, ()> where\nF: FnOnce(NewProxy<super::wl_shell_surface::WlShellSurface>) ->\nProxy<super::wl_shell_surface::WlShellSurface>","parent":{"krate":0,"index":1612},"children":[],"decl_id":null,"docs":"create a shell surface from a surface","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1618},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8503556,"byte_end":8503583,"line_start":3437,"line_end":3437,"column_start":15,"column_end":42},"name":"REQ_GET_SHELL_SURFACE_SINCE","qualname":"::generated::c_api::wl_shell::REQ_GET_SHELL_SURFACE_SINCE","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" The minimal object version supporting this request\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1619},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8504147,"byte_end":8504163,"line_start":3440,"line_end":3440,"column_start":9,"column_end":25},"name":"wl_shell_surface","qualname":"::generated::c_api::wl_shell_surface","value":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","parent":null,"children":[{"krate":0,"index":1620},{"krate":0,"index":1621},{"krate":0,"index":1622},{"krate":0,"index":1623},{"krate":0,"index":1624},{"krate":0,"index":1625},{"krate":0,"index":1626},{"krate":0,"index":4226},{"krate":0,"index":1627},{"krate":0,"index":1628},{"krate":0,"index":1629},{"krate":0,"index":1630},{"krate":0,"index":1631},{"krate":0,"index":1632},{"krate":0,"index":1633},{"krate":0,"index":1634},{"krate":0,"index":1635},{"krate":0,"index":1636},{"krate":0,"index":3049},{"krate":0,"index":3071},{"krate":0,"index":3067},{"krate":0,"index":3068},{"krate":0,"index":3064},{"krate":0,"index":3065},{"krate":0,"index":3062},{"krate":0,"index":3056},{"krate":0,"index":3054},{"krate":0,"index":3051},{"krate":0,"index":3072},{"krate":0,"index":3085},{"krate":0,"index":3087},{"krate":0,"index":3089},{"krate":0,"index":3091},{"krate":0,"index":3093},{"krate":0,"index":3108},{"krate":0,"index":3111},{"krate":0,"index":3113},{"krate":0,"index":3116},{"krate":0,"index":3118},{"krate":0,"index":3121},{"krate":0,"index":3123},{"krate":0,"index":3126},{"krate":0,"index":3128},{"krate":0,"index":3131},{"krate":0,"index":3134},{"krate":0,"index":1637},{"krate":0,"index":3175},{"krate":0,"index":3197},{"krate":0,"index":3193},{"krate":0,"index":3194},{"krate":0,"index":3190},{"krate":0,"index":3191},{"krate":0,"index":3188},{"krate":0,"index":3182},{"krate":0,"index":3180},{"krate":0,"index":3177},{"krate":0,"index":3198},{"krate":0,"index":3203},{"krate":0,"index":3205},{"krate":0,"index":3207},{"krate":0,"index":3209},{"krate":0,"index":3211},{"krate":0,"index":3218},{"krate":0,"index":3221},{"krate":0,"index":3223},{"krate":0,"index":3226},{"krate":0,"index":3228},{"krate":0,"index":3231},{"krate":0,"index":3233},{"krate":0,"index":3236},{"krate":0,"index":3238},{"krate":0,"index":3241},{"krate":0,"index":3244},{"krate":0,"index":1640},{"krate":0,"index":3261},{"krate":0,"index":3281},{"krate":0,"index":3279},{"krate":0,"index":3277},{"krate":0,"index":3274},{"krate":0,"index":3275},{"krate":0,"index":1643},{"krate":0,"index":1646},{"krate":0,"index":1680},{"krate":0,"index":1705},{"krate":0,"index":1714},{"krate":0,"index":1727},{"krate":0,"index":1729},{"krate":0,"index":1735},{"krate":0,"index":1746},{"krate":0,"index":1759},{"krate":0,"index":1760},{"krate":0,"index":1761},{"krate":0,"index":1762},{"krate":0,"index":1763},{"krate":0,"index":1764},{"krate":0,"index":1765},{"krate":0,"index":1766},{"krate":0,"index":1767},{"krate":0,"index":1768},{"krate":0,"index":1769},{"krate":0,"index":1770},{"krate":0,"index":1771}],"decl_id":null,"docs":"desktop-style metadata interface","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3049},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8504703,"byte_end":8504709,"line_start":3447,"line_end":3447,"column_start":271,"column_end":277},"name":"Resize","qualname":"::generated::c_api::wl_shell_surface::Resize","value":"Resize {  }","parent":null,"children":[{"krate":0,"index":3050}],"decl_id":null,"docs":"edge values for resizing","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3094},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8504746,"byte_end":8504750,"line_start":3447,"line_end":3447,"column_start":314,"column_end":318},"name":"None","qualname":"::generated::c_api::wl_shell_surface::Resize::None","value":"Resize","parent":{"krate":0,"index":3093},"children":[],"decl_id":null,"docs":"no edge\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3095},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8504786,"byte_end":8504789,"line_start":3447,"line_end":3447,"column_start":354,"column_end":357},"name":"Top","qualname":"::generated::c_api::wl_shell_surface::Resize::Top","value":"Resize","parent":{"krate":0,"index":3093},"children":[],"decl_id":null,"docs":"top edge\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3096},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8504828,"byte_end":8504834,"line_start":3447,"line_end":3447,"column_start":396,"column_end":402},"name":"Bottom","qualname":"::generated::c_api::wl_shell_surface::Resize::Bottom","value":"Resize","parent":{"krate":0,"index":3093},"children":[],"decl_id":null,"docs":"bottom edge\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3097},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8504871,"byte_end":8504875,"line_start":3447,"line_end":3447,"column_start":439,"column_end":443},"name":"Left","qualname":"::generated::c_api::wl_shell_surface::Resize::Left","value":"Resize","parent":{"krate":0,"index":3093},"children":[],"decl_id":null,"docs":"left edge\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3098},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8504921,"byte_end":8504928,"line_start":3447,"line_end":3447,"column_start":489,"column_end":496},"name":"TopLeft","qualname":"::generated::c_api::wl_shell_surface::Resize::TopLeft","value":"Resize","parent":{"krate":0,"index":3093},"children":[],"decl_id":null,"docs":"top and left edges\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3099},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8504977,"byte_end":8504987,"line_start":3447,"line_end":3447,"column_start":545,"column_end":555},"name":"BottomLeft","qualname":"::generated::c_api::wl_shell_surface::Resize::BottomLeft","value":"Resize","parent":{"krate":0,"index":3093},"children":[],"decl_id":null,"docs":"bottom and left edges\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3100},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8505025,"byte_end":8505030,"line_start":3447,"line_end":3447,"column_start":593,"column_end":598},"name":"Right","qualname":"::generated::c_api::wl_shell_surface::Resize::Right","value":"Resize","parent":{"krate":0,"index":3093},"children":[],"decl_id":null,"docs":"right edge\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3101},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8505077,"byte_end":8505085,"line_start":3447,"line_end":3447,"column_start":645,"column_end":653},"name":"TopRight","qualname":"::generated::c_api::wl_shell_surface::Resize::TopRight","value":"Resize","parent":{"krate":0,"index":3093},"children":[],"decl_id":null,"docs":"top and right edges\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3102},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8505135,"byte_end":8505146,"line_start":3447,"line_end":3447,"column_start":703,"column_end":714},"name":"BottomRight","qualname":"::generated::c_api::wl_shell_surface::Resize::BottomRight","value":"Resize","parent":{"krate":0,"index":3093},"children":[],"decl_id":null,"docs":"bottom and right edges\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1638},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8505191,"byte_end":8505199,"line_start":3449,"line_end":3449,"column_start":16,"column_end":24},"name":"from_raw","qualname":"<Resize>::from_raw","value":"pub fn from_raw(u32) -> Option<Resize>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1639},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8505301,"byte_end":8505307,"line_start":3452,"line_end":3452,"column_start":16,"column_end":22},"name":"to_raw","qualname":"<Resize>::to_raw","value":"pub fn to_raw(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3175},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8505552,"byte_end":8505561,"line_start":3456,"line_end":3456,"column_start":189,"column_end":198},"name":"Transient","qualname":"::generated::c_api::wl_shell_surface::Transient","value":"Transient {  }","parent":null,"children":[{"krate":0,"index":3176}],"decl_id":null,"docs":"details of transient behaviour","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3212},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8505616,"byte_end":8505624,"line_start":3456,"line_end":3456,"column_start":253,"column_end":261},"name":"Inactive","qualname":"::generated::c_api::wl_shell_surface::Transient::Inactive","value":"Transient","parent":{"krate":0,"index":3211},"children":[],"decl_id":null,"docs":"do not set keyboard focus\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1641},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8505671,"byte_end":8505679,"line_start":3458,"line_end":3458,"column_start":16,"column_end":24},"name":"from_raw","qualname":"<Transient>::from_raw","value":"pub fn from_raw(u32) -> Option<Transient>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1642},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8505787,"byte_end":8505793,"line_start":3461,"line_end":3461,"column_start":16,"column_end":22},"name":"to_raw","qualname":"<Transient>::to_raw","value":"pub fn to_raw(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3262},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8506259,"byte_end":8506266,"line_start":3470,"line_end":3470,"column_start":9,"column_end":16},"name":"Default","qualname":"::generated::c_api::wl_shell_surface::FullscreenMethod::Default","value":"FullscreenMethod::Default","parent":{"krate":0,"index":3261},"children":[],"decl_id":null,"docs":"no preference, apply default policy\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3265},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8506363,"byte_end":8506368,"line_start":3472,"line_end":3472,"column_start":9,"column_end":14},"name":"Scale","qualname":"::generated::c_api::wl_shell_surface::FullscreenMethod::Scale","value":"FullscreenMethod::Scale","parent":{"krate":0,"index":3261},"children":[],"decl_id":null,"docs":"scale, preserve the surface's aspect ratio and center on output\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3268},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8506513,"byte_end":8506519,"line_start":3474,"line_end":3474,"column_start":9,"column_end":15},"name":"Driver","qualname":"::generated::c_api::wl_shell_surface::FullscreenMethod::Driver","value":"FullscreenMethod::Driver","parent":{"krate":0,"index":3261},"children":[],"decl_id":null,"docs":"switch output mode to the smallest mode that can fit the surface, add black borders to compensate size mismatch\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3271},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8506633,"byte_end":8506637,"line_start":3476,"line_end":3476,"column_start":9,"column_end":13},"name":"Fill","qualname":"::generated::c_api::wl_shell_surface::FullscreenMethod::Fill","value":"FullscreenMethod::Fill","parent":{"krate":0,"index":3261},"children":[],"decl_id":null,"docs":"no upscaling, center on output and add black borders to compensate size mismatch\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3261},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8506177,"byte_end":8506193,"line_start":3468,"line_end":3468,"column_start":14,"column_end":30},"name":"FullscreenMethod","qualname":"::generated::c_api::wl_shell_surface::FullscreenMethod","value":"pub enum FullscreenMethod {\n\n    #[doc = \"no preference, apply default policy\"]\n    Default = ,\n\n    #[doc = \"scale, preserve the surface's aspect ratio and center on output\"]\n    Scale = ,\n\n    #[doc =\n      \"switch output mode to the smallest mode that can fit the surface, add black borders to compensate size mismatch\"]\n    Driver = ,\n\n    #[doc =\n      \"no upscaling, center on output and add black borders to compensate size mismatch\"]\n    Fill = ,\n}","parent":null,"children":[{"krate":0,"index":3262},{"krate":0,"index":3265},{"krate":0,"index":3268},{"krate":0,"index":3271}],"decl_id":null,"docs":"different method to set the surface fullscreen","sig":null,"attributes":[{"value":"repr(u32)","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8506106,"byte_end":8506118,"line_start":3466,"line_end":3466,"column_start":5,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":1644},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8506692,"byte_end":8506700,"line_start":3479,"line_end":3479,"column_start":16,"column_end":24},"name":"from_raw","qualname":"<FullscreenMethod>::from_raw","value":"pub fn from_raw(u32) -> Option<FullscreenMethod>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1645},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8507045,"byte_end":8507051,"line_start":3488,"line_end":3488,"column_start":16,"column_end":22},"name":"to_raw","qualname":"<FullscreenMethod>::to_raw","value":"pub fn to_raw(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":1647},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8507287,"byte_end":8507291,"line_start":3494,"line_end":3494,"column_start":9,"column_end":13},"name":"Pong","qualname":"::generated::c_api::wl_shell_surface::Request::Pong","value":"Request::Pong { serial }","parent":{"krate":0,"index":1646},"children":[],"decl_id":null,"docs":"respond to a ping event","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":1649},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8507583,"byte_end":8507587,"line_start":3496,"line_end":3496,"column_start":9,"column_end":13},"name":"Move","qualname":"::generated::c_api::wl_shell_surface::Request::Move","value":"Request::Move { seat, serial }","parent":{"krate":0,"index":1646},"children":[],"decl_id":null,"docs":"start an interactive move","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":1652},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8507957,"byte_end":8507963,"line_start":3501,"line_end":3501,"column_start":9,"column_end":15},"name":"Resize","qualname":"::generated::c_api::wl_shell_surface::Request::Resize","value":"Request::Resize { seat, serial, edges }","parent":{"krate":0,"index":1646},"children":[],"decl_id":null,"docs":"start an interactive resize","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1656},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8508248,"byte_end":8508259,"line_start":3507,"line_end":3507,"column_start":9,"column_end":20},"name":"SetToplevel","qualname":"::generated::c_api::wl_shell_surface::Request::SetToplevel","value":"Request::SetToplevel","parent":{"krate":0,"index":1646},"children":[],"decl_id":null,"docs":"make the surface a toplevel surface","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":1658},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8508619,"byte_end":8508631,"line_start":3509,"line_end":3509,"column_start":9,"column_end":21},"name":"SetTransient","qualname":"::generated::c_api::wl_shell_surface::Request::SetTransient","value":"Request::SetTransient { parent, x, y, flags }","parent":{"krate":0,"index":1646},"children":[],"decl_id":null,"docs":"make the surface a transient surface","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":1663},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8510387,"byte_end":8510400,"line_start":3516,"line_end":3516,"column_start":9,"column_end":22},"name":"SetFullscreen","qualname":"::generated::c_api::wl_shell_surface::Request::SetFullscreen","value":"Request::SetFullscreen { method, framerate, output }","parent":{"krate":0,"index":1646},"children":[],"decl_id":null,"docs":"make the surface a fullscreen surface","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":1667},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8511358,"byte_end":8511366,"line_start":3522,"line_end":3522,"column_start":9,"column_end":17},"name":"SetPopup","qualname":"::generated::c_api::wl_shell_surface::Request::SetPopup","value":"Request::SetPopup { seat, serial, parent, x, y, flags }","parent":{"krate":0,"index":1646},"children":[],"decl_id":null,"docs":"make the surface a popup surface","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":1674},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8512376,"byte_end":8512388,"line_start":3531,"line_end":3531,"column_start":9,"column_end":21},"name":"SetMaximized","qualname":"::generated::c_api::wl_shell_surface::Request::SetMaximized","value":"Request::SetMaximized { output }","parent":{"krate":0,"index":1646},"children":[],"decl_id":null,"docs":"make the surface a maximized surface","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":1676},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8512730,"byte_end":8512738,"line_start":3535,"line_end":3535,"column_start":9,"column_end":17},"name":"SetTitle","qualname":"::generated::c_api::wl_shell_surface::Request::SetTitle","value":"Request::SetTitle { title }","parent":{"krate":0,"index":1646},"children":[],"decl_id":null,"docs":"set surface title","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":1678},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8513079,"byte_end":8513087,"line_start":3537,"line_end":3537,"column_start":9,"column_end":17},"name":"SetClass","qualname":"::generated::c_api::wl_shell_surface::Request::SetClass","value":"Request::SetClass { class_ }","parent":{"krate":0,"index":1646},"children":[],"decl_id":null,"docs":"set surface class","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1646},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8507122,"byte_end":8507129,"line_start":3492,"line_end":3492,"column_start":14,"column_end":21},"name":"Request","qualname":"::generated::c_api::wl_shell_surface::Request","value":"pub enum Request {\n\n    #[doc =\n      \"respond to a ping event\\n\\nA client must respond to a ping event with a pong request or\\nthe client may be deemed unresponsive.\"]\n    Pong {\n        serial: u32,\n    },\n\n    #[doc =\n      \"start an interactive move\\n\\nStart a pointer-driven move of the surface.\\n\\nThis request must be used in response to a button press event.\\nThe server may ignore move requests depending on the state of\\nthe surface (e.g. fullscreen or maximized).\"]\n    Move {\n        seat: Proxy<super::wl_seat::WlSeat>,\n        serial: u32,\n    },\n\n    #[doc =\n      \"start an interactive resize\\n\\nStart a pointer-driven resizing of the surface.\\n\\nThis request must be used in response to a button press event.\\nThe server may ignore resize requests depending on the state of\\nthe surface (e.g. fullscreen or maximized).\"]\n    Resize {\n        seat: Proxy<super::wl_seat::WlSeat>,\n        serial: u32,\n        edges: Resize,\n    },\n\n    #[doc =\n      \"make the surface a toplevel surface\\n\\nMap the surface as a toplevel surface.\\n\\nA toplevel surface is not fullscreen, maximized or transient.\"]\n    SetToplevel,\n\n    #[doc =\n      \"make the surface a transient surface\\n\\nMap the surface relative to an existing surface.\\n\\nThe x and y arguments specify the location of the upper left\\ncorner of the surface relative to the upper left corner of the\\nparent surface, in surface-local coordinates.\\n\\nThe flags argument controls details of the transient behaviour.\"]\n    SetTransient {\n        parent: Proxy<super::wl_surface::WlSurface>,\n        x: i32,\n        y: i32,\n        flags: Transient,\n    },\n\n    #[doc =\n      \"make the surface a fullscreen surface\\n\\nMap the surface as a fullscreen surface.\\n\\nIf an output parameter is given then the surface will be made\\nfullscreen on that output. If the client does not specify the\\noutput then the compositor will apply its policy - usually\\nchoosing the output on which the surface has the biggest surface\\narea.\\n\\nThe client may specify a method to resolve a size conflict\\nbetween the output size and the surface size - this is provided\\nthrough the method parameter.\\n\\nThe framerate parameter is used only when the method is set\\nto \\\"driver\\\", to indicate the preferred framerate. A value of 0\\nindicates that the client does not care about framerate.  The\\nframerate is specified in mHz, that is framerate of 60000 is 60Hz.\\n\\nA method of \\\"scale\\\" or \\\"driver\\\" implies a scaling operation of\\nthe surface, either via a direct scaling operation or a change of\\nthe output mode. This will override any kind of output scaling, so\\nthat mapping a surface with a buffer size equal to the mode can\\nfill the screen independent of buffer_scale.\\n\\nA method of \\\"fill\\\" means we don't scale up the buffer, however\\nany output scale is applied. This means that you may run into\\nan edge case where the application maps a buffer with the same\\nsize of the output mode but buffer_scale 1 (thus making a\\nsurface larger than the output). In this case it is allowed to\\ndownscale the results to fit the screen.\\n\\nThe compositor must reply to this request with a configure event\\nwith the dimensions for the output on which the surface will\\nbe made fullscreen.\"]\n    SetFullscreen {\n        method: FullscreenMethod,\n        framerate: u32,\n        output: Option<Proxy<super::wl_output::WlOutput>>,\n    },\n\n    #[doc =\n      \"make the surface a popup surface\\n\\nMap the surface as a popup.\\n\\nA popup surface is a transient surface with an added pointer\\ngrab.\\n\\nAn existing implicit grab will be changed to owner-events mode,\\nand the popup grab will continue after the implicit grab ends\\n(i.e. releasing the mouse button does not cause the popup to\\nbe unmapped).\\n\\nThe popup grab continues until the window is destroyed or a\\nmouse button is pressed in any other client's window. A click\\nin any of the client's surfaces is reported as normal, however,\\nclicks in other clients' surfaces will be discarded and trigger\\nthe callback.\\n\\nThe x and y arguments specify the location of the upper left\\ncorner of the surface relative to the upper left corner of the\\nparent surface, in surface-local coordinates.\"]\n    SetPopup {\n        seat: Proxy<super::wl_seat::WlSeat>,\n        serial: u32,\n        parent: Proxy<super::wl_surface::WlSurface>,\n        x: i32,\n        y: i32,\n        flags: Transient,\n    },\n\n    #[doc =\n      \"make the surface a maximized surface\\n\\nMap the surface as a maximized surface.\\n\\nIf an output parameter is given then the surface will be\\nmaximized on that output. If the client does not specify the\\noutput then the compositor will apply its policy - usually\\nchoosing the output on which the surface has the biggest surface\\narea.\\n\\nThe compositor will reply with a configure event telling\\nthe expected new surface size. The operation is completed\\non the next buffer attach to this surface.\\n\\nA maximized surface typically fills the entire output it is\\nbound to, except for desktop elements such as panels. This is\\nthe main difference between a maximized shell surface and a\\nfullscreen shell surface.\\n\\nThe details depend on the compositor implementation.\"]\n    SetMaximized {\n        output: Option<Proxy<super::wl_output::WlOutput>>,\n    },\n\n    #[doc =\n      \"set surface title\\n\\nSet a short title for the surface.\\n\\nThis string may be used to identify the surface in a task bar,\\nwindow list, or other user interface elements provided by the\\ncompositor.\\n\\nThe string must be encoded in UTF-8.\"]\n    SetTitle {\n        title: String,\n    },\n\n    #[doc =\n      \"set surface class\\n\\nSet a class for the surface.\\n\\nThe surface class identifies the general class of applications\\nto which the surface belongs. A common convention is to use the\\nfile name (or the full path if it is a non-standard location) of\\nthe application's .desktop file as the class.\"]\n    SetClass {\n        class_: String,\n    },\n}","parent":null,"children":[{"krate":0,"index":1647},{"krate":0,"index":1649},{"krate":0,"index":1652},{"krate":0,"index":1656},{"krate":0,"index":1658},{"krate":0,"index":1663},{"krate":0,"index":1667},{"krate":0,"index":1674},{"krate":0,"index":1676},{"krate":0,"index":1678}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":1706},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8525059,"byte_end":8525063,"line_start":3847,"line_end":3847,"column_start":9,"column_end":13},"name":"Ping","qualname":"::generated::c_api::wl_shell_surface::Event::Ping","value":"Event::Ping { serial }","parent":{"krate":0,"index":1705},"children":[],"decl_id":null,"docs":"ping client","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":1708},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8525801,"byte_end":8525810,"line_start":3849,"line_end":3849,"column_start":9,"column_end":18},"name":"Configure","qualname":"::generated::c_api::wl_shell_surface::Event::Configure","value":"Event::Configure { edges, width, height }","parent":{"krate":0,"index":1705},"children":[],"decl_id":null,"docs":"suggest resize","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1712},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8526120,"byte_end":8526129,"line_start":3855,"line_end":3855,"column_start":9,"column_end":18},"name":"PopupDone","qualname":"::generated::c_api::wl_shell_surface::Event::PopupDone","value":"Event::PopupDone","parent":{"krate":0,"index":1705},"children":[],"decl_id":null,"docs":"popup interaction is done","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1705},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8524886,"byte_end":8524891,"line_start":3845,"line_end":3845,"column_start":14,"column_end":19},"name":"Event","qualname":"::generated::c_api::wl_shell_surface::Event","value":"pub enum Event {\n\n    #[doc =\n      \"ping client\\n\\nPing a client to check if it is receiving events and sending\\nrequests. A client is expected to reply with a pong request.\"]\n    Ping {\n        serial: u32,\n    },\n\n    #[doc =\n      \"suggest resize\\n\\nThe configure event asks the client to resize its surface.\\n\\nThe size is a hint, in the sense that the client is free to\\nignore it if it doesn't resize, pick a smaller size (to\\nsatisfy aspect ratio or resize in steps of NxM pixels).\\n\\nThe edges parameter provides a hint about how the surface\\nwas resized. The client may use this information to decide\\nhow to adjust its content to the new size (e.g. a scrolling\\narea might adjust its content position to leave the viewable\\ncontent unmoved).\\n\\nThe client is free to dismiss all but the last configure\\nevent it received.\\n\\nThe width and height arguments specify the size of the window\\nin surface-local coordinates.\"]\n    Configure {\n        edges: Resize,\n        width: i32,\n        height: i32,\n    },\n\n    #[doc =\n      \"popup interaction is done\\n\\nThe popup_done event is sent out when a popup grab is broken,\\nthat is, when the user clicks a surface that doesn't belong\\nto the client owning the popup surface.\"]\n    PopupDone,\n}","parent":null,"children":[{"krate":0,"index":1706},{"krate":0,"index":1708},{"krate":0,"index":1712}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1727},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8530317,"byte_end":8530331,"line_start":3977,"line_end":3977,"column_start":16,"column_end":30},"name":"WlShellSurface","qualname":"::generated::c_api::wl_shell_surface::WlShellSurface","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1735},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8530679,"byte_end":8530692,"line_start":3987,"line_end":3987,"column_start":15,"column_end":28},"name":"RequestsTrait","qualname":"::generated::c_api::wl_shell_surface::RequestsTrait","value":"RequestsTrait","parent":null,"children":[{"krate":0,"index":1736},{"krate":0,"index":1737},{"krate":0,"index":1738},{"krate":0,"index":1739},{"krate":0,"index":1740},{"krate":0,"index":1741},{"krate":0,"index":1742},{"krate":0,"index":1743},{"krate":0,"index":1744},{"krate":0,"index":1745}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1736},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8530853,"byte_end":8530857,"line_start":3989,"line_end":3989,"column_start":12,"column_end":16},"name":"pong","qualname":"::generated::c_api::wl_shell_surface::RequestsTrait::pong","value":"pub fn pong(&Self, u32) -> ()","parent":{"krate":0,"index":1735},"children":[],"decl_id":null,"docs":"respond to a ping event","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1737},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8531162,"byte_end":8531167,"line_start":3991,"line_end":3991,"column_start":12,"column_end":17},"name":"_move","qualname":"::generated::c_api::wl_shell_surface::RequestsTrait::_move","value":"pub fn _move(&Self, &Proxy<super::wl_seat::WlSeat>, u32) -> ()","parent":{"krate":0,"index":1735},"children":[],"decl_id":null,"docs":"start an interactive move","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1738},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8531518,"byte_end":8531524,"line_start":3993,"line_end":3993,"column_start":12,"column_end":18},"name":"resize","qualname":"::generated::c_api::wl_shell_surface::RequestsTrait::resize","value":"pub fn resize(&Self, &Proxy<super::wl_seat::WlSeat>, u32, Resize) -> ()","parent":{"krate":0,"index":1735},"children":[],"decl_id":null,"docs":"start an interactive resize","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1739},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8531778,"byte_end":8531790,"line_start":3995,"line_end":3995,"column_start":12,"column_end":24},"name":"set_toplevel","qualname":"::generated::c_api::wl_shell_surface::RequestsTrait::set_toplevel","value":"pub fn set_toplevel(&Self) -> ()","parent":{"krate":0,"index":1735},"children":[],"decl_id":null,"docs":"make the surface a toplevel surface","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1740},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8532166,"byte_end":8532179,"line_start":3997,"line_end":3997,"column_start":12,"column_end":25},"name":"set_transient","qualname":"::generated::c_api::wl_shell_surface::RequestsTrait::set_transient","value":"pub fn set_transient(&Self, &Proxy<super::wl_surface::WlSurface>, i32, i32,\n                     Transient) -> ()","parent":{"krate":0,"index":1735},"children":[],"decl_id":null,"docs":"make the surface a transient surface","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1741},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8533963,"byte_end":8533977,"line_start":4005,"line_end":4005,"column_start":12,"column_end":26},"name":"set_fullscreen","qualname":"::generated::c_api::wl_shell_surface::RequestsTrait::set_fullscreen","value":"pub fn set_fullscreen(&Self, FullscreenMethod, u32,\n                      Option<&Proxy<super::wl_output::WlOutput>>) -> ()","parent":{"krate":0,"index":1735},"children":[],"decl_id":null,"docs":"make the surface a fullscreen surface","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1742},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8534963,"byte_end":8534972,"line_start":4012,"line_end":4012,"column_start":12,"column_end":21},"name":"set_popup","qualname":"::generated::c_api::wl_shell_surface::RequestsTrait::set_popup","value":"pub fn set_popup(&Self, &Proxy<super::wl_seat::WlSeat>, u32,\n                 &Proxy<super::wl_surface::WlSurface>, i32, i32, Transient)\n-> ()","parent":{"krate":0,"index":1735},"children":[],"decl_id":null,"docs":"make the surface a popup surface","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1743},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8536011,"byte_end":8536024,"line_start":4022,"line_end":4022,"column_start":12,"column_end":25},"name":"set_maximized","qualname":"::generated::c_api::wl_shell_surface::RequestsTrait::set_maximized","value":"pub fn set_maximized(&Self, Option<&Proxy<super::wl_output::WlOutput>>) -> ()","parent":{"krate":0,"index":1735},"children":[],"decl_id":null,"docs":"make the surface a maximized surface","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1744},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8536359,"byte_end":8536368,"line_start":4024,"line_end":4024,"column_start":12,"column_end":21},"name":"set_title","qualname":"::generated::c_api::wl_shell_surface::RequestsTrait::set_title","value":"pub fn set_title(&Self, String) -> ()","parent":{"krate":0,"index":1735},"children":[],"decl_id":null,"docs":"set surface title","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1745},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8536722,"byte_end":8536731,"line_start":4026,"line_end":4026,"column_start":12,"column_end":21},"name":"set_class","qualname":"::generated::c_api::wl_shell_surface::RequestsTrait::set_class","value":"pub fn set_class(&Self, String) -> ()","parent":{"krate":0,"index":1735},"children":[],"decl_id":null,"docs":"set surface class","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1759},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8539595,"byte_end":8539609,"line_start":4115,"line_end":4115,"column_start":15,"column_end":29},"name":"REQ_PONG_SINCE","qualname":"::generated::c_api::wl_shell_surface::REQ_PONG_SINCE","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" The minimal object version supporting this request\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1760},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8539705,"byte_end":8539719,"line_start":4117,"line_end":4117,"column_start":15,"column_end":29},"name":"REQ_MOVE_SINCE","qualname":"::generated::c_api::wl_shell_surface::REQ_MOVE_SINCE","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" The minimal object version supporting this request\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1761},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8539815,"byte_end":8539831,"line_start":4119,"line_end":4119,"column_start":15,"column_end":31},"name":"REQ_RESIZE_SINCE","qualname":"::generated::c_api::wl_shell_surface::REQ_RESIZE_SINCE","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" The minimal object version supporting this request\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1762},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8539927,"byte_end":8539949,"line_start":4121,"line_end":4121,"column_start":15,"column_end":37},"name":"REQ_SET_TOPLEVEL_SINCE","qualname":"::generated::c_api::wl_shell_surface::REQ_SET_TOPLEVEL_SINCE","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" The minimal object version supporting this request\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1763},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8540045,"byte_end":8540068,"line_start":4123,"line_end":4123,"column_start":15,"column_end":38},"name":"REQ_SET_TRANSIENT_SINCE","qualname":"::generated::c_api::wl_shell_surface::REQ_SET_TRANSIENT_SINCE","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" The minimal object version supporting this request\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1764},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8540164,"byte_end":8540188,"line_start":4125,"line_end":4125,"column_start":15,"column_end":39},"name":"REQ_SET_FULLSCREEN_SINCE","qualname":"::generated::c_api::wl_shell_surface::REQ_SET_FULLSCREEN_SINCE","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" The minimal object version supporting this request\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1765},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8540284,"byte_end":8540303,"line_start":4127,"line_end":4127,"column_start":15,"column_end":34},"name":"REQ_SET_POPUP_SINCE","qualname":"::generated::c_api::wl_shell_surface::REQ_SET_POPUP_SINCE","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" The minimal object version supporting this request\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1766},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8540399,"byte_end":8540422,"line_start":4129,"line_end":4129,"column_start":15,"column_end":38},"name":"REQ_SET_MAXIMIZED_SINCE","qualname":"::generated::c_api::wl_shell_surface::REQ_SET_MAXIMIZED_SINCE","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" The minimal object version supporting this request\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1767},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8540518,"byte_end":8540537,"line_start":4131,"line_end":4131,"column_start":15,"column_end":34},"name":"REQ_SET_TITLE_SINCE","qualname":"::generated::c_api::wl_shell_surface::REQ_SET_TITLE_SINCE","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" The minimal object version supporting this request\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1768},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8540633,"byte_end":8540652,"line_start":4133,"line_end":4133,"column_start":15,"column_end":34},"name":"REQ_SET_CLASS_SINCE","qualname":"::generated::c_api::wl_shell_surface::REQ_SET_CLASS_SINCE","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" The minimal object version supporting this request\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1769},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8540746,"byte_end":8540760,"line_start":4135,"line_end":4135,"column_start":15,"column_end":29},"name":"EVT_PING_SINCE","qualname":"::generated::c_api::wl_shell_surface::EVT_PING_SINCE","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" The minimal object version supporting this event\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1770},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8540854,"byte_end":8540873,"line_start":4137,"line_end":4137,"column_start":15,"column_end":34},"name":"EVT_CONFIGURE_SINCE","qualname":"::generated::c_api::wl_shell_surface::EVT_CONFIGURE_SINCE","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" The minimal object version supporting this event\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1771},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8540967,"byte_end":8540987,"line_start":4139,"line_end":4139,"column_start":15,"column_end":35},"name":"EVT_POPUP_DONE_SINCE","qualname":"::generated::c_api::wl_shell_surface::EVT_POPUP_DONE_SINCE","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" The minimal object version supporting this event\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1772},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8543008,"byte_end":8543018,"line_start":4142,"line_end":4142,"column_start":9,"column_end":19},"name":"wl_surface","qualname":"::generated::c_api::wl_surface","value":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","parent":null,"children":[{"krate":0,"index":1773},{"krate":0,"index":1774},{"krate":0,"index":1775},{"krate":0,"index":1776},{"krate":0,"index":1777},{"krate":0,"index":1778},{"krate":0,"index":1779},{"krate":0,"index":4254},{"krate":0,"index":1780},{"krate":0,"index":1781},{"krate":0,"index":1782},{"krate":0,"index":1783},{"krate":0,"index":1784},{"krate":0,"index":1785},{"krate":0,"index":1786},{"krate":0,"index":1787},{"krate":0,"index":1788},{"krate":0,"index":1789},{"krate":0,"index":3284},{"krate":0,"index":3298},{"krate":0,"index":3296},{"krate":0,"index":3294},{"krate":0,"index":3291},{"krate":0,"index":3292},{"krate":0,"index":1790},{"krate":0,"index":1793},{"krate":0,"index":1822},{"krate":0,"index":1848},{"krate":0,"index":1853},{"krate":0,"index":1866},{"krate":0,"index":1868},{"krate":0,"index":1874},{"krate":0,"index":1886},{"krate":0,"index":1901},{"krate":0,"index":1902},{"krate":0,"index":1903},{"krate":0,"index":1904},{"krate":0,"index":1905},{"krate":0,"index":1906},{"krate":0,"index":1907},{"krate":0,"index":1908},{"krate":0,"index":1909},{"krate":0,"index":1910},{"krate":0,"index":1911},{"krate":0,"index":1912}],"decl_id":null,"docs":"an onscreen surface","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3285},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8543534,"byte_end":8543546,"line_start":4154,"line_end":4154,"column_start":9,"column_end":21},"name":"InvalidScale","qualname":"::generated::c_api::wl_surface::Error::InvalidScale","value":"Error::InvalidScale","parent":{"krate":0,"index":3284},"children":[],"decl_id":null,"docs":"buffer scale value is invalid\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3288},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8543613,"byte_end":8543629,"line_start":4156,"line_end":4156,"column_start":9,"column_end":25},"name":"InvalidTransform","qualname":"::generated::c_api::wl_surface::Error::InvalidTransform","value":"Error::InvalidTransform","parent":{"krate":0,"index":3284},"children":[],"decl_id":null,"docs":"buffer transform value is invalid\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3284},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8543469,"byte_end":8543474,"line_start":4152,"line_end":4152,"column_start":14,"column_end":19},"name":"Error","qualname":"::generated::c_api::wl_surface::Error","value":"pub enum Error {\n\n    #[doc = \"buffer scale value is invalid\"]\n    InvalidScale = ,\n\n    #[doc = \"buffer transform value is invalid\"]\n    InvalidTransform = ,\n}","parent":null,"children":[{"krate":0,"index":3285},{"krate":0,"index":3288}],"decl_id":null,"docs":"wl_surface error values","sig":null,"attributes":[{"value":"repr(u32)","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8543398,"byte_end":8543410,"line_start":4150,"line_end":4150,"column_start":5,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":1791},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8543673,"byte_end":8543681,"line_start":4159,"line_end":4159,"column_start":16,"column_end":24},"name":"from_raw","qualname":"<Error>::from_raw","value":"pub fn from_raw(u32) -> Option<Error>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1792},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8543905,"byte_end":8543911,"line_start":4166,"line_end":4166,"column_start":16,"column_end":22},"name":"to_raw","qualname":"<Error>::to_raw","value":"pub fn to_raw(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1794},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8544162,"byte_end":8544169,"line_start":4172,"line_end":4172,"column_start":9,"column_end":16},"name":"Destroy","qualname":"::generated::c_api::wl_surface::Request::Destroy","value":"Request::Destroy","parent":{"krate":0,"index":1793},"children":[],"decl_id":null,"docs":"delete surface","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":1796},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8546122,"byte_end":8546128,"line_start":4174,"line_end":4174,"column_start":9,"column_end":15},"name":"Attach","qualname":"::generated::c_api::wl_surface::Request::Attach","value":"Request::Attach { buffer, x, y }","parent":{"krate":0,"index":1793},"children":[],"decl_id":null,"docs":"set the surface contents","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":1800},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8547307,"byte_end":8547313,"line_start":4180,"line_end":4180,"column_start":9,"column_end":15},"name":"Damage","qualname":"::generated::c_api::wl_surface::Request::Damage","value":"Request::Damage { x, y, width, height }","parent":{"krate":0,"index":1793},"children":[],"decl_id":null,"docs":"mark part of the surface damaged","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":1805},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8549061,"byte_end":8549066,"line_start":4187,"line_end":4187,"column_start":9,"column_end":14},"name":"Frame","qualname":"::generated::c_api::wl_surface::Request::Frame","value":"Request::Frame { callback }","parent":{"krate":0,"index":1793},"children":[],"decl_id":null,"docs":"request a frame throttling hint","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":1807},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8550197,"byte_end":8550212,"line_start":4191,"line_end":4191,"column_start":9,"column_end":24},"name":"SetOpaqueRegion","qualname":"::generated::c_api::wl_surface::Request::SetOpaqueRegion","value":"Request::SetOpaqueRegion { region }","parent":{"krate":0,"index":1793},"children":[],"decl_id":null,"docs":"set opaque region","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":1809},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8551328,"byte_end":8551342,"line_start":4195,"line_end":4195,"column_start":9,"column_end":23},"name":"SetInputRegion","qualname":"::generated::c_api::wl_surface::Request::SetInputRegion","value":"Request::SetInputRegion { region }","parent":{"krate":0,"index":1793},"children":[],"decl_id":null,"docs":"set input region","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1811},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8552338,"byte_end":8552344,"line_start":4199,"line_end":4199,"column_start":9,"column_end":15},"name":"Commit","qualname":"::generated::c_api::wl_surface::Request::Commit","value":"Request::Commit","parent":{"krate":0,"index":1793},"children":[],"decl_id":null,"docs":"commit pending surface state","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":1813},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8553822,"byte_end":8553840,"line_start":4201,"line_end":4201,"column_start":9,"column_end":27},"name":"SetBufferTransform","qualname":"::generated::c_api::wl_surface::Request::SetBufferTransform","value":"Request::SetBufferTransform { transform }","parent":{"krate":0,"index":1793},"children":[],"decl_id":null,"docs":"sets the buffer transformation","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":1815},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8555038,"byte_end":8555052,"line_start":4205,"line_end":4205,"column_start":9,"column_end":23},"name":"SetBufferScale","qualname":"::generated::c_api::wl_surface::Request::SetBufferScale","value":"Request::SetBufferScale { scale }","parent":{"krate":0,"index":1793},"children":[],"decl_id":null,"docs":"sets the buffer scaling factor","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":1817},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8556804,"byte_end":8556816,"line_start":4207,"line_end":4207,"column_start":9,"column_end":21},"name":"DamageBuffer","qualname":"::generated::c_api::wl_surface::Request::DamageBuffer","value":"Request::DamageBuffer { x, y, width, height }","parent":{"krate":0,"index":1793},"children":[],"decl_id":null,"docs":"mark part of the surface damaged using buffer coordinates","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1793},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8543982,"byte_end":8543989,"line_start":4170,"line_end":4170,"column_start":14,"column_end":21},"name":"Request","qualname":"::generated::c_api::wl_surface::Request","value":"pub enum Request {\n\n    #[doc =\n      \"delete surface\\n\\nDeletes the surface and invalidates its object ID.\\n\\nThis is a destructor, once sent this object cannot be used any longer.\"]\n    Destroy,\n\n    #[doc =\n      \"set the surface contents\\n\\nSet a buffer as the content of this surface.\\n\\nThe new size of the surface is calculated based on the buffer\\nsize transformed by the inverse buffer_transform and the\\ninverse buffer_scale. This means that the supplied buffer\\nmust be an integer multiple of the buffer_scale.\\n\\nThe x and y arguments specify the location of the new pending\\nbuffer's upper left corner, relative to the current buffer's upper\\nleft corner, in surface-local coordinates. In other words, the\\nx and y, combined with the new surface size define in which\\ndirections the surface's size changes.\\n\\nSurface contents are double-buffered state, see wl_surface.commit.\\n\\nThe initial surface contents are void; there is no content.\\nwl_surface.attach assigns the given wl_buffer as the pending\\nwl_buffer. wl_surface.commit makes the pending wl_buffer the new\\nsurface contents, and the size of the surface becomes the size\\ncalculated from the wl_buffer, as described above. After commit,\\nthere is no pending buffer until the next attach.\\n\\nCommitting a pending wl_buffer allows the compositor to read the\\npixels in the wl_buffer. The compositor may access the pixels at\\nany time after the wl_surface.commit request. When the compositor\\nwill not access the pixels anymore, it will send the\\nwl_buffer.release event. Only after receiving wl_buffer.release,\\nthe client may reuse the wl_buffer. A wl_buffer that has been\\nattached and then replaced by another attach instead of committed\\nwill not receive a release event, and is not used by the\\ncompositor.\\n\\nDestroying the wl_buffer after wl_buffer.release does not change\\nthe surface contents. However, if the client destroys the\\nwl_buffer before receiving the wl_buffer.release event, the surface\\ncontents become undefined immediately.\\n\\nIf wl_surface.attach is sent with a NULL wl_buffer, the\\nfollowing wl_surface.commit will remove the surface content.\"]\n    Attach {\n        buffer: Option<Proxy<super::wl_buffer::WlBuffer>>,\n        x: i32,\n        y: i32,\n    },\n\n    #[doc =\n      \"mark part of the surface damaged\\n\\nThis request is used to describe the regions where the pending\\nbuffer is different from the current surface contents, and where\\nthe surface therefore needs to be repainted. The compositor\\nignores the parts of the damage that fall outside of the surface.\\n\\nDamage is double-buffered state, see wl_surface.commit.\\n\\nThe damage rectangle is specified in surface-local coordinates,\\nwhere x and y specify the upper left corner of the damage rectangle.\\n\\nThe initial value for pending damage is empty: no damage.\\nwl_surface.damage adds pending damage: the new pending damage\\nis the union of old pending damage and the given rectangle.\\n\\nwl_surface.commit assigns pending damage as the current damage,\\nand clears pending damage. The server will clear the current\\ndamage as it repaints the surface.\\n\\nAlternatively, damage can be posted with wl_surface.damage_buffer\\nwhich uses buffer coordinates instead of surface coordinates,\\nand is probably the preferred and intuitive way of doing this.\"]\n    Damage {\n        x: i32,\n        y: i32,\n        width: i32,\n        height: i32,\n    },\n\n    #[doc =\n      \"request a frame throttling hint\\n\\nRequest a notification when it is a good time to start drawing a new\\nframe, by creating a frame callback. This is useful for throttling\\nredrawing operations, and driving animations.\\n\\nWhen a client is animating on a wl_surface, it can use the 'frame'\\nrequest to get notified when it is a good time to draw and commit the\\nnext frame of animation. If the client commits an update earlier than\\nthat, it is likely that some updates will not make it to the display,\\nand the client is wasting resources by drawing too often.\\n\\nThe frame request will take effect on the next wl_surface.commit.\\nThe notification will only be posted for one frame unless\\nrequested again. For a wl_surface, the notifications are posted in\\nthe order the frame requests were committed.\\n\\nThe server must send the notifications so that a client\\nwill not send excessive updates, while still allowing\\nthe highest possible update rate for clients that wait for the reply\\nbefore drawing again. The server should give some time for the client\\nto draw and commit after sending the frame callback events to let it\\nhit the next output refresh.\\n\\nA server should avoid signaling the frame callbacks if the\\nsurface is not visible in any way, e.g. the surface is off-screen,\\nor completely obscured by other opaque surfaces.\\n\\nThe object returned by this request will be destroyed by the\\ncompositor after the callback is fired and as such the client must not\\nattempt to use it after that point.\\n\\nThe callback_data passed in the callback is the current time, in\\nmilliseconds, with an undefined base.\"]\n    Frame {\n        callback: Proxy<super::wl_callback::WlCallback>,\n    },\n\n    #[doc =\n      \"set opaque region\\n\\nThis request sets the region of the surface that contains\\nopaque content.\\n\\nThe opaque region is an optimization hint for the compositor\\nthat lets it optimize the redrawing of content behind opaque\\nregions.  Setting an opaque region is not required for correct\\nbehaviour, but marking transparent content as opaque will result\\nin repaint artifacts.\\n\\nThe opaque region is specified in surface-local coordinates.\\n\\nThe compositor ignores the parts of the opaque region that fall\\noutside of the surface.\\n\\nOpaque region is double-buffered state, see wl_surface.commit.\\n\\nwl_surface.set_opaque_region changes the pending opaque region.\\nwl_surface.commit copies the pending region to the current region.\\nOtherwise, the pending and current regions are never changed.\\n\\nThe initial value for an opaque region is empty. Setting the pending\\nopaque region has copy semantics, and the wl_region object can be\\ndestroyed immediately. A NULL wl_region causes the pending opaque\\nregion to be set to empty.\"]\n    SetOpaqueRegion {\n        region: Option<Proxy<super::wl_region::WlRegion>>,\n    },\n\n    #[doc =\n      \"set input region\\n\\nThis request sets the region of the surface that can receive\\npointer and touch events.\\n\\nInput events happening outside of this region will try the next\\nsurface in the server surface stack. The compositor ignores the\\nparts of the input region that fall outside of the surface.\\n\\nThe input region is specified in surface-local coordinates.\\n\\nInput region is double-buffered state, see wl_surface.commit.\\n\\nwl_surface.set_input_region changes the pending input region.\\nwl_surface.commit copies the pending region to the current region.\\nOtherwise the pending and current regions are never changed,\\nexcept cursor and icon surfaces are special cases, see\\nwl_pointer.set_cursor and wl_data_device.start_drag.\\n\\nThe initial value for an input region is infinite. That means the\\nwhole surface will accept input. Setting the pending input region\\nhas copy semantics, and the wl_region object can be destroyed\\nimmediately. A NULL wl_region causes the input region to be set\\nto infinite.\"]\n    SetInputRegion {\n        region: Option<Proxy<super::wl_region::WlRegion>>,\n    },\n\n    #[doc =\n      \"commit pending surface state\\n\\nSurface state (input, opaque, and damage regions, attached buffers,\\netc.) is double-buffered. Protocol requests modify the pending state,\\nas opposed to the current state in use by the compositor. A commit\\nrequest atomically applies all pending state, replacing the current\\nstate. After commit, the new pending state is as documented for each\\nrelated request.\\n\\nOn commit, a pending wl_buffer is applied first, and all other state\\nsecond. This means that all coordinates in double-buffered state are\\nrelative to the new wl_buffer coming into use, except for\\nwl_surface.attach itself. If there is no pending wl_buffer, the\\ncoordinates are relative to the current surface contents.\\n\\nAll requests that need a commit to become effective are documented\\nto affect double-buffered state.\\n\\nOther interfaces may add further double-buffered surface state.\"]\n    Commit,\n\n    #[doc =\n      \"sets the buffer transformation\\n\\nThis request sets an optional transformation on how the compositor\\ninterprets the contents of the buffer attached to the surface. The\\naccepted values for the transform parameter are the values for\\nwl_output.transform.\\n\\nBuffer transform is double-buffered state, see wl_surface.commit.\\n\\nA newly created surface has its buffer transformation set to normal.\\n\\nwl_surface.set_buffer_transform changes the pending buffer\\ntransformation. wl_surface.commit copies the pending buffer\\ntransformation to the current one. Otherwise, the pending and current\\nvalues are never changed.\\n\\nThe purpose of this request is to allow clients to render content\\naccording to the output transform, thus permitting the compositor to\\nuse certain optimizations even if the display is rotated. Using\\nhardware overlays and scanning out a client buffer for fullscreen\\nsurfaces are examples of such optimizations. Those optimizations are\\nhighly dependent on the compositor implementation, so the use of this\\nrequest should be considered on a case-by-case basis.\\n\\nNote that if the transform value includes 90 or 270 degree rotation,\\nthe width of the buffer will become the surface height and the height\\nof the buffer will become the surface width.\\n\\nIf transform is not one of the values from the\\nwl_output.transform enum the invalid_transform protocol error\\nis raised.\\n\\nOnly available since version 2 of the interface\"]\n    SetBufferTransform {\n        transform: super::wl_output::Transform,\n    },\n\n    #[doc =\n      \"sets the buffer scaling factor\\n\\nThis request sets an optional scaling factor on how the compositor\\ninterprets the contents of the buffer attached to the window.\\n\\nBuffer scale is double-buffered state, see wl_surface.commit.\\n\\nA newly created surface has its buffer scale set to 1.\\n\\nwl_surface.set_buffer_scale changes the pending buffer scale.\\nwl_surface.commit copies the pending buffer scale to the current one.\\nOtherwise, the pending and current values are never changed.\\n\\nThe purpose of this request is to allow clients to supply higher\\nresolution buffer data for use on high resolution outputs. It is\\nintended that you pick the same buffer scale as the scale of the\\noutput that the surface is displayed on. This means the compositor\\ncan avoid scaling when rendering the surface on that output.\\n\\nNote that if the scale is larger than 1, then you have to attach\\na buffer that is larger (by a factor of scale in each dimension)\\nthan the desired surface size.\\n\\nIf scale is not positive the invalid_scale protocol error is\\nraised.\\n\\nOnly available since version 3 of the interface\"]\n    SetBufferScale {\n        scale: i32,\n    },\n\n    #[doc =\n      \"mark part of the surface damaged using buffer coordinates\\n\\nThis request is used to describe the regions where the pending\\nbuffer is different from the current surface contents, and where\\nthe surface therefore needs to be repainted. The compositor\\nignores the parts of the damage that fall outside of the surface.\\n\\nDamage is double-buffered state, see wl_surface.commit.\\n\\nThe damage rectangle is specified in buffer coordinates,\\nwhere x and y specify the upper left corner of the damage rectangle.\\n\\nThe initial value for pending damage is empty: no damage.\\nwl_surface.damage_buffer adds pending damage: the new pending\\ndamage is the union of old pending damage and the given rectangle.\\n\\nwl_surface.commit assigns pending damage as the current damage,\\nand clears pending damage. The server will clear the current\\ndamage as it repaints the surface.\\n\\nThis request differs from wl_surface.damage in only one way - it\\ntakes damage in buffer coordinates instead of surface-local\\ncoordinates. While this generally is more intuitive than surface\\ncoordinates, it is especially desirable when using wp_viewport\\nor when a drawing library (like EGL) is unaware of buffer scale\\nand buffer transform.\\n\\nNote: Because buffer transformation changes and damage requests may\\nbe interleaved in the protocol stream, it is impossible to determine\\nthe actual mapping between surface and buffer damage until\\nwl_surface.commit time. Therefore, compositors wishing to take both\\nkinds of damage into account will have to accumulate damage from the\\ntwo requests separately and only transform from one to the other\\nafter receiving the wl_surface.commit.\\n\\nOnly available since version 4 of the interface\"]\n    DamageBuffer {\n        x: i32,\n        y: i32,\n        width: i32,\n        height: i32,\n    },\n}","parent":null,"children":[{"krate":0,"index":1794},{"krate":0,"index":1796},{"krate":0,"index":1800},{"krate":0,"index":1805},{"krate":0,"index":1807},{"krate":0,"index":1809},{"krate":0,"index":1811},{"krate":0,"index":1813},{"krate":0,"index":1815},{"krate":0,"index":1817}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":1849},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8567513,"byte_end":8567518,"line_start":4485,"line_end":4485,"column_start":9,"column_end":14},"name":"Enter","qualname":"::generated::c_api::wl_surface::Event::Enter","value":"Event::Enter { output }","parent":{"krate":0,"index":1848},"children":[],"decl_id":null,"docs":"surface enters an output","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":1851},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8567799,"byte_end":8567804,"line_start":4489,"line_end":4489,"column_start":9,"column_end":14},"name":"Leave","qualname":"::generated::c_api::wl_surface::Event::Leave","value":"Event::Leave { output }","parent":{"krate":0,"index":1848},"children":[],"decl_id":null,"docs":"surface leaves an output","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1848},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8567237,"byte_end":8567242,"line_start":4483,"line_end":4483,"column_start":14,"column_end":19},"name":"Event","qualname":"::generated::c_api::wl_surface::Event","value":"pub enum Event {\n\n    #[doc =\n      \"surface enters an output\\n\\nThis is emitted whenever a surface's creation, movement, or resizing\\nresults in some part of it being within the scanout region of an\\noutput.\\n\\nNote that a surface may be overlapping with zero or more outputs.\"]\n    Enter {\n        output: Proxy<super::wl_output::WlOutput>,\n    },\n\n    #[doc =\n      \"surface leaves an output\\n\\nThis is emitted whenever a surface's creation, movement, or resizing\\nresults in it no longer having any part of it within the scanout region\\nof an output.\"]\n    Leave {\n        output: Proxy<super::wl_output::WlOutput>,\n    },\n}","parent":null,"children":[{"krate":0,"index":1849},{"krate":0,"index":1851}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1866},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8571252,"byte_end":8571261,"line_start":4591,"line_end":4591,"column_start":16,"column_end":25},"name":"WlSurface","qualname":"::generated::c_api::wl_surface::WlSurface","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1874},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8571592,"byte_end":8571605,"line_start":4601,"line_end":4601,"column_start":15,"column_end":28},"name":"RequestsTrait","qualname":"::generated::c_api::wl_surface::RequestsTrait","value":"RequestsTrait","parent":null,"children":[{"krate":0,"index":1875},{"krate":0,"index":1876},{"krate":0,"index":1877},{"krate":0,"index":1878},{"krate":0,"index":1880},{"krate":0,"index":1881},{"krate":0,"index":1882},{"krate":0,"index":1883},{"krate":0,"index":1884},{"krate":0,"index":1885}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1875},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8571811,"byte_end":8571818,"line_start":4603,"line_end":4603,"column_start":12,"column_end":19},"name":"destroy","qualname":"::generated::c_api::wl_surface::RequestsTrait::destroy","value":"pub fn destroy(&Self) -> ()","parent":{"krate":0,"index":1874},"children":[],"decl_id":null,"docs":"delete surface","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1876},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8573787,"byte_end":8573793,"line_start":4605,"line_end":4605,"column_start":12,"column_end":18},"name":"attach","qualname":"::generated::c_api::wl_surface::RequestsTrait::attach","value":"pub fn attach(&Self, Option<&Proxy<super::wl_buffer::WlBuffer>>, i32, i32)\n-> ()","parent":{"krate":0,"index":1874},"children":[],"decl_id":null,"docs":"set the surface contents","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1877},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8574941,"byte_end":8574947,"line_start":4607,"line_end":4607,"column_start":12,"column_end":18},"name":"damage","qualname":"::generated::c_api::wl_surface::RequestsTrait::damage","value":"pub fn damage(&Self, i32, i32, i32, i32) -> ()","parent":{"krate":0,"index":1874},"children":[],"decl_id":null,"docs":"mark part of the surface damaged","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1878},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8576651,"byte_end":8576656,"line_start":4609,"line_end":4609,"column_start":12,"column_end":17},"name":"frame","qualname":"::generated::c_api::wl_surface::RequestsTrait::frame","value":"pub fn frame<F>(&Self, F) -> Result<Proxy<super::wl_callback::WlCallback>, ()>\nwhere F: FnOnce(NewProxy<super::wl_callback::WlCallback>) ->\nProxy<super::wl_callback::WlCallback>","parent":{"krate":0,"index":1874},"children":[],"decl_id":null,"docs":"request a frame throttling hint","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1880},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8577946,"byte_end":8577963,"line_start":4615,"line_end":4615,"column_start":12,"column_end":29},"name":"set_opaque_region","qualname":"::generated::c_api::wl_surface::RequestsTrait::set_opaque_region","value":"pub fn set_opaque_region(&Self, Option<&Proxy<super::wl_region::WlRegion>>)\n-> ()","parent":{"krate":0,"index":1874},"children":[],"decl_id":null,"docs":"set opaque region","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1881},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8579072,"byte_end":8579088,"line_start":4617,"line_end":4617,"column_start":12,"column_end":28},"name":"set_input_region","qualname":"::generated::c_api::wl_surface::RequestsTrait::set_input_region","value":"pub fn set_input_region(&Self, Option<&Proxy<super::wl_region::WlRegion>>)\n-> ()","parent":{"krate":0,"index":1874},"children":[],"decl_id":null,"docs":"set input region","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1882},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8580077,"byte_end":8580083,"line_start":4619,"line_end":4619,"column_start":12,"column_end":18},"name":"commit","qualname":"::generated::c_api::wl_surface::RequestsTrait::commit","value":"pub fn commit(&Self) -> ()","parent":{"krate":0,"index":1874},"children":[],"decl_id":null,"docs":"commit pending surface state","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1883},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8581578,"byte_end":8581598,"line_start":4621,"line_end":4621,"column_start":12,"column_end":32},"name":"set_buffer_transform","qualname":"::generated::c_api::wl_surface::RequestsTrait::set_buffer_transform","value":"pub fn set_buffer_transform(&Self, super::wl_output::Transform) -> ()","parent":{"krate":0,"index":1874},"children":[],"decl_id":null,"docs":"sets the buffer transformation","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1884},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8582789,"byte_end":8582805,"line_start":4623,"line_end":4623,"column_start":12,"column_end":28},"name":"set_buffer_scale","qualname":"::generated::c_api::wl_surface::RequestsTrait::set_buffer_scale","value":"pub fn set_buffer_scale(&Self, i32) -> ()","parent":{"krate":0,"index":1874},"children":[],"decl_id":null,"docs":"sets the buffer scaling factor","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1885},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8584571,"byte_end":8584584,"line_start":4625,"line_end":4625,"column_start":12,"column_end":25},"name":"damage_buffer","qualname":"::generated::c_api::wl_surface::RequestsTrait::damage_buffer","value":"pub fn damage_buffer(&Self, i32, i32, i32, i32) -> ()","parent":{"krate":0,"index":1874},"children":[],"decl_id":null,"docs":"mark part of the surface damaged using buffer coordinates","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1901},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8587164,"byte_end":8587181,"line_start":4697,"line_end":4697,"column_start":15,"column_end":32},"name":"REQ_DESTROY_SINCE","qualname":"::generated::c_api::wl_surface::REQ_DESTROY_SINCE","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" The minimal object version supporting this request\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1902},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8587277,"byte_end":8587293,"line_start":4699,"line_end":4699,"column_start":15,"column_end":31},"name":"REQ_ATTACH_SINCE","qualname":"::generated::c_api::wl_surface::REQ_ATTACH_SINCE","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" The minimal object version supporting this request\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1903},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8587389,"byte_end":8587405,"line_start":4701,"line_end":4701,"column_start":15,"column_end":31},"name":"REQ_DAMAGE_SINCE","qualname":"::generated::c_api::wl_surface::REQ_DAMAGE_SINCE","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" The minimal object version supporting this request\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1904},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8587501,"byte_end":8587516,"line_start":4703,"line_end":4703,"column_start":15,"column_end":30},"name":"REQ_FRAME_SINCE","qualname":"::generated::c_api::wl_surface::REQ_FRAME_SINCE","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" The minimal object version supporting this request\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1905},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8587612,"byte_end":8587639,"line_start":4705,"line_end":4705,"column_start":15,"column_end":42},"name":"REQ_SET_OPAQUE_REGION_SINCE","qualname":"::generated::c_api::wl_surface::REQ_SET_OPAQUE_REGION_SINCE","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" The minimal object version supporting this request\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1906},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8587735,"byte_end":8587761,"line_start":4707,"line_end":4707,"column_start":15,"column_end":41},"name":"REQ_SET_INPUT_REGION_SINCE","qualname":"::generated::c_api::wl_surface::REQ_SET_INPUT_REGION_SINCE","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" The minimal object version supporting this request\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1907},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8587857,"byte_end":8587873,"line_start":4709,"line_end":4709,"column_start":15,"column_end":31},"name":"REQ_COMMIT_SINCE","qualname":"::generated::c_api::wl_surface::REQ_COMMIT_SINCE","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" The minimal object version supporting this request\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1908},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8587969,"byte_end":8587999,"line_start":4711,"line_end":4711,"column_start":15,"column_end":45},"name":"REQ_SET_BUFFER_TRANSFORM_SINCE","qualname":"::generated::c_api::wl_surface::REQ_SET_BUFFER_TRANSFORM_SINCE","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" The minimal object version supporting this request\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1909},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8588095,"byte_end":8588121,"line_start":4713,"line_end":4713,"column_start":15,"column_end":41},"name":"REQ_SET_BUFFER_SCALE_SINCE","qualname":"::generated::c_api::wl_surface::REQ_SET_BUFFER_SCALE_SINCE","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" The minimal object version supporting this request\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1910},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8588217,"byte_end":8588240,"line_start":4715,"line_end":4715,"column_start":15,"column_end":38},"name":"REQ_DAMAGE_BUFFER_SINCE","qualname":"::generated::c_api::wl_surface::REQ_DAMAGE_BUFFER_SINCE","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" The minimal object version supporting this request\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1911},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8588334,"byte_end":8588349,"line_start":4717,"line_end":4717,"column_start":15,"column_end":30},"name":"EVT_ENTER_SINCE","qualname":"::generated::c_api::wl_surface::EVT_ENTER_SINCE","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" The minimal object version supporting this event\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1912},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8588443,"byte_end":8588458,"line_start":4719,"line_end":4719,"column_start":15,"column_end":30},"name":"EVT_LEAVE_SINCE","qualname":"::generated::c_api::wl_surface::EVT_LEAVE_SINCE","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" The minimal object version supporting this event\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1913},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8588757,"byte_end":8588764,"line_start":4722,"line_end":4722,"column_start":9,"column_end":16},"name":"wl_seat","qualname":"::generated::c_api::wl_seat","value":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","parent":null,"children":[{"krate":0,"index":1914},{"krate":0,"index":1915},{"krate":0,"index":1916},{"krate":0,"index":1917},{"krate":0,"index":1918},{"krate":0,"index":1919},{"krate":0,"index":1920},{"krate":0,"index":4282},{"krate":0,"index":1921},{"krate":0,"index":1922},{"krate":0,"index":1923},{"krate":0,"index":1924},{"krate":0,"index":1925},{"krate":0,"index":1926},{"krate":0,"index":1927},{"krate":0,"index":1928},{"krate":0,"index":1929},{"krate":0,"index":1930},{"krate":0,"index":3302},{"krate":0,"index":3324},{"krate":0,"index":3320},{"krate":0,"index":3321},{"krate":0,"index":3317},{"krate":0,"index":3318},{"krate":0,"index":3315},{"krate":0,"index":3309},{"krate":0,"index":3307},{"krate":0,"index":3304},{"krate":0,"index":3325},{"krate":0,"index":3332},{"krate":0,"index":3334},{"krate":0,"index":3336},{"krate":0,"index":3338},{"krate":0,"index":3340},{"krate":0,"index":3349},{"krate":0,"index":3352},{"krate":0,"index":3354},{"krate":0,"index":3357},{"krate":0,"index":3359},{"krate":0,"index":3362},{"krate":0,"index":3364},{"krate":0,"index":3367},{"krate":0,"index":3369},{"krate":0,"index":3372},{"krate":0,"index":3375},{"krate":0,"index":1931},{"krate":0,"index":1934},{"krate":0,"index":1943},{"krate":0,"index":1960},{"krate":0,"index":1965},{"krate":0,"index":1979},{"krate":0,"index":1981},{"krate":0,"index":1987},{"krate":0,"index":1995},{"krate":0,"index":2003},{"krate":0,"index":2004},{"krate":0,"index":2005},{"krate":0,"index":2006},{"krate":0,"index":2007},{"krate":0,"index":2008}],"decl_id":null,"docs":"group of input devices","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3302},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8589204,"byte_end":8589214,"line_start":4729,"line_end":4729,"column_start":171,"column_end":181},"name":"Capability","qualname":"::generated::c_api::wl_seat::Capability","value":"Capability {  }","parent":null,"children":[{"krate":0,"index":3303}],"decl_id":null,"docs":"seat capability bitmask","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3341},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8589272,"byte_end":8589279,"line_start":4729,"line_end":4729,"column_start":239,"column_end":246},"name":"Pointer","qualname":"::generated::c_api::wl_seat::Capability::Pointer","value":"Capability","parent":{"krate":0,"index":3340},"children":[],"decl_id":null,"docs":"the seat has pointer devices\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3342},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8589341,"byte_end":8589349,"line_start":4729,"line_end":4729,"column_start":308,"column_end":316},"name":"Keyboard","qualname":"::generated::c_api::wl_seat::Capability::Keyboard","value":"Capability","parent":{"krate":0,"index":3340},"children":[],"decl_id":null,"docs":"the seat has one or more keyboards\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3343},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8589403,"byte_end":8589408,"line_start":4729,"line_end":4729,"column_start":370,"column_end":375},"name":"Touch","qualname":"::generated::c_api::wl_seat::Capability::Touch","value":"Capability","parent":{"krate":0,"index":3340},"children":[],"decl_id":null,"docs":"the seat has touch devices\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1932},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8589456,"byte_end":8589464,"line_start":4731,"line_end":4731,"column_start":16,"column_end":24},"name":"from_raw","qualname":"<Capability>::from_raw","value":"pub fn from_raw(u32) -> Option<Capability>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1933},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8589574,"byte_end":8589580,"line_start":4734,"line_end":4734,"column_start":16,"column_end":22},"name":"to_raw","qualname":"<Capability>::to_raw","value":"pub fn to_raw(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":1935},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8590018,"byte_end":8590028,"line_start":4740,"line_end":4740,"column_start":9,"column_end":19},"name":"GetPointer","qualname":"::generated::c_api::wl_seat::Request::GetPointer","value":"Request::GetPointer { id }","parent":{"krate":0,"index":1934},"children":[],"decl_id":null,"docs":"return pointer object","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":1937},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8590458,"byte_end":8590469,"line_start":4744,"line_end":4744,"column_start":9,"column_end":20},"name":"GetKeyboard","qualname":"::generated::c_api::wl_seat::Request::GetKeyboard","value":"Request::GetKeyboard { id }","parent":{"krate":0,"index":1934},"children":[],"decl_id":null,"docs":"return keyboard object","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":1939},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8590886,"byte_end":8590894,"line_start":4748,"line_end":4748,"column_start":9,"column_end":17},"name":"GetTouch","qualname":"::generated::c_api::wl_seat::Request::GetTouch","value":"Request::GetTouch { id }","parent":{"krate":0,"index":1934},"children":[],"decl_id":null,"docs":"return touch object","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1941},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8591215,"byte_end":8591222,"line_start":4750,"line_end":4750,"column_start":9,"column_end":16},"name":"Release","qualname":"::generated::c_api::wl_seat::Request::Release","value":"Request::Release","parent":{"krate":0,"index":1934},"children":[],"decl_id":null,"docs":"release the seat object","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1934},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8589650,"byte_end":8589657,"line_start":4738,"line_end":4738,"column_start":14,"column_end":21},"name":"Request","qualname":"::generated::c_api::wl_seat::Request","value":"pub enum Request {\n\n    #[doc =\n      \"return pointer object\\n\\nThe ID provided will be initialized to the wl_pointer interface\\nfor this seat.\\n\\nThis request only takes effect if the seat has the pointer\\ncapability, or has had the pointer capability in the past.\\nIt is a protocol violation to issue this request on a seat that has\\nnever had the pointer capability.\"]\n    GetPointer {\n        id: Proxy<super::wl_pointer::WlPointer>,\n    },\n\n    #[doc =\n      \"return keyboard object\\n\\nThe ID provided will be initialized to the wl_keyboard interface\\nfor this seat.\\n\\nThis request only takes effect if the seat has the keyboard\\ncapability, or has had the keyboard capability in the past.\\nIt is a protocol violation to issue this request on a seat that has\\nnever had the keyboard capability.\"]\n    GetKeyboard {\n        id: Proxy<super::wl_keyboard::WlKeyboard>,\n    },\n\n    #[doc =\n      \"return touch object\\n\\nThe ID provided will be initialized to the wl_touch interface\\nfor this seat.\\n\\nThis request only takes effect if the seat has the touch\\ncapability, or has had the touch capability in the past.\\nIt is a protocol violation to issue this request on a seat that has\\nnever had the touch capability.\"]\n    GetTouch {\n        id: Proxy<super::wl_touch::WlTouch>,\n    },\n\n    #[doc =\n      \"release the seat object\\n\\nUsing this request a client can tell the server that it is not going to\\nuse the seat object anymore.\\n\\nThis is a destructor, once sent this object cannot be used any longer.\\nOnly available since version 5 of the interface\"]\n    Release,\n}","parent":null,"children":[{"krate":0,"index":1935},{"krate":0,"index":1937},{"krate":0,"index":1939},{"krate":0,"index":1941}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":1961},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8596959,"byte_end":8596971,"line_start":4874,"line_end":4874,"column_start":9,"column_end":21},"name":"Capabilities","qualname":"::generated::c_api::wl_seat::Event::Capabilities","value":"Event::Capabilities { capabilities }","parent":{"krate":0,"index":1960},"children":[],"decl_id":null,"docs":"seat capabilities changed","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":1963},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8597294,"byte_end":8597298,"line_start":4876,"line_end":4876,"column_start":9,"column_end":13},"name":"Name","qualname":"::generated::c_api::wl_seat::Event::Name","value":"Event::Name { name }","parent":{"krate":0,"index":1960},"children":[],"decl_id":null,"docs":"unique identifier for this seat","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1960},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8595653,"byte_end":8595658,"line_start":4872,"line_end":4872,"column_start":14,"column_end":19},"name":"Event","qualname":"::generated::c_api::wl_seat::Event","value":"pub enum Event {\n\n    #[doc =\n      \"seat capabilities changed\\n\\nThis is emitted whenever a seat gains or loses the pointer,\\nkeyboard or touch capabilities.  The argument is a capability\\nenum containing the complete set of capabilities this seat has.\\n\\nWhen the pointer capability is added, a client may create a\\nwl_pointer object using the wl_seat.get_pointer request. This object\\nwill receive pointer events until the capability is removed in the\\nfuture.\\n\\nWhen the pointer capability is removed, a client should destroy the\\nwl_pointer objects associated with the seat where the capability was\\nremoved, using the wl_pointer.release request. No further pointer\\nevents will be received on these objects.\\n\\nIn some compositors, if a seat regains the pointer capability and a\\nclient has a previously obtained wl_pointer object of version 4 or\\nless, that object may start sending pointer events again. This\\nbehavior is considered a misinterpretation of the intended behavior\\nand must not be relied upon by the client. wl_pointer objects of\\nversion 5 or later must not send events if created before the most\\nrecent event notifying the client of an added pointer capability.\\n\\nThe above behavior also applies to wl_keyboard and wl_touch with the\\nkeyboard and touch capabilities, respectively.\"]\n    Capabilities {\n        capabilities: Capability,\n    },\n\n    #[doc =\n      \"unique identifier for this seat\\n\\nIn a multiseat configuration this can be used by the client to help\\nidentify which physical devices the seat represents. Based on\\nthe seat configuration used by the compositor.\\n\\nOnly available since version 2 of the interface\"]\n    Name {\n        name: String,\n    },\n}","parent":null,"children":[{"krate":0,"index":1961},{"krate":0,"index":1963}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1979},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8600848,"byte_end":8600854,"line_start":4977,"line_end":4977,"column_start":16,"column_end":22},"name":"WlSeat","qualname":"::generated::c_api::wl_seat::WlSeat","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1987},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8601176,"byte_end":8601189,"line_start":4987,"line_end":4987,"column_start":15,"column_end":28},"name":"RequestsTrait","qualname":"::generated::c_api::wl_seat::RequestsTrait","value":"RequestsTrait","parent":null,"children":[{"krate":0,"index":1988},{"krate":0,"index":1990},{"krate":0,"index":1992},{"krate":0,"index":1994}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1988},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8601553,"byte_end":8601564,"line_start":4989,"line_end":4989,"column_start":12,"column_end":23},"name":"get_pointer","qualname":"::generated::c_api::wl_seat::RequestsTrait::get_pointer","value":"pub fn get_pointer<F>(&Self, F)\n-> Result<Proxy<super::wl_pointer::WlPointer>, ()> where\nF: FnOnce(NewProxy<super::wl_pointer::WlPointer>) ->\nProxy<super::wl_pointer::WlPointer>","parent":{"krate":0,"index":1987},"children":[],"decl_id":null,"docs":"return pointer object","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1990},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8602155,"byte_end":8602167,"line_start":4995,"line_end":4995,"column_start":12,"column_end":24},"name":"get_keyboard","qualname":"::generated::c_api::wl_seat::RequestsTrait::get_keyboard","value":"pub fn get_keyboard<F>(&Self, F)\n-> Result<Proxy<super::wl_keyboard::WlKeyboard>, ()> where\nF: FnOnce(NewProxy<super::wl_keyboard::WlKeyboard>) ->\nProxy<super::wl_keyboard::WlKeyboard>","parent":{"krate":0,"index":1987},"children":[],"decl_id":null,"docs":"return keyboard object","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1992},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8602784,"byte_end":8602793,"line_start":5004,"line_end":5004,"column_start":12,"column_end":21},"name":"get_touch","qualname":"::generated::c_api::wl_seat::RequestsTrait::get_touch","value":"pub fn get_touch<F>(&Self, F) -> Result<Proxy<super::wl_touch::WlTouch>, ()>\nwhere F: FnOnce(NewProxy<super::wl_touch::WlTouch>) ->\nProxy<super::wl_touch::WlTouch>","parent":{"krate":0,"index":1987},"children":[],"decl_id":null,"docs":"return touch object","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1994},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8603288,"byte_end":8603295,"line_start":5008,"line_end":5008,"column_start":12,"column_end":19},"name":"release","qualname":"::generated::c_api::wl_seat::RequestsTrait::release","value":"pub fn release(&Self) -> ()","parent":{"krate":0,"index":1987},"children":[],"decl_id":null,"docs":"release the seat object","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2003},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8604845,"byte_end":8604866,"line_start":5051,"line_end":5051,"column_start":15,"column_end":36},"name":"REQ_GET_POINTER_SINCE","qualname":"::generated::c_api::wl_seat::REQ_GET_POINTER_SINCE","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" The minimal object version supporting this request\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2004},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8604962,"byte_end":8604984,"line_start":5053,"line_end":5053,"column_start":15,"column_end":37},"name":"REQ_GET_KEYBOARD_SINCE","qualname":"::generated::c_api::wl_seat::REQ_GET_KEYBOARD_SINCE","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" The minimal object version supporting this request\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2005},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8605080,"byte_end":8605099,"line_start":5055,"line_end":5055,"column_start":15,"column_end":34},"name":"REQ_GET_TOUCH_SINCE","qualname":"::generated::c_api::wl_seat::REQ_GET_TOUCH_SINCE","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" The minimal object version supporting this request\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2006},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8605195,"byte_end":8605212,"line_start":5057,"line_end":5057,"column_start":15,"column_end":32},"name":"REQ_RELEASE_SINCE","qualname":"::generated::c_api::wl_seat::REQ_RELEASE_SINCE","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" The minimal object version supporting this request\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2007},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8605306,"byte_end":8605328,"line_start":5059,"line_end":5059,"column_start":15,"column_end":37},"name":"EVT_CAPABILITIES_SINCE","qualname":"::generated::c_api::wl_seat::EVT_CAPABILITIES_SINCE","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" The minimal object version supporting this event\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2008},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8605422,"byte_end":8605436,"line_start":5061,"line_end":5061,"column_start":15,"column_end":29},"name":"EVT_NAME_SINCE","qualname":"::generated::c_api::wl_seat::EVT_NAME_SINCE","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" The minimal object version supporting this event\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":2009},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8605839,"byte_end":8605849,"line_start":5064,"line_end":5064,"column_start":9,"column_end":19},"name":"wl_pointer","qualname":"::generated::c_api::wl_pointer","value":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","parent":null,"children":[{"krate":0,"index":2010},{"krate":0,"index":2011},{"krate":0,"index":2012},{"krate":0,"index":2013},{"krate":0,"index":2014},{"krate":0,"index":2015},{"krate":0,"index":2016},{"krate":0,"index":4310},{"krate":0,"index":2017},{"krate":0,"index":2018},{"krate":0,"index":2019},{"krate":0,"index":2020},{"krate":0,"index":2021},{"krate":0,"index":2022},{"krate":0,"index":2023},{"krate":0,"index":2024},{"krate":0,"index":2025},{"krate":0,"index":2026},{"krate":0,"index":3398},{"krate":0,"index":3409},{"krate":0,"index":3407},{"krate":0,"index":3405},{"krate":0,"index":3402},{"krate":0,"index":3403},{"krate":0,"index":2027},{"krate":0,"index":3410},{"krate":0,"index":3424},{"krate":0,"index":3422},{"krate":0,"index":3420},{"krate":0,"index":3417},{"krate":0,"index":3418},{"krate":0,"index":2030},{"krate":0,"index":3425},{"krate":0,"index":3439},{"krate":0,"index":3437},{"krate":0,"index":3435},{"krate":0,"index":3432},{"krate":0,"index":3433},{"krate":0,"index":2033},{"krate":0,"index":3440},{"krate":0,"index":3457},{"krate":0,"index":3455},{"krate":0,"index":3453},{"krate":0,"index":3450},{"krate":0,"index":3451},{"krate":0,"index":2036},{"krate":0,"index":2039},{"krate":0,"index":2047},{"krate":0,"index":2063},{"krate":0,"index":2095},{"krate":0,"index":2108},{"krate":0,"index":2110},{"krate":0,"index":2116},{"krate":0,"index":2119},{"krate":0,"index":2123},{"krate":0,"index":2124},{"krate":0,"index":2125},{"krate":0,"index":2126},{"krate":0,"index":2127},{"krate":0,"index":2128},{"krate":0,"index":2129},{"krate":0,"index":2130},{"krate":0,"index":2131},{"krate":0,"index":2132},{"krate":0,"index":2133}],"decl_id":null,"docs":"pointer input device","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3399},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8606263,"byte_end":8606267,"line_start":5075,"line_end":5075,"column_start":9,"column_end":13},"name":"Role","qualname":"::generated::c_api::wl_pointer::Error::Role","value":"Error::Role","parent":{"krate":0,"index":3398},"children":[],"decl_id":null,"docs":"given wl_surface has another role\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3398},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8606194,"byte_end":8606199,"line_start":5073,"line_end":5073,"column_start":14,"column_end":19},"name":"Error","qualname":"::generated::c_api::wl_pointer::Error","value":"pub enum Error {\n\n    #[doc = \"given wl_surface has another role\"]\n    Role = ,\n}","parent":null,"children":[{"krate":0,"index":3399}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"repr(u32)","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8606123,"byte_end":8606135,"line_start":5071,"line_end":5071,"column_start":5,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":2028},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8606311,"byte_end":8606319,"line_start":5078,"line_end":5078,"column_start":16,"column_end":24},"name":"from_raw","qualname":"<Error>::from_raw","value":"pub fn from_raw(u32) -> Option<Error>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2029},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8606483,"byte_end":8606489,"line_start":5084,"line_end":5084,"column_start":16,"column_end":22},"name":"to_raw","qualname":"<Error>::to_raw","value":"pub fn to_raw(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3411},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8606803,"byte_end":8606811,"line_start":5093,"line_end":5093,"column_start":9,"column_end":17},"name":"Released","qualname":"::generated::c_api::wl_pointer::ButtonState::Released","value":"ButtonState::Released","parent":{"krate":0,"index":3410},"children":[],"decl_id":null,"docs":"the button is not pressed\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3414},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8606866,"byte_end":8606873,"line_start":5095,"line_end":5095,"column_start":9,"column_end":16},"name":"Pressed","qualname":"::generated::c_api::wl_pointer::ButtonState::Pressed","value":"ButtonState::Pressed","parent":{"krate":0,"index":3410},"children":[],"decl_id":null,"docs":"the button is pressed\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3410},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8606736,"byte_end":8606747,"line_start":5091,"line_end":5091,"column_start":14,"column_end":25},"name":"ButtonState","qualname":"::generated::c_api::wl_pointer::ButtonState","value":"pub enum ButtonState {\n\n    #[doc = \"the button is not pressed\"]\n    Released = ,\n\n    #[doc = \"the button is pressed\"]\n    Pressed = ,\n}","parent":null,"children":[{"krate":0,"index":3411},{"krate":0,"index":3414}],"decl_id":null,"docs":"physical button state","sig":null,"attributes":[{"value":"repr(u32)","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8606665,"byte_end":8606677,"line_start":5089,"line_end":5089,"column_start":5,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":2031},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8606923,"byte_end":8606931,"line_start":5098,"line_end":5098,"column_start":16,"column_end":24},"name":"from_raw","qualname":"<ButtonState>::from_raw","value":"pub fn from_raw(u32) -> Option<ButtonState>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2032},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8607160,"byte_end":8607166,"line_start":5105,"line_end":5105,"column_start":16,"column_end":22},"name":"to_raw","qualname":"<ButtonState>::to_raw","value":"pub fn to_raw(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3426},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8607419,"byte_end":8607433,"line_start":5114,"line_end":5114,"column_start":9,"column_end":23},"name":"VerticalScroll","qualname":"::generated::c_api::wl_pointer::Axis::VerticalScroll","value":"Axis::VerticalScroll","parent":{"krate":0,"index":3425},"children":[],"decl_id":null,"docs":"vertical axis\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3429},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8607482,"byte_end":8607498,"line_start":5116,"line_end":5116,"column_start":9,"column_end":25},"name":"HorizontalScroll","qualname":"::generated::c_api::wl_pointer::Axis::HorizontalScroll","value":"Axis::HorizontalScroll","parent":{"krate":0,"index":3425},"children":[],"decl_id":null,"docs":"horizontal axis\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3425},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8607371,"byte_end":8607375,"line_start":5112,"line_end":5112,"column_start":14,"column_end":18},"name":"Axis","qualname":"::generated::c_api::wl_pointer::Axis","value":"pub enum Axis {\n\n    #[doc = \"vertical axis\"]\n    VerticalScroll = ,\n\n    #[doc = \"horizontal axis\"]\n    HorizontalScroll = ,\n}","parent":null,"children":[{"krate":0,"index":3426},{"krate":0,"index":3429}],"decl_id":null,"docs":"axis types","sig":null,"attributes":[{"value":"repr(u32)","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8607300,"byte_end":8607312,"line_start":5110,"line_end":5110,"column_start":5,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":2034},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8607541,"byte_end":8607549,"line_start":5119,"line_end":5119,"column_start":16,"column_end":24},"name":"from_raw","qualname":"<Axis>::from_raw","value":"pub fn from_raw(u32) -> Option<Axis>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2035},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8607772,"byte_end":8607778,"line_start":5126,"line_end":5126,"column_start":16,"column_end":22},"name":"to_raw","qualname":"<Axis>::to_raw","value":"pub fn to_raw(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3441},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8608657,"byte_end":8608662,"line_start":5135,"line_end":5135,"column_start":9,"column_end":14},"name":"Wheel","qualname":"::generated::c_api::wl_pointer::AxisSource::Wheel","value":"AxisSource::Wheel","parent":{"krate":0,"index":3440},"children":[],"decl_id":null,"docs":"a physical wheel\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3444},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8608721,"byte_end":8608727,"line_start":5137,"line_end":5137,"column_start":9,"column_end":15},"name":"Finger","qualname":"::generated::c_api::wl_pointer::AxisSource::Finger","value":"AxisSource::Finger","parent":{"krate":0,"index":3440},"children":[],"decl_id":null,"docs":"finger on a touch surface\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3447},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8608788,"byte_end":8608798,"line_start":5139,"line_end":5139,"column_start":9,"column_end":19},"name":"Continuous","qualname":"::generated::c_api::wl_pointer::AxisSource::Continuous","value":"AxisSource::Continuous","parent":{"krate":0,"index":3440},"children":[],"decl_id":null,"docs":"continuous coordinate space\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3440},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8608600,"byte_end":8608610,"line_start":5133,"line_end":5133,"column_start":14,"column_end":24},"name":"AxisSource","qualname":"::generated::c_api::wl_pointer::AxisSource","value":"pub enum AxisSource {\n\n    #[doc = \"a physical wheel\"]\n    Wheel = ,\n\n    #[doc = \"finger on a touch surface\"]\n    Finger = ,\n\n    #[doc = \"continuous coordinate space\"]\n    Continuous = ,\n}","parent":null,"children":[{"krate":0,"index":3441},{"krate":0,"index":3444},{"krate":0,"index":3447}],"decl_id":null,"docs":"axis source types","sig":null,"attributes":[{"value":"repr(u32)","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8608529,"byte_end":8608541,"line_start":5131,"line_end":5131,"column_start":5,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":2037},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8608847,"byte_end":8608855,"line_start":5142,"line_end":5142,"column_start":16,"column_end":24},"name":"from_raw","qualname":"<AxisSource>::from_raw","value":"pub fn from_raw(u32) -> Option<AxisSource>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2038},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8609128,"byte_end":8609134,"line_start":5150,"line_end":5150,"column_start":16,"column_end":22},"name":"to_raw","qualname":"<AxisSource>::to_raw","value":"pub fn to_raw(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":2040},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8610689,"byte_end":8610698,"line_start":5156,"line_end":5156,"column_start":9,"column_end":18},"name":"SetCursor","qualname":"::generated::c_api::wl_pointer::Request::SetCursor","value":"Request::SetCursor { serial, surface, hotspot_x, hotspot_y }","parent":{"krate":0,"index":2039},"children":[],"decl_id":null,"docs":"set the pointer surface","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2045},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8611268,"byte_end":8611275,"line_start":5163,"line_end":5163,"column_start":9,"column_end":16},"name":"Release","qualname":"::generated::c_api::wl_pointer::Request::Release","value":"Request::Release","parent":{"krate":0,"index":2039},"children":[],"decl_id":null,"docs":"release the pointer object","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2039},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8609205,"byte_end":8609212,"line_start":5154,"line_end":5154,"column_start":14,"column_end":21},"name":"Request","qualname":"::generated::c_api::wl_pointer::Request","value":"pub enum Request {\n\n    #[doc =\n      \"set the pointer surface\\n\\nSet the pointer surface, i.e., the surface that contains the\\npointer image (cursor). This request gives the surface the role\\nof a cursor. If the surface already has another role, it raises\\na protocol error.\\n\\nThe cursor actually changes only if the pointer\\nfocus for this device is one of the requesting client's surfaces\\nor the surface parameter is the current pointer surface. If\\nthere was a previous surface set with this request it is\\nreplaced. If surface is NULL, the pointer image is hidden.\\n\\nThe parameters hotspot_x and hotspot_y define the position of\\nthe pointer surface relative to the pointer location. Its\\ntop-left corner is always at (x, y) - (hotspot_x, hotspot_y),\\nwhere (x, y) are the coordinates of the pointer location, in\\nsurface-local coordinates.\\n\\nOn surface.attach requests to the pointer surface, hotspot_x\\nand hotspot_y are decremented by the x and y parameters\\npassed to the request. Attach must be confirmed by\\nwl_surface.commit as usual.\\n\\nThe hotspot can also be updated by passing the currently set\\npointer surface to this request with new values for hotspot_x\\nand hotspot_y.\\n\\nThe current and pending input regions of the wl_surface are\\ncleared, and wl_surface.set_input_region is ignored until the\\nwl_surface is no longer used as the cursor. When the use as a\\ncursor ends, the current and pending input regions become\\nundefined, and the wl_surface is unmapped.\"]\n    SetCursor {\n        serial: u32,\n        surface: Option<Proxy<super::wl_surface::WlSurface>>,\n        hotspot_x: i32,\n        hotspot_y: i32,\n    },\n\n    #[doc =\n      \"release the pointer object\\n\\nUsing this request a client can tell the server that it is not going to\\nuse the pointer object anymore.\\n\\nThis request destroys the pointer proxy object, so clients must not call\\nwl_pointer_destroy() after using this request.\\n\\nThis is a destructor, once sent this object cannot be used any longer.\\nOnly available since version 3 of the interface\"]\n    Release,\n}","parent":null,"children":[{"krate":0,"index":2040},{"krate":0,"index":2045}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":2064},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8615061,"byte_end":8615066,"line_start":5268,"line_end":5268,"column_start":9,"column_end":14},"name":"Enter","qualname":"::generated::c_api::wl_pointer::Event::Enter","value":"Event::Enter { serial, surface, surface_x, surface_y }","parent":{"krate":0,"index":2063},"children":[],"decl_id":null,"docs":"enter event","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":2069},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8615427,"byte_end":8615432,"line_start":5275,"line_end":5275,"column_start":9,"column_end":14},"name":"Leave","qualname":"::generated::c_api::wl_pointer::Event::Leave","value":"Event::Leave { serial, surface }","parent":{"krate":0,"index":2063},"children":[],"decl_id":null,"docs":"leave event","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":2072},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8615711,"byte_end":8615717,"line_start":5280,"line_end":5280,"column_start":9,"column_end":15},"name":"Motion","qualname":"::generated::c_api::wl_pointer::Event::Motion","value":"Event::Motion { time, surface_x, surface_y }","parent":{"krate":0,"index":2063},"children":[],"decl_id":null,"docs":"pointer motion event","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":2076},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8616070,"byte_end":8616076,"line_start":5286,"line_end":5286,"column_start":9,"column_end":15},"name":"Button","qualname":"::generated::c_api::wl_pointer::Event::Button","value":"Event::Button { serial, time, button, state }","parent":{"krate":0,"index":2063},"children":[],"decl_id":null,"docs":"pointer button event","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":2081},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8616870,"byte_end":8616874,"line_start":5293,"line_end":5293,"column_start":9,"column_end":13},"name":"Axis","qualname":"::generated::c_api::wl_pointer::Event::Axis","value":"Event::Axis { time, axis, value }","parent":{"krate":0,"index":2063},"children":[],"decl_id":null,"docs":"axis event","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2085},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8618805,"byte_end":8618810,"line_start":5295,"line_end":5295,"column_start":9,"column_end":14},"name":"Frame","qualname":"::generated::c_api::wl_pointer::Event::Frame","value":"Event::Frame","parent":{"krate":0,"index":2063},"children":[],"decl_id":null,"docs":"end of a pointer event sequence","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":2087},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8619993,"byte_end":8620003,"line_start":5297,"line_end":5297,"column_start":9,"column_end":19},"name":"AxisSource","qualname":"::generated::c_api::wl_pointer::Event::AxisSource","value":"Event::AxisSource { axis_source }","parent":{"krate":0,"index":2063},"children":[],"decl_id":null,"docs":"axis source event","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":2089},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8620771,"byte_end":8620779,"line_start":5299,"line_end":5299,"column_start":9,"column_end":17},"name":"AxisStop","qualname":"::generated::c_api::wl_pointer::Event::AxisStop","value":"Event::AxisStop { time, axis }","parent":{"krate":0,"index":2063},"children":[],"decl_id":null,"docs":"axis stop event","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":2092},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8621994,"byte_end":8622006,"line_start":5301,"line_end":5301,"column_start":9,"column_end":21},"name":"AxisDiscrete","qualname":"::generated::c_api::wl_pointer::Event::AxisDiscrete","value":"Event::AxisDiscrete { axis, discrete }","parent":{"krate":0,"index":2063},"children":[],"decl_id":null,"docs":"axis click event","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2063},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8614754,"byte_end":8614759,"line_start":5266,"line_end":5266,"column_start":14,"column_end":19},"name":"Event","qualname":"::generated::c_api::wl_pointer::Event","value":"pub enum Event {\n\n    #[doc =\n      \"enter event\\n\\nNotification that this seat's pointer is focused on a certain\\nsurface.\\n\\nWhen a seat's focus enters a surface, the pointer image\\nis undefined and a client should respond to this event by setting\\nan appropriate pointer image with the set_cursor request.\"]\n    Enter {\n        serial: u32,\n        surface: Proxy<super::wl_surface::WlSurface>,\n        surface_x: f64,\n        surface_y: f64,\n    },\n\n    #[doc =\n      \"leave event\\n\\nNotification that this seat's pointer is no longer focused on\\na certain surface.\\n\\nThe leave notification is sent before the enter notification\\nfor the new focus.\"]\n    Leave {\n        serial: u32,\n        surface: Proxy<super::wl_surface::WlSurface>,\n    },\n\n    #[doc =\n      \"pointer motion event\\n\\nNotification of pointer location change. The arguments\\nsurface_x and surface_y are the location relative to the\\nfocused surface.\"]\n    Motion {\n        time: u32,\n        surface_x: f64,\n        surface_y: f64,\n    },\n\n    #[doc =\n      \"pointer button event\\n\\nMouse button click and release notifications.\\n\\nThe location of the click is given by the last motion or\\nenter event.\\nThe time argument is a timestamp with millisecond\\ngranularity, with an undefined base.\"]\n    Button {\n        serial: u32,\n        time: u32,\n        button: u32,\n        state: ButtonState,\n    },\n\n    #[doc =\n      \"axis event\\n\\nScroll and other axis notifications.\\n\\nFor scroll events (vertical and horizontal scroll axes), the\\nvalue parameter is the length of a vector along the specified\\naxis in a coordinate space identical to those of motion events,\\nrepresenting a relative movement along the specified axis.\\n\\nFor devices that support movements non-parallel to axes multiple\\naxis events will be emitted.\\n\\nWhen applicable, for example for touch pads, the server can\\nchoose to emit scroll events where the motion vector is\\nequivalent to a motion event vector.\\n\\nWhen applicable, a client can transform its content relative to the\\nscroll distance.\"]\n    Axis {\n        time: u32,\n        axis: Axis,\n        value: f64,\n    },\n\n    #[doc =\n      \"end of a pointer event sequence\\n\\nIndicates the end of a set of events that logically belong together.\\nA client is expected to accumulate the data in all events within the\\nframe before proceeding.\\n\\nAll wl_pointer events before a wl_pointer.frame event belong\\nlogically together. For example, in a diagonal scroll motion the\\ncompositor will send an optional wl_pointer.axis_source event, two\\nwl_pointer.axis events (horizontal and vertical) and finally a\\nwl_pointer.frame event. The client may use this information to\\ncalculate a diagonal vector for scrolling.\\n\\nWhen multiple wl_pointer.axis events occur within the same frame,\\nthe motion vector is the combined motion of all events.\\nWhen a wl_pointer.axis and a wl_pointer.axis_stop event occur within\\nthe same frame, this indicates that axis movement in one axis has\\nstopped but continues in the other axis.\\nWhen multiple wl_pointer.axis_stop events occur within the same\\nframe, this indicates that these axes stopped in the same instance.\\n\\nA wl_pointer.frame event is sent for every logical event group,\\neven if the group only contains a single wl_pointer event.\\nSpecifically, a client may get a sequence: motion, frame, button,\\nframe, axis, frame, axis_stop, frame.\\n\\nThe wl_pointer.enter and wl_pointer.leave events are logical events\\ngenerated by the compositor and not the hardware. These events are\\nalso grouped by a wl_pointer.frame. When a pointer moves from one\\nsurface to another, a compositor should group the\\nwl_pointer.leave event within the same wl_pointer.frame.\\nHowever, a client must not rely on wl_pointer.leave and\\nwl_pointer.enter being in the same wl_pointer.frame.\\nCompositor-specific policies may require the wl_pointer.leave and\\nwl_pointer.enter event being split across multiple wl_pointer.frame\\ngroups.\\n\\nOnly available since version 5 of the interface\"]\n    Frame,\n\n    #[doc =\n      \"axis source event\\n\\nSource information for scroll and other axes.\\n\\nThis event does not occur on its own. It is sent before a\\nwl_pointer.frame event and carries the source information for\\nall events within that frame.\\n\\nThe source specifies how this event was generated. If the source is\\nwl_pointer.axis_source.finger, a wl_pointer.axis_stop event will be\\nsent when the user lifts the finger off the device.\\n\\nIf the source is wl_pointer axis_source.wheel or\\nwl_pointer.axis_source.continuous, a wl_pointer.axis_stop event may\\nor may not be sent. Whether a compositor sends an axis_stop event\\nfor these sources is hardware-specific and implementation-dependent;\\nclients must not rely on receiving an axis_stop event for these\\nscroll sources and should treat scroll sequences from these scroll\\nsources as unterminated by default.\\n\\nThis event is optional. If the source is unknown for a particular\\naxis event sequence, no event is sent.\\nOnly one wl_pointer.axis_source event is permitted per frame.\\n\\nThe order of wl_pointer.axis_discrete and wl_pointer.axis_source is\\nnot guaranteed.\\n\\nOnly available since version 5 of the interface\"]\n    AxisSource {\n        axis_source: AxisSource,\n    },\n\n    #[doc =\n      \"axis stop event\\n\\nStop notification for scroll and other axes.\\n\\nFor some wl_pointer.axis_source types, a wl_pointer.axis_stop event\\nis sent to notify a client that the axis sequence has terminated.\\nThis enables the client to implement kinetic scrolling.\\nSee the wl_pointer.axis_source documentation for information on when\\nthis event may be generated.\\n\\nAny wl_pointer.axis events with the same axis_source after this\\nevent should be considered as the start of a new axis motion.\\n\\nThe timestamp is to be interpreted identical to the timestamp in the\\nwl_pointer.axis event. The timestamp value may be the same as a\\npreceding wl_pointer.axis event.\\n\\nOnly available since version 5 of the interface\"]\n    AxisStop {\n        time: u32,\n        axis: Axis,\n    },\n\n    #[doc =\n      \"axis click event\\n\\nDiscrete step information for scroll and other axes.\\n\\nThis event carries the axis value of the wl_pointer.axis event in\\ndiscrete steps (e.g. mouse wheel clicks).\\n\\nThis event does not occur on its own, it is coupled with a\\nwl_pointer.axis event that represents this axis value on a\\ncontinuous scale. The protocol guarantees that each axis_discrete\\nevent is always followed by exactly one axis event with the same\\naxis number within the same wl_pointer.frame. Note that the protocol\\nallows for other events to occur between the axis_discrete and\\nits coupled axis event, including other axis_discrete or axis\\nevents.\\n\\nThis event is optional; continuous scrolling devices\\nlike two-finger scrolling on touchpads do not have discrete\\nsteps and do not generate this event.\\n\\nThe discrete value carries the directional information. e.g. a value\\nof -2 is two steps towards the negative direction of this axis.\\n\\nThe axis number is identical to the axis number in the associated\\naxis event.\\n\\nThe order of wl_pointer.axis_discrete and wl_pointer.axis_source is\\nnot guaranteed.\\n\\nOnly available since version 5 of the interface\"]\n    AxisDiscrete {\n        axis: Axis,\n        discrete: i32,\n    },\n}","parent":null,"children":[{"krate":0,"index":2064},{"krate":0,"index":2069},{"krate":0,"index":2072},{"krate":0,"index":2076},{"krate":0,"index":2081},{"krate":0,"index":2085},{"krate":0,"index":2087},{"krate":0,"index":2089},{"krate":0,"index":2092}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2108},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8636462,"byte_end":8636471,"line_start":5675,"line_end":5675,"column_start":16,"column_end":25},"name":"WlPointer","qualname":"::generated::c_api::wl_pointer::WlPointer","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":2116},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8636802,"byte_end":8636815,"line_start":5685,"line_end":5685,"column_start":15,"column_end":28},"name":"RequestsTrait","qualname":"::generated::c_api::wl_pointer::RequestsTrait","value":"RequestsTrait","parent":null,"children":[{"krate":0,"index":2117},{"krate":0,"index":2118}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2117},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8638295,"byte_end":8638305,"line_start":5687,"line_end":5687,"column_start":12,"column_end":22},"name":"set_cursor","qualname":"::generated::c_api::wl_pointer::RequestsTrait::set_cursor","value":"pub fn set_cursor(&Self, u32, Option<&Proxy<super::wl_surface::WlSurface>>,\n                  i32, i32) -> ()","parent":{"krate":0,"index":2116},"children":[],"decl_id":null,"docs":"set the pointer surface","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2118},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8638934,"byte_end":8638941,"line_start":5695,"line_end":5695,"column_start":12,"column_end":19},"name":"release","qualname":"::generated::c_api::wl_pointer::RequestsTrait::release","value":"pub fn release(&Self) -> ()","parent":{"krate":0,"index":2116},"children":[],"decl_id":null,"docs":"release the pointer object","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2123},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8639673,"byte_end":8639693,"line_start":5719,"line_end":5719,"column_start":15,"column_end":35},"name":"REQ_SET_CURSOR_SINCE","qualname":"::generated::c_api::wl_pointer::REQ_SET_CURSOR_SINCE","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" The minimal object version supporting this request\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2124},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8639789,"byte_end":8639806,"line_start":5721,"line_end":5721,"column_start":15,"column_end":32},"name":"REQ_RELEASE_SINCE","qualname":"::generated::c_api::wl_pointer::REQ_RELEASE_SINCE","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" The minimal object version supporting this request\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2125},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8639900,"byte_end":8639915,"line_start":5723,"line_end":5723,"column_start":15,"column_end":30},"name":"EVT_ENTER_SINCE","qualname":"::generated::c_api::wl_pointer::EVT_ENTER_SINCE","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" The minimal object version supporting this event\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2126},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8640009,"byte_end":8640024,"line_start":5725,"line_end":5725,"column_start":15,"column_end":30},"name":"EVT_LEAVE_SINCE","qualname":"::generated::c_api::wl_pointer::EVT_LEAVE_SINCE","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" The minimal object version supporting this event\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2127},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8640118,"byte_end":8640134,"line_start":5727,"line_end":5727,"column_start":15,"column_end":31},"name":"EVT_MOTION_SINCE","qualname":"::generated::c_api::wl_pointer::EVT_MOTION_SINCE","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" The minimal object version supporting this event\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2128},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8640228,"byte_end":8640244,"line_start":5729,"line_end":5729,"column_start":15,"column_end":31},"name":"EVT_BUTTON_SINCE","qualname":"::generated::c_api::wl_pointer::EVT_BUTTON_SINCE","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" The minimal object version supporting this event\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2129},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8640338,"byte_end":8640352,"line_start":5731,"line_end":5731,"column_start":15,"column_end":29},"name":"EVT_AXIS_SINCE","qualname":"::generated::c_api::wl_pointer::EVT_AXIS_SINCE","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" The minimal object version supporting this event\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2130},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8640446,"byte_end":8640461,"line_start":5733,"line_end":5733,"column_start":15,"column_end":30},"name":"EVT_FRAME_SINCE","qualname":"::generated::c_api::wl_pointer::EVT_FRAME_SINCE","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" The minimal object version supporting this event\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2131},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8640555,"byte_end":8640576,"line_start":5735,"line_end":5735,"column_start":15,"column_end":36},"name":"EVT_AXIS_SOURCE_SINCE","qualname":"::generated::c_api::wl_pointer::EVT_AXIS_SOURCE_SINCE","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" The minimal object version supporting this event\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2132},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8640670,"byte_end":8640689,"line_start":5737,"line_end":5737,"column_start":15,"column_end":34},"name":"EVT_AXIS_STOP_SINCE","qualname":"::generated::c_api::wl_pointer::EVT_AXIS_STOP_SINCE","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" The minimal object version supporting this event\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2133},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8640783,"byte_end":8640806,"line_start":5739,"line_end":5739,"column_start":15,"column_end":38},"name":"EVT_AXIS_DISCRETE_SINCE","qualname":"::generated::c_api::wl_pointer::EVT_AXIS_DISCRETE_SINCE","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" The minimal object version supporting this event\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":2134},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8640950,"byte_end":8640961,"line_start":5742,"line_end":5742,"column_start":9,"column_end":20},"name":"wl_keyboard","qualname":"::generated::c_api::wl_keyboard","value":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","parent":null,"children":[{"krate":0,"index":2135},{"krate":0,"index":2136},{"krate":0,"index":2137},{"krate":0,"index":2138},{"krate":0,"index":2139},{"krate":0,"index":2140},{"krate":0,"index":2141},{"krate":0,"index":4338},{"krate":0,"index":2142},{"krate":0,"index":2143},{"krate":0,"index":2144},{"krate":0,"index":2145},{"krate":0,"index":2146},{"krate":0,"index":2147},{"krate":0,"index":2148},{"krate":0,"index":2149},{"krate":0,"index":2150},{"krate":0,"index":2151},{"krate":0,"index":3459},{"krate":0,"index":3473},{"krate":0,"index":3471},{"krate":0,"index":3469},{"krate":0,"index":3466},{"krate":0,"index":3467},{"krate":0,"index":2152},{"krate":0,"index":3474},{"krate":0,"index":3488},{"krate":0,"index":3486},{"krate":0,"index":3484},{"krate":0,"index":3481},{"krate":0,"index":3482},{"krate":0,"index":2155},{"krate":0,"index":2158},{"krate":0,"index":2161},{"krate":0,"index":2175},{"krate":0,"index":2201},{"krate":0,"index":2214},{"krate":0,"index":2216},{"krate":0,"index":2222},{"krate":0,"index":2224},{"krate":0,"index":2226},{"krate":0,"index":2227},{"krate":0,"index":2228},{"krate":0,"index":2229},{"krate":0,"index":2230},{"krate":0,"index":2231},{"krate":0,"index":2232}],"decl_id":null,"docs":"keyboard input device","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3460},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8641556,"byte_end":8641564,"line_start":5754,"line_end":5754,"column_start":9,"column_end":17},"name":"NoKeymap","qualname":"::generated::c_api::wl_keyboard::KeymapFormat::NoKeymap","value":"KeymapFormat::NoKeymap","parent":{"krate":0,"index":3459},"children":[],"decl_id":null,"docs":"no keymap; client must understand how to interpret the raw keycode\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3463},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8641696,"byte_end":8641701,"line_start":5756,"line_end":5756,"column_start":9,"column_end":14},"name":"XkbV1","qualname":"::generated::c_api::wl_keyboard::KeymapFormat::XkbV1","value":"KeymapFormat::XkbV1","parent":{"krate":0,"index":3459},"children":[],"decl_id":null,"docs":"libxkbcommon compatible; to determine the xkb keycode, clients must add 8 to the key event keycode\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3459},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8641447,"byte_end":8641459,"line_start":5752,"line_end":5752,"column_start":14,"column_end":26},"name":"KeymapFormat","qualname":"::generated::c_api::wl_keyboard::KeymapFormat","value":"pub enum KeymapFormat {\n\n    #[doc =\n      \"no keymap; client must understand how to interpret the raw keycode\"]\n    NoKeymap = ,\n\n    #[doc =\n      \"libxkbcommon compatible; to determine the xkb keycode, clients must add 8 to the key event keycode\"]\n    XkbV1 = ,\n}","parent":null,"children":[{"krate":0,"index":3460},{"krate":0,"index":3463}],"decl_id":null,"docs":"keyboard mapping format","sig":null,"attributes":[{"value":"repr(u32)","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8641376,"byte_end":8641388,"line_start":5750,"line_end":5750,"column_start":5,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":2153},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8641752,"byte_end":8641760,"line_start":5759,"line_end":5759,"column_start":16,"column_end":24},"name":"from_raw","qualname":"<KeymapFormat>::from_raw","value":"pub fn from_raw(u32) -> Option<KeymapFormat>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2154},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8641990,"byte_end":8641996,"line_start":5766,"line_end":5766,"column_start":16,"column_end":22},"name":"to_raw","qualname":"<KeymapFormat>::to_raw","value":"pub fn to_raw(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3475},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8642290,"byte_end":8642298,"line_start":5775,"line_end":5775,"column_start":9,"column_end":17},"name":"Released","qualname":"::generated::c_api::wl_keyboard::KeyState::Released","value":"KeyState::Released","parent":{"krate":0,"index":3474},"children":[],"decl_id":null,"docs":"key is not pressed\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3478},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8642346,"byte_end":8642353,"line_start":5777,"line_end":5777,"column_start":9,"column_end":16},"name":"Pressed","qualname":"::generated::c_api::wl_keyboard::KeyState::Pressed","value":"KeyState::Pressed","parent":{"krate":0,"index":3474},"children":[],"decl_id":null,"docs":"key is pressed\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3474},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8642233,"byte_end":8642241,"line_start":5773,"line_end":5773,"column_start":14,"column_end":22},"name":"KeyState","qualname":"::generated::c_api::wl_keyboard::KeyState","value":"pub enum KeyState {\n\n    #[doc = \"key is not pressed\"]\n    Released = ,\n\n    #[doc = \"key is pressed\"]\n    Pressed = ,\n}","parent":null,"children":[{"krate":0,"index":3475},{"krate":0,"index":3478}],"decl_id":null,"docs":"physical key state","sig":null,"attributes":[{"value":"repr(u32)","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8642162,"byte_end":8642174,"line_start":5771,"line_end":5771,"column_start":5,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":2156},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8642400,"byte_end":8642408,"line_start":5780,"line_end":5780,"column_start":16,"column_end":24},"name":"from_raw","qualname":"<KeyState>::from_raw","value":"pub fn from_raw(u32) -> Option<KeyState>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2157},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8642628,"byte_end":8642634,"line_start":5787,"line_end":5787,"column_start":16,"column_end":22},"name":"to_raw","qualname":"<KeyState>::to_raw","value":"pub fn to_raw(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2159},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8642897,"byte_end":8642904,"line_start":5793,"line_end":5793,"column_start":9,"column_end":16},"name":"Release","qualname":"::generated::c_api::wl_keyboard::Request::Release","value":"Request::Release","parent":{"krate":0,"index":2158},"children":[],"decl_id":null,"docs":"release the keyboard object","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2158},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8642705,"byte_end":8642712,"line_start":5791,"line_end":5791,"column_start":14,"column_end":21},"name":"Request","qualname":"::generated::c_api::wl_keyboard::Request","value":"pub enum Request {\n\n    #[doc =\n      \"release the keyboard object\\n\\n\\n\\nThis is a destructor, once sent this object cannot be used any longer.\\nOnly available since version 3 of the interface\"]\n    Release,\n}","parent":null,"children":[{"krate":0,"index":2159}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":2176},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8644896,"byte_end":8644902,"line_start":5854,"line_end":5854,"column_start":9,"column_end":15},"name":"Keymap","qualname":"::generated::c_api::wl_keyboard::Event::Keymap","value":"Event::Keymap { format, fd, size }","parent":{"krate":0,"index":2175},"children":[],"decl_id":null,"docs":"keyboard mapping","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":2180},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8645130,"byte_end":8645135,"line_start":5860,"line_end":5860,"column_start":9,"column_end":14},"name":"Enter","qualname":"::generated::c_api::wl_keyboard::Event::Enter","value":"Event::Enter { serial, surface, keys }","parent":{"krate":0,"index":2175},"children":[],"decl_id":null,"docs":"enter event","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":2184},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8645466,"byte_end":8645471,"line_start":5866,"line_end":5866,"column_start":9,"column_end":14},"name":"Leave","qualname":"::generated::c_api::wl_keyboard::Event::Leave","value":"Event::Leave { serial, surface }","parent":{"krate":0,"index":2175},"children":[],"decl_id":null,"docs":"leave event","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":2187},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8645728,"byte_end":8645731,"line_start":5871,"line_end":5871,"column_start":9,"column_end":12},"name":"Key","qualname":"::generated::c_api::wl_keyboard::Event::Key","value":"Event::Key { serial, time, key, state }","parent":{"krate":0,"index":2175},"children":[],"decl_id":null,"docs":"key event","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":2192},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8646005,"byte_end":8646014,"line_start":5878,"line_end":5878,"column_start":9,"column_end":18},"name":"Modifiers","qualname":"::generated::c_api::wl_keyboard::Event::Modifiers","value":"Event::Modifiers { serial, mods_depressed, mods_latched, mods_locked, group }","parent":{"krate":0,"index":2175},"children":[],"decl_id":null,"docs":"modifier and group state","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":2198},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8646785,"byte_end":8646795,"line_start":5886,"line_end":5886,"column_start":9,"column_end":19},"name":"RepeatInfo","qualname":"::generated::c_api::wl_keyboard::Event::RepeatInfo","value":"Event::RepeatInfo { rate, delay }","parent":{"krate":0,"index":2175},"children":[],"decl_id":null,"docs":"repeat rate and delay","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2175},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8644718,"byte_end":8644723,"line_start":5852,"line_end":5852,"column_start":14,"column_end":19},"name":"Event","qualname":"::generated::c_api::wl_keyboard::Event","value":"pub enum Event {\n\n    #[doc =\n      \"keyboard mapping\\n\\nThis event provides a file descriptor to the client which can be\\nmemory-mapped to provide a keyboard mapping description.\"]\n    Keymap {\n        format: KeymapFormat,\n        fd: ::std::os::unix::io::RawFd,\n        size: u32,\n    },\n\n    #[doc =\n      \"enter event\\n\\nNotification that this seat's keyboard focus is on a certain\\nsurface.\"]\n    Enter {\n        serial: u32,\n        surface: Proxy<super::wl_surface::WlSurface>,\n        keys: Vec<u8>,\n    },\n\n    #[doc =\n      \"leave event\\n\\nNotification that this seat's keyboard focus is no longer on\\na certain surface.\\n\\nThe leave notification is sent before the enter notification\\nfor the new focus.\"]\n    Leave {\n        serial: u32,\n        surface: Proxy<super::wl_surface::WlSurface>,\n    },\n\n    #[doc =\n      \"key event\\n\\nA key was pressed or released.\\nThe time argument is a timestamp with millisecond\\ngranularity, with an undefined base.\"]\n    Key {\n        serial: u32,\n        time: u32,\n        key: u32,\n        state: KeyState,\n    },\n\n    #[doc =\n      \"modifier and group state\\n\\nNotifies clients that the modifier and/or group state has\\nchanged, and it should update its local state.\"]\n    Modifiers {\n        serial: u32,\n        mods_depressed: u32,\n        mods_latched: u32,\n        mods_locked: u32,\n        group: u32,\n    },\n\n    #[doc =\n      \"repeat rate and delay\\n\\nInforms the client about the keyboard's repeat rate and delay.\\n\\nThis event is sent as soon as the wl_keyboard object has been created,\\nand is guaranteed to be received by the client before any key press\\nevent.\\n\\nNegative values for either rate or delay are illegal. A rate of zero\\nwill disable any repeating (regardless of the value of delay).\\n\\nThis event can be sent later on as well with a new value if necessary,\\nso clients should continue listening for the event past the creation\\nof wl_keyboard.\\n\\nOnly available since version 4 of the interface\"]\n    RepeatInfo {\n        rate: i32,\n        delay: i32,\n    },\n}","parent":null,"children":[{"krate":0,"index":2176},{"krate":0,"index":2180},{"krate":0,"index":2184},{"krate":0,"index":2187},{"krate":0,"index":2192},{"krate":0,"index":2198}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2214},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8659112,"byte_end":8659122,"line_start":6209,"line_end":6209,"column_start":16,"column_end":26},"name":"WlKeyboard","qualname":"::generated::c_api::wl_keyboard::WlKeyboard","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":2222},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8659456,"byte_end":8659469,"line_start":6219,"line_end":6219,"column_start":15,"column_end":28},"name":"RequestsTrait","qualname":"::generated::c_api::wl_keyboard::RequestsTrait","value":"RequestsTrait","parent":null,"children":[{"krate":0,"index":2223}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2223},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8659688,"byte_end":8659695,"line_start":6221,"line_end":6221,"column_start":12,"column_end":19},"name":"release","qualname":"::generated::c_api::wl_keyboard::RequestsTrait::release","value":"pub fn release(&Self) -> ()","parent":{"krate":0,"index":2222},"children":[],"decl_id":null,"docs":"release the keyboard object","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2226},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8659963,"byte_end":8659980,"line_start":6230,"line_end":6230,"column_start":15,"column_end":32},"name":"REQ_RELEASE_SINCE","qualname":"::generated::c_api::wl_keyboard::REQ_RELEASE_SINCE","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" The minimal object version supporting this request\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2227},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8660074,"byte_end":8660090,"line_start":6232,"line_end":6232,"column_start":15,"column_end":31},"name":"EVT_KEYMAP_SINCE","qualname":"::generated::c_api::wl_keyboard::EVT_KEYMAP_SINCE","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" The minimal object version supporting this event\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2228},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8660184,"byte_end":8660199,"line_start":6234,"line_end":6234,"column_start":15,"column_end":30},"name":"EVT_ENTER_SINCE","qualname":"::generated::c_api::wl_keyboard::EVT_ENTER_SINCE","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" The minimal object version supporting this event\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2229},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8660293,"byte_end":8660308,"line_start":6236,"line_end":6236,"column_start":15,"column_end":30},"name":"EVT_LEAVE_SINCE","qualname":"::generated::c_api::wl_keyboard::EVT_LEAVE_SINCE","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" The minimal object version supporting this event\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2230},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8660402,"byte_end":8660415,"line_start":6238,"line_end":6238,"column_start":15,"column_end":28},"name":"EVT_KEY_SINCE","qualname":"::generated::c_api::wl_keyboard::EVT_KEY_SINCE","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" The minimal object version supporting this event\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2231},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8660509,"byte_end":8660528,"line_start":6240,"line_end":6240,"column_start":15,"column_end":34},"name":"EVT_MODIFIERS_SINCE","qualname":"::generated::c_api::wl_keyboard::EVT_MODIFIERS_SINCE","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" The minimal object version supporting this event\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2232},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8660622,"byte_end":8660643,"line_start":6242,"line_end":6242,"column_start":15,"column_end":36},"name":"EVT_REPEAT_INFO_SINCE","qualname":"::generated::c_api::wl_keyboard::EVT_REPEAT_INFO_SINCE","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" The minimal object version supporting this event\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":2233},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8661077,"byte_end":8661085,"line_start":6245,"line_end":6245,"column_start":9,"column_end":17},"name":"wl_touch","qualname":"::generated::c_api::wl_touch","value":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","parent":null,"children":[{"krate":0,"index":2234},{"krate":0,"index":2235},{"krate":0,"index":2236},{"krate":0,"index":2237},{"krate":0,"index":2238},{"krate":0,"index":2239},{"krate":0,"index":2240},{"krate":0,"index":4366},{"krate":0,"index":2241},{"krate":0,"index":2242},{"krate":0,"index":2243},{"krate":0,"index":2244},{"krate":0,"index":2245},{"krate":0,"index":2246},{"krate":0,"index":2247},{"krate":0,"index":2248},{"krate":0,"index":2249},{"krate":0,"index":2250},{"krate":0,"index":2251},{"krate":0,"index":2254},{"krate":0,"index":2268},{"krate":0,"index":2289},{"krate":0,"index":2302},{"krate":0,"index":2304},{"krate":0,"index":2310},{"krate":0,"index":2312},{"krate":0,"index":2314},{"krate":0,"index":2315},{"krate":0,"index":2316},{"krate":0,"index":2317},{"krate":0,"index":2318},{"krate":0,"index":2319}],"decl_id":null,"docs":"touchscreen input device","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2252},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8661557,"byte_end":8661564,"line_start":6254,"line_end":6254,"column_start":9,"column_end":16},"name":"Release","qualname":"::generated::c_api::wl_touch::Request::Release","value":"Request::Release","parent":{"krate":0,"index":2251},"children":[],"decl_id":null,"docs":"release the touch object","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2251},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8661368,"byte_end":8661375,"line_start":6252,"line_end":6252,"column_start":14,"column_end":21},"name":"Request","qualname":"::generated::c_api::wl_touch::Request","value":"pub enum Request {\n\n    #[doc =\n      \"release the touch object\\n\\n\\n\\nThis is a destructor, once sent this object cannot be used any longer.\\nOnly available since version 3 of the interface\"]\n    Release,\n}","parent":null,"children":[{"krate":0,"index":2252}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":2269},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8663696,"byte_end":8663700,"line_start":6315,"line_end":6315,"column_start":9,"column_end":13},"name":"Down","qualname":"::generated::c_api::wl_touch::Event::Down","value":"Event::Down { serial, time, surface, id, x, y }","parent":{"krate":0,"index":2268},"children":[],"decl_id":null,"docs":"touch down event and beginning of a touch sequence","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":2276},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8664113,"byte_end":8664115,"line_start":6324,"line_end":6324,"column_start":9,"column_end":11},"name":"Up","qualname":"::generated::c_api::wl_touch::Event::Up","value":"Event::Up { serial, time, id }","parent":{"krate":0,"index":2268},"children":[],"decl_id":null,"docs":"end of a touch event sequence","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":2280},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8664256,"byte_end":8664262,"line_start":6326,"line_end":6326,"column_start":9,"column_end":15},"name":"Motion","qualname":"::generated::c_api::wl_touch::Event::Motion","value":"Event::Motion { time, id, x, y }","parent":{"krate":0,"index":2268},"children":[],"decl_id":null,"docs":"update of touch point coordinates","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2285},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8664401,"byte_end":8664406,"line_start":6328,"line_end":6328,"column_start":9,"column_end":14},"name":"Frame","qualname":"::generated::c_api::wl_touch::Event::Frame","value":"Event::Frame","parent":{"krate":0,"index":2268},"children":[],"decl_id":null,"docs":"end of touch frame event","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2287},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8664823,"byte_end":8664829,"line_start":6330,"line_end":6330,"column_start":9,"column_end":15},"name":"Cancel","qualname":"::generated::c_api::wl_touch::Event::Cancel","value":"Event::Cancel","parent":{"krate":0,"index":2268},"children":[],"decl_id":null,"docs":"touch session cancelled","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2268},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8663378,"byte_end":8663383,"line_start":6313,"line_end":6313,"column_start":14,"column_end":19},"name":"Event","qualname":"::generated::c_api::wl_touch::Event","value":"pub enum Event {\n\n    #[doc =\n      \"touch down event and beginning of a touch sequence\\n\\nA new touch point has appeared on the surface. This touch point is\\nassigned a unique ID. Future events from this touch point reference\\nthis ID. The ID ceases to be valid after a touch up event and may be\\nreused in the future.\"]\n    Down {\n        serial: u32,\n        time: u32,\n        surface: Proxy<super::wl_surface::WlSurface>,\n        id: i32,\n        x: f64,\n        y: f64,\n    },\n\n    #[doc =\n      \"end of a touch event sequence\\n\\nThe touch point has disappeared. No further events will be sent for\\nthis touch point and the touch point's ID is released and may be\\nreused in a future touch down event.\"]\n    Up {\n        serial: u32,\n        time: u32,\n        id: i32,\n    },\n\n    #[doc =\n      \"update of touch point coordinates\\n\\nA touch point has changed coordinates.\"]\n    Motion {\n        time: u32,\n        id: i32,\n        x: f64,\n        y: f64,\n    },\n\n    #[doc =\n      \"end of touch frame event\\n\\nIndicates the end of a contact point list.\"]\n    Frame,\n\n    #[doc =\n      \"touch session cancelled\\n\\nSent if the compositor decides the touch stream is a global\\ngesture. No further events are sent to the clients from that\\nparticular gesture. Touch cancellation applies to all touch points\\ncurrently active on this client's surface. The client is\\nresponsible for finalizing the touch points, future touch points on\\nthis surface may reuse the touch point ID.\"]\n    Cancel,\n}","parent":null,"children":[{"krate":0,"index":2269},{"krate":0,"index":2276},{"krate":0,"index":2280},{"krate":0,"index":2285},{"krate":0,"index":2287}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2302},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8673408,"byte_end":8673415,"line_start":6564,"line_end":6564,"column_start":16,"column_end":23},"name":"WlTouch","qualname":"::generated::c_api::wl_touch::WlTouch","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":2310},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8673740,"byte_end":8673753,"line_start":6574,"line_end":6574,"column_start":15,"column_end":28},"name":"RequestsTrait","qualname":"::generated::c_api::wl_touch::RequestsTrait","value":"RequestsTrait","parent":null,"children":[{"krate":0,"index":2311}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2311},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8673969,"byte_end":8673976,"line_start":6576,"line_end":6576,"column_start":12,"column_end":19},"name":"release","qualname":"::generated::c_api::wl_touch::RequestsTrait::release","value":"pub fn release(&Self) -> ()","parent":{"krate":0,"index":2310},"children":[],"decl_id":null,"docs":"release the touch object","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2314},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8674241,"byte_end":8674258,"line_start":6585,"line_end":6585,"column_start":15,"column_end":32},"name":"REQ_RELEASE_SINCE","qualname":"::generated::c_api::wl_touch::REQ_RELEASE_SINCE","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" The minimal object version supporting this request\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2315},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8674352,"byte_end":8674366,"line_start":6587,"line_end":6587,"column_start":15,"column_end":29},"name":"EVT_DOWN_SINCE","qualname":"::generated::c_api::wl_touch::EVT_DOWN_SINCE","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" The minimal object version supporting this event\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2316},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8674460,"byte_end":8674472,"line_start":6589,"line_end":6589,"column_start":15,"column_end":27},"name":"EVT_UP_SINCE","qualname":"::generated::c_api::wl_touch::EVT_UP_SINCE","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" The minimal object version supporting this event\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2317},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8674566,"byte_end":8674582,"line_start":6591,"line_end":6591,"column_start":15,"column_end":31},"name":"EVT_MOTION_SINCE","qualname":"::generated::c_api::wl_touch::EVT_MOTION_SINCE","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" The minimal object version supporting this event\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2318},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8674676,"byte_end":8674691,"line_start":6593,"line_end":6593,"column_start":15,"column_end":30},"name":"EVT_FRAME_SINCE","qualname":"::generated::c_api::wl_touch::EVT_FRAME_SINCE","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" The minimal object version supporting this event\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2319},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8674785,"byte_end":8674801,"line_start":6595,"line_end":6595,"column_start":15,"column_end":31},"name":"EVT_CANCEL_SINCE","qualname":"::generated::c_api::wl_touch::EVT_CANCEL_SINCE","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" The minimal object version supporting this event\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":2320},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8675241,"byte_end":8675250,"line_start":6598,"line_end":6598,"column_start":9,"column_end":18},"name":"wl_output","qualname":"::generated::c_api::wl_output","value":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","parent":null,"children":[{"krate":0,"index":2321},{"krate":0,"index":2322},{"krate":0,"index":2323},{"krate":0,"index":2324},{"krate":0,"index":2325},{"krate":0,"index":2326},{"krate":0,"index":2327},{"krate":0,"index":4394},{"krate":0,"index":2328},{"krate":0,"index":2329},{"krate":0,"index":2330},{"krate":0,"index":2331},{"krate":0,"index":2332},{"krate":0,"index":2333},{"krate":0,"index":2334},{"krate":0,"index":2335},{"krate":0,"index":2336},{"krate":0,"index":2337},{"krate":0,"index":3489},{"krate":0,"index":3515},{"krate":0,"index":3513},{"krate":0,"index":3511},{"krate":0,"index":3508},{"krate":0,"index":3509},{"krate":0,"index":2338},{"krate":0,"index":3516},{"krate":0,"index":3548},{"krate":0,"index":3546},{"krate":0,"index":3544},{"krate":0,"index":3541},{"krate":0,"index":3542},{"krate":0,"index":2341},{"krate":0,"index":3549},{"krate":0,"index":3571},{"krate":0,"index":3567},{"krate":0,"index":3568},{"krate":0,"index":3564},{"krate":0,"index":3565},{"krate":0,"index":3562},{"krate":0,"index":3556},{"krate":0,"index":3554},{"krate":0,"index":3551},{"krate":0,"index":3572},{"krate":0,"index":3578},{"krate":0,"index":3580},{"krate":0,"index":3582},{"krate":0,"index":3584},{"krate":0,"index":3586},{"krate":0,"index":3594},{"krate":0,"index":3597},{"krate":0,"index":3599},{"krate":0,"index":3602},{"krate":0,"index":3604},{"krate":0,"index":3607},{"krate":0,"index":3609},{"krate":0,"index":3612},{"krate":0,"index":3614},{"krate":0,"index":3617},{"krate":0,"index":3620},{"krate":0,"index":2344},{"krate":0,"index":2347},{"krate":0,"index":2350},{"krate":0,"index":2364},{"krate":0,"index":2383},{"krate":0,"index":2398},{"krate":0,"index":2400},{"krate":0,"index":2406},{"krate":0,"index":2408},{"krate":0,"index":2410},{"krate":0,"index":2411},{"krate":0,"index":2412},{"krate":0,"index":2413},{"krate":0,"index":2414}],"decl_id":null,"docs":"compositor output region","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3490},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8675777,"byte_end":8675784,"line_start":6610,"line_end":6610,"column_start":9,"column_end":16},"name":"Unknown","qualname":"::generated::c_api::wl_output::Subpixel::Unknown","value":"Subpixel::Unknown","parent":{"krate":0,"index":3489},"children":[],"decl_id":null,"docs":"unknown geometry\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3493},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8675829,"byte_end":8675833,"line_start":6612,"line_end":6612,"column_start":9,"column_end":13},"name":"None","qualname":"::generated::c_api::wl_output::Subpixel::None","value":"Subpixel::None","parent":{"krate":0,"index":3489},"children":[],"decl_id":null,"docs":"no geometry\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3496},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8675881,"byte_end":8675894,"line_start":6614,"line_end":6614,"column_start":9,"column_end":22},"name":"HorizontalRgb","qualname":"::generated::c_api::wl_output::Subpixel::HorizontalRgb","value":"Subpixel::HorizontalRgb","parent":{"krate":0,"index":3489},"children":[],"decl_id":null,"docs":"horizontal RGB\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3499},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8675942,"byte_end":8675955,"line_start":6616,"line_end":6616,"column_start":9,"column_end":22},"name":"HorizontalBgr","qualname":"::generated::c_api::wl_output::Subpixel::HorizontalBgr","value":"Subpixel::HorizontalBgr","parent":{"krate":0,"index":3489},"children":[],"decl_id":null,"docs":"horizontal BGR\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3502},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8676001,"byte_end":8676012,"line_start":6618,"line_end":6618,"column_start":9,"column_end":20},"name":"VerticalRgb","qualname":"::generated::c_api::wl_output::Subpixel::VerticalRgb","value":"Subpixel::VerticalRgb","parent":{"krate":0,"index":3489},"children":[],"decl_id":null,"docs":"vertical RGB\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3505},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8676058,"byte_end":8676069,"line_start":6620,"line_end":6620,"column_start":9,"column_end":20},"name":"VerticalBgr","qualname":"::generated::c_api::wl_output::Subpixel::VerticalBgr","value":"Subpixel::VerticalBgr","parent":{"krate":0,"index":3489},"children":[],"decl_id":null,"docs":"vertical BGR\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3489},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8675722,"byte_end":8675730,"line_start":6608,"line_end":6608,"column_start":14,"column_end":22},"name":"Subpixel","qualname":"::generated::c_api::wl_output::Subpixel","value":"pub enum Subpixel {\n\n    #[doc = \"unknown geometry\"]\n    Unknown = ,\n\n    #[doc = \"no geometry\"]\n    None = ,\n\n    #[doc = \"horizontal RGB\"]\n    HorizontalRgb = ,\n\n    #[doc = \"horizontal BGR\"]\n    HorizontalBgr = ,\n\n    #[doc = \"vertical RGB\"]\n    VerticalRgb = ,\n\n    #[doc = \"vertical BGR\"]\n    VerticalBgr = ,\n}","parent":null,"children":[{"krate":0,"index":3490},{"krate":0,"index":3493},{"krate":0,"index":3496},{"krate":0,"index":3499},{"krate":0,"index":3502},{"krate":0,"index":3505}],"decl_id":null,"docs":"subpixel geometry information","sig":null,"attributes":[{"value":"repr(u32)","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8675651,"byte_end":8675663,"line_start":6606,"line_end":6606,"column_start":5,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":2339},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8676116,"byte_end":8676124,"line_start":6623,"line_end":6623,"column_start":16,"column_end":24},"name":"from_raw","qualname":"<Subpixel>::from_raw","value":"pub fn from_raw(u32) -> Option<Subpixel>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2340},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8676544,"byte_end":8676550,"line_start":6634,"line_end":6634,"column_start":16,"column_end":22},"name":"to_raw","qualname":"<Subpixel>::to_raw","value":"pub fn to_raw(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3517},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8677228,"byte_end":8677234,"line_start":6643,"line_end":6643,"column_start":9,"column_end":15},"name":"Normal","qualname":"::generated::c_api::wl_output::Transform::Normal","value":"Transform::Normal","parent":{"krate":0,"index":3516},"children":[],"decl_id":null,"docs":"no transform\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3520},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8677296,"byte_end":8677299,"line_start":6645,"line_end":6645,"column_start":9,"column_end":12},"name":"_90","qualname":"::generated::c_api::wl_output::Transform::_90","value":"Transform::_90","parent":{"krate":0,"index":3516},"children":[],"decl_id":null,"docs":"90 degrees counter-clockwise\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3523},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8677362,"byte_end":8677366,"line_start":6647,"line_end":6647,"column_start":9,"column_end":13},"name":"_180","qualname":"::generated::c_api::wl_output::Transform::_180","value":"Transform::_180","parent":{"krate":0,"index":3516},"children":[],"decl_id":null,"docs":"180 degrees counter-clockwise\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3526},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8677429,"byte_end":8677433,"line_start":6649,"line_end":6649,"column_start":9,"column_end":13},"name":"_270","qualname":"::generated::c_api::wl_output::Transform::_270","value":"Transform::_270","parent":{"krate":0,"index":3516},"children":[],"decl_id":null,"docs":"270 degrees counter-clockwise\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3529},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8677505,"byte_end":8677512,"line_start":6651,"line_end":6651,"column_start":9,"column_end":16},"name":"Flipped","qualname":"::generated::c_api::wl_output::Transform::Flipped","value":"Transform::Flipped","parent":{"krate":0,"index":3516},"children":[],"decl_id":null,"docs":"180 degree flip around a vertical axis\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3532},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8677590,"byte_end":8677599,"line_start":6653,"line_end":6653,"column_start":9,"column_end":18},"name":"Flipped90","qualname":"::generated::c_api::wl_output::Transform::Flipped90","value":"Transform::Flipped90","parent":{"krate":0,"index":3516},"children":[],"decl_id":null,"docs":"flip and rotate 90 degrees counter-clockwise\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3535},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8677678,"byte_end":8677688,"line_start":6655,"line_end":6655,"column_start":9,"column_end":19},"name":"Flipped180","qualname":"::generated::c_api::wl_output::Transform::Flipped180","value":"Transform::Flipped180","parent":{"krate":0,"index":3516},"children":[],"decl_id":null,"docs":"flip and rotate 180 degrees counter-clockwise\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3538},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8677767,"byte_end":8677777,"line_start":6657,"line_end":6657,"column_start":9,"column_end":19},"name":"Flipped270","qualname":"::generated::c_api::wl_output::Transform::Flipped270","value":"Transform::Flipped270","parent":{"krate":0,"index":3516},"children":[],"decl_id":null,"docs":"flip and rotate 270 degrees counter-clockwise\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3516},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8677176,"byte_end":8677185,"line_start":6641,"line_end":6641,"column_start":14,"column_end":23},"name":"Transform","qualname":"::generated::c_api::wl_output::Transform","value":"pub enum Transform {\n\n    #[doc = \"no transform\"]\n    Normal = ,\n\n    #[doc = \"90 degrees counter-clockwise\"]\n    _90 = ,\n\n    #[doc = \"180 degrees counter-clockwise\"]\n    _180 = ,\n\n    #[doc = \"270 degrees counter-clockwise\"]\n    _270 = ,\n\n    #[doc = \"180 degree flip around a vertical axis\"]\n    Flipped = ,\n\n    #[doc = \"flip and rotate 90 degrees counter-clockwise\"]\n    Flipped90 = ,\n\n    #[doc = \"flip and rotate 180 degrees counter-clockwise\"]\n    Flipped180 = ,\n\n    #[doc = \"flip and rotate 270 degrees counter-clockwise\"]\n    Flipped270 = ,\n}","parent":null,"children":[{"krate":0,"index":3517},{"krate":0,"index":3520},{"krate":0,"index":3523},{"krate":0,"index":3526},{"krate":0,"index":3529},{"krate":0,"index":3532},{"krate":0,"index":3535},{"krate":0,"index":3538}],"decl_id":null,"docs":"transform from framebuffer to output","sig":null,"attributes":[{"value":"repr(u32)","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8677105,"byte_end":8677117,"line_start":6639,"line_end":6639,"column_start":5,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":2342},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8677825,"byte_end":8677833,"line_start":6660,"line_end":6660,"column_start":16,"column_end":24},"name":"from_raw","qualname":"<Transform>::from_raw","value":"pub fn from_raw(u32) -> Option<Transform>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2343},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8678334,"byte_end":8678340,"line_start":6673,"line_end":6673,"column_start":16,"column_end":22},"name":"to_raw","qualname":"<Transform>::to_raw","value":"pub fn to_raw(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3549},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8678566,"byte_end":8678570,"line_start":6677,"line_end":6677,"column_start":169,"column_end":173},"name":"Mode","qualname":"::generated::c_api::wl_output::Mode","value":"Mode {  }","parent":null,"children":[{"krate":0,"index":3550}],"decl_id":null,"docs":"mode information","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3587},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8678634,"byte_end":8678641,"line_start":6677,"line_end":6677,"column_start":237,"column_end":244},"name":"Current","qualname":"::generated::c_api::wl_output::Mode::Current","value":"Mode","parent":{"krate":0,"index":3586},"children":[],"decl_id":null,"docs":"indicates this is the current mode\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":3588},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8678705,"byte_end":8678714,"line_start":6677,"line_end":6677,"column_start":308,"column_end":317},"name":"Preferred","qualname":"::generated::c_api::wl_output::Mode::Preferred","value":"Mode","parent":{"krate":0,"index":3586},"children":[],"decl_id":null,"docs":"indicates this is the preferred mode\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2345},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8678756,"byte_end":8678764,"line_start":6679,"line_end":6679,"column_start":16,"column_end":24},"name":"from_raw","qualname":"<Mode>::from_raw","value":"pub fn from_raw(u32) -> Option<Mode>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2346},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8678862,"byte_end":8678868,"line_start":6682,"line_end":6682,"column_start":16,"column_end":22},"name":"to_raw","qualname":"<Mode>::to_raw","value":"pub fn to_raw(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2348},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8679231,"byte_end":8679238,"line_start":6688,"line_end":6688,"column_start":9,"column_end":16},"name":"Release","qualname":"::generated::c_api::wl_output::Request::Release","value":"Request::Release","parent":{"krate":0,"index":2347},"children":[],"decl_id":null,"docs":"release the output object","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2347},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8678938,"byte_end":8678945,"line_start":6686,"line_end":6686,"column_start":14,"column_end":21},"name":"Request","qualname":"::generated::c_api::wl_output::Request","value":"pub enum Request {\n\n    #[doc =\n      \"release the output object\\n\\nUsing this request a client can tell the server that it is not going to\\nuse the output object anymore.\\n\\nThis is a destructor, once sent this object cannot be used any longer.\\nOnly available since version 3 of the interface\"]\n    Release,\n}","parent":null,"children":[{"krate":0,"index":2348}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":2365},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8681277,"byte_end":8681285,"line_start":6749,"line_end":6749,"column_start":9,"column_end":17},"name":"Geometry","qualname":"::generated::c_api::wl_output::Event::Geometry","value":"Event::Geometry { x, y, physical_width, physical_height, subpixel, make, model, transform }","parent":{"krate":0,"index":2364},"children":[],"decl_id":null,"docs":"properties of the output","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":2374},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8682250,"byte_end":8682254,"line_start":6760,"line_end":6760,"column_start":9,"column_end":13},"name":"Mode","qualname":"::generated::c_api::wl_output::Event::Mode","value":"Event::Mode { flags, width, height, refresh }","parent":{"krate":0,"index":2364},"children":[],"decl_id":null,"docs":"advertise available modes for the output","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2379},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8682745,"byte_end":8682749,"line_start":6767,"line_end":6767,"column_start":9,"column_end":13},"name":"Done","qualname":"::generated::c_api::wl_output::Event::Done","value":"Event::Done","parent":{"krate":0,"index":2364},"children":[],"decl_id":null,"docs":"sent all information about output","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":2381},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8683648,"byte_end":8683653,"line_start":6769,"line_end":6769,"column_start":9,"column_end":14},"name":"Scale","qualname":"::generated::c_api::wl_output::Event::Scale","value":"Event::Scale { factor }","parent":{"krate":0,"index":2364},"children":[],"decl_id":null,"docs":"output scaling properties","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2364},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8681052,"byte_end":8681057,"line_start":6747,"line_end":6747,"column_start":14,"column_end":19},"name":"Event","qualname":"::generated::c_api::wl_output::Event","value":"pub enum Event {\n\n    #[doc =\n      \"properties of the output\\n\\nThe geometry event describes geometric properties of the output.\\nThe event is sent when binding to the output object and whenever\\nany of the properties change.\"]\n    Geometry {\n        x: i32,\n        y: i32,\n        physical_width: i32,\n        physical_height: i32,\n        subpixel: Subpixel,\n        make: String,\n        model: String,\n        transform: Transform,\n    },\n\n    #[doc =\n      \"advertise available modes for the output\\n\\nThe mode event describes an available mode for the output.\\n\\nThe event is sent when binding to the output object and there\\nwill always be one mode, the current mode.  The event is sent\\nagain if an output changes mode, for the mode that is now\\ncurrent.  In other words, the current mode is always the last\\nmode that was received with the current flag set.\\n\\nThe size of a mode is given in physical hardware units of\\nthe output device. This is not necessarily the same as\\nthe output size in the global compositor space. For instance,\\nthe output may be scaled, as described in wl_output.scale,\\nor transformed, as described in wl_output.transform.\"]\n    Mode {\n        flags: Mode,\n        width: i32,\n        height: i32,\n        refresh: i32,\n    },\n\n    #[doc =\n      \"sent all information about output\\n\\nThis event is sent after all other properties have been\\nsent after binding to the output object and after any\\nother property changes done after that. This allows\\nchanges to the output properties to be seen as\\natomic, even if they happen via multiple events.\\n\\nOnly available since version 2 of the interface\"]\n    Done,\n\n    #[doc =\n      \"output scaling properties\\n\\nThis event contains scaling geometry information\\nthat is not in the geometry event. It may be sent after\\nbinding the output object or if the output scale changes\\nlater. If it is not sent, the client should assume a\\nscale of 1.\\n\\nA scale larger than 1 means that the compositor will\\nautomatically scale surface buffers by this amount\\nwhen rendering. This is used for very high resolution\\ndisplays where applications rendering at the native\\nresolution would be too small to be legible.\\n\\nIt is intended that scaling aware clients track the\\ncurrent output of a surface, and if it is on a scaled\\noutput it should use wl_surface.set_buffer_scale with\\nthe scale of the output. That way the compositor can\\navoid scaling the surface, and the client can supply\\na higher detail image.\\n\\nOnly available since version 2 of the interface\"]\n    Scale {\n        factor: i32,\n    },\n}","parent":null,"children":[{"krate":0,"index":2365},{"krate":0,"index":2374},{"krate":0,"index":2379},{"krate":0,"index":2381}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2398},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8692594,"byte_end":8692602,"line_start":6999,"line_end":6999,"column_start":16,"column_end":24},"name":"WlOutput","qualname":"::generated::c_api::wl_output::WlOutput","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":2406},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8692930,"byte_end":8692943,"line_start":7009,"line_end":7009,"column_start":15,"column_end":28},"name":"RequestsTrait","qualname":"::generated::c_api::wl_output::RequestsTrait","value":"RequestsTrait","parent":null,"children":[{"krate":0,"index":2407}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2407},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8693263,"byte_end":8693270,"line_start":7011,"line_end":7011,"column_start":12,"column_end":19},"name":"release","qualname":"::generated::c_api::wl_output::RequestsTrait::release","value":"pub fn release(&Self) -> ()","parent":{"krate":0,"index":2406},"children":[],"decl_id":null,"docs":"release the output object","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2410},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8693536,"byte_end":8693553,"line_start":7020,"line_end":7020,"column_start":15,"column_end":32},"name":"REQ_RELEASE_SINCE","qualname":"::generated::c_api::wl_output::REQ_RELEASE_SINCE","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" The minimal object version supporting this request\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2411},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8693647,"byte_end":8693665,"line_start":7022,"line_end":7022,"column_start":15,"column_end":33},"name":"EVT_GEOMETRY_SINCE","qualname":"::generated::c_api::wl_output::EVT_GEOMETRY_SINCE","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" The minimal object version supporting this event\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2412},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8693759,"byte_end":8693773,"line_start":7024,"line_end":7024,"column_start":15,"column_end":29},"name":"EVT_MODE_SINCE","qualname":"::generated::c_api::wl_output::EVT_MODE_SINCE","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" The minimal object version supporting this event\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2413},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8693867,"byte_end":8693881,"line_start":7026,"line_end":7026,"column_start":15,"column_end":29},"name":"EVT_DONE_SINCE","qualname":"::generated::c_api::wl_output::EVT_DONE_SINCE","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" The minimal object version supporting this event\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2414},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8693975,"byte_end":8693990,"line_start":7028,"line_end":7028,"column_start":15,"column_end":30},"name":"EVT_SCALE_SINCE","qualname":"::generated::c_api::wl_output::EVT_SCALE_SINCE","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" The minimal object version supporting this event\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":2415},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8694163,"byte_end":8694172,"line_start":7031,"line_end":7031,"column_start":9,"column_end":18},"name":"wl_region","qualname":"::generated::c_api::wl_region","value":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","parent":null,"children":[{"krate":0,"index":2416},{"krate":0,"index":2417},{"krate":0,"index":2418},{"krate":0,"index":2419},{"krate":0,"index":2420},{"krate":0,"index":2421},{"krate":0,"index":2422},{"krate":0,"index":4422},{"krate":0,"index":2423},{"krate":0,"index":2424},{"krate":0,"index":2425},{"krate":0,"index":2426},{"krate":0,"index":2427},{"krate":0,"index":2428},{"krate":0,"index":2429},{"krate":0,"index":2430},{"krate":0,"index":2431},{"krate":0,"index":2432},{"krate":0,"index":2433},{"krate":0,"index":2446},{"krate":0,"index":2462},{"krate":0,"index":2463},{"krate":0,"index":2476},{"krate":0,"index":2478},{"krate":0,"index":2484},{"krate":0,"index":2488},{"krate":0,"index":2492},{"krate":0,"index":2493},{"krate":0,"index":2494}],"decl_id":null,"docs":"region interface","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2434},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8694641,"byte_end":8694648,"line_start":7040,"line_end":7040,"column_start":9,"column_end":16},"name":"Destroy","qualname":"::generated::c_api::wl_region::Request::Destroy","value":"Request::Destroy","parent":{"krate":0,"index":2433},"children":[],"decl_id":null,"docs":"destroy region","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":2436},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8694747,"byte_end":8694750,"line_start":7042,"line_end":7042,"column_start":9,"column_end":12},"name":"Add","qualname":"::generated::c_api::wl_region::Request::Add","value":"Request::Add { x, y, width, height }","parent":{"krate":0,"index":2433},"children":[],"decl_id":null,"docs":"add rectangle to region","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":2441},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8694964,"byte_end":8694972,"line_start":7049,"line_end":7049,"column_start":9,"column_end":17},"name":"Subtract","qualname":"::generated::c_api::wl_region::Request::Subtract","value":"Request::Subtract { x, y, width, height }","parent":{"krate":0,"index":2433},"children":[],"decl_id":null,"docs":"subtract rectangle from region","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2433},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8694455,"byte_end":8694462,"line_start":7038,"line_end":7038,"column_start":14,"column_end":21},"name":"Request","qualname":"::generated::c_api::wl_region::Request","value":"pub enum Request {\n\n    #[doc =\n      \"destroy region\\n\\nDestroy the region.  This will invalidate the object ID.\\n\\nThis is a destructor, once sent this object cannot be used any longer.\"]\n    Destroy,\n\n    #[doc =\n      \"add rectangle to region\\n\\nAdd the specified rectangle to the region.\"]\n    Add {\n        x: i32,\n        y: i32,\n        width: i32,\n        height: i32,\n    },\n\n    #[doc =\n      \"subtract rectangle from region\\n\\nSubtract the specified rectangle from the region.\"]\n    Subtract {\n        x: i32,\n        y: i32,\n        width: i32,\n        height: i32,\n    },\n}","parent":null,"children":[{"krate":0,"index":2434},{"krate":0,"index":2436},{"krate":0,"index":2441}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2462},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8699676,"byte_end":8699681,"line_start":7194,"line_end":7194,"column_start":14,"column_end":19},"name":"Event","qualname":"::generated::c_api::wl_region::Event","value":"pub enum Event { }","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2476},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8700981,"byte_end":8700989,"line_start":7237,"line_end":7237,"column_start":16,"column_end":24},"name":"WlRegion","qualname":"::generated::c_api::wl_region::WlRegion","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":2484},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8701317,"byte_end":8701330,"line_start":7247,"line_end":7247,"column_start":15,"column_end":28},"name":"RequestsTrait","qualname":"::generated::c_api::wl_region::RequestsTrait","value":"RequestsTrait","parent":null,"children":[{"krate":0,"index":2485},{"krate":0,"index":2486},{"krate":0,"index":2487}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2485},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8701542,"byte_end":8701549,"line_start":7249,"line_end":7249,"column_start":12,"column_end":19},"name":"destroy","qualname":"::generated::c_api::wl_region::RequestsTrait::destroy","value":"pub fn destroy(&Self) -> ()","parent":{"krate":0,"index":2484},"children":[],"decl_id":null,"docs":"destroy region","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2486},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8701664,"byte_end":8701667,"line_start":7251,"line_end":7251,"column_start":12,"column_end":15},"name":"add","qualname":"::generated::c_api::wl_region::RequestsTrait::add","value":"pub fn add(&Self, i32, i32, i32, i32) -> ()","parent":{"krate":0,"index":2484},"children":[],"decl_id":null,"docs":"add rectangle to region","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2487},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8701837,"byte_end":8701845,"line_start":7253,"line_end":7253,"column_start":12,"column_end":20},"name":"subtract","qualname":"::generated::c_api::wl_region::RequestsTrait::subtract","value":"pub fn subtract(&Self, i32, i32, i32, i32) -> ()","parent":{"krate":0,"index":2484},"children":[],"decl_id":null,"docs":"subtract rectangle from region","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2492},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8702696,"byte_end":8702713,"line_start":7280,"line_end":7280,"column_start":15,"column_end":32},"name":"REQ_DESTROY_SINCE","qualname":"::generated::c_api::wl_region::REQ_DESTROY_SINCE","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" The minimal object version supporting this request\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2493},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8702809,"byte_end":8702822,"line_start":7282,"line_end":7282,"column_start":15,"column_end":28},"name":"REQ_ADD_SINCE","qualname":"::generated::c_api::wl_region::REQ_ADD_SINCE","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" The minimal object version supporting this request\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2494},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8702918,"byte_end":8702936,"line_start":7284,"line_end":7284,"column_start":15,"column_end":33},"name":"REQ_SUBTRACT_SINCE","qualname":"::generated::c_api::wl_region::REQ_SUBTRACT_SINCE","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" The minimal object version supporting this request\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":2495},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8703917,"byte_end":8703933,"line_start":7287,"line_end":7287,"column_start":9,"column_end":25},"name":"wl_subcompositor","qualname":"::generated::c_api::wl_subcompositor","value":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","parent":null,"children":[{"krate":0,"index":2496},{"krate":0,"index":2497},{"krate":0,"index":2498},{"krate":0,"index":2499},{"krate":0,"index":2500},{"krate":0,"index":2501},{"krate":0,"index":2502},{"krate":0,"index":4450},{"krate":0,"index":2503},{"krate":0,"index":2504},{"krate":0,"index":2505},{"krate":0,"index":2506},{"krate":0,"index":2507},{"krate":0,"index":2508},{"krate":0,"index":2509},{"krate":0,"index":2510},{"krate":0,"index":2511},{"krate":0,"index":2512},{"krate":0,"index":3640},{"krate":0,"index":3651},{"krate":0,"index":3649},{"krate":0,"index":3647},{"krate":0,"index":3644},{"krate":0,"index":3645},{"krate":0,"index":2513},{"krate":0,"index":2516},{"krate":0,"index":2523},{"krate":0,"index":2538},{"krate":0,"index":2539},{"krate":0,"index":2552},{"krate":0,"index":2554},{"krate":0,"index":2560},{"krate":0,"index":2564},{"krate":0,"index":2568},{"krate":0,"index":2569}],"decl_id":null,"docs":"sub-surface compositing","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3641},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8704346,"byte_end":8704356,"line_start":7298,"line_end":7298,"column_start":9,"column_end":19},"name":"BadSurface","qualname":"::generated::c_api::wl_subcompositor::Error::BadSurface","value":"Error::BadSurface","parent":{"krate":0,"index":3640},"children":[],"decl_id":null,"docs":"the to-be sub-surface is invalid\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3640},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8704278,"byte_end":8704283,"line_start":7296,"line_end":7296,"column_start":14,"column_end":19},"name":"Error","qualname":"::generated::c_api::wl_subcompositor::Error","value":"pub enum Error {\n\n    #[doc = \"the to-be sub-surface is invalid\"]\n    BadSurface = ,\n}","parent":null,"children":[{"krate":0,"index":3641}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"repr(u32)","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8704207,"byte_end":8704219,"line_start":7294,"line_end":7294,"column_start":5,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":2514},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8704400,"byte_end":8704408,"line_start":7301,"line_end":7301,"column_start":16,"column_end":24},"name":"from_raw","qualname":"<Error>::from_raw","value":"pub fn from_raw(u32) -> Option<Error>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2515},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8704578,"byte_end":8704584,"line_start":7307,"line_end":7307,"column_start":16,"column_end":22},"name":"to_raw","qualname":"<Error>::to_raw","value":"pub fn to_raw(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2517},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8704966,"byte_end":8704973,"line_start":7313,"line_end":7313,"column_start":9,"column_end":16},"name":"Destroy","qualname":"::generated::c_api::wl_subcompositor::Request::Destroy","value":"Request::Destroy","parent":{"krate":0,"index":2516},"children":[],"decl_id":null,"docs":"unbind from the subcompositor interface","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":2519},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8705351,"byte_end":8705364,"line_start":7315,"line_end":7315,"column_start":9,"column_end":22},"name":"GetSubsurface","qualname":"::generated::c_api::wl_subcompositor::Request::GetSubsurface","value":"Request::GetSubsurface { id, surface, parent }","parent":{"krate":0,"index":2516},"children":[],"decl_id":null,"docs":"give a surface the role sub-surface","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2516},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8704655,"byte_end":8704662,"line_start":7311,"line_end":7311,"column_start":14,"column_end":21},"name":"Request","qualname":"::generated::c_api::wl_subcompositor::Request","value":"pub enum Request {\n\n    #[doc =\n      \"unbind from the subcompositor interface\\n\\nInforms the server that the client will not be using this\\nprotocol object anymore. This does not affect any other\\nobjects, wl_subsurface objects included.\\n\\nThis is a destructor, once sent this object cannot be used any longer.\"]\n    Destroy,\n\n    #[doc =\n      \"give a surface the role sub-surface\\n\\nCreate a sub-surface interface for the given surface, and\\nassociate it with the given parent surface. This turns a\\nplain wl_surface into a sub-surface.\\n\\nThe to-be sub-surface must not already have another role, and it\\nmust not have an existing wl_subsurface object. Otherwise a protocol\\nerror is raised.\"]\n    GetSubsurface {\n        id: Proxy<super::wl_subsurface::WlSubsurface>,\n        surface: Proxy<super::wl_surface::WlSurface>,\n        parent: Proxy<super::wl_surface::WlSurface>,\n    },\n}","parent":null,"children":[{"krate":0,"index":2517},{"krate":0,"index":2519}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2538},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8708966,"byte_end":8708971,"line_start":7421,"line_end":7421,"column_start":14,"column_end":19},"name":"Event","qualname":"::generated::c_api::wl_subcompositor::Event","value":"pub enum Event { }","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2552},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8710271,"byte_end":8710286,"line_start":7464,"line_end":7464,"column_start":16,"column_end":31},"name":"WlSubcompositor","qualname":"::generated::c_api::wl_subcompositor::WlSubcompositor","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":2560},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8710635,"byte_end":8710648,"line_start":7474,"line_end":7474,"column_start":15,"column_end":28},"name":"RequestsTrait","qualname":"::generated::c_api::wl_subcompositor::RequestsTrait","value":"RequestsTrait","parent":null,"children":[{"krate":0,"index":2561},{"krate":0,"index":2562}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2561},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8710985,"byte_end":8710992,"line_start":7476,"line_end":7476,"column_start":12,"column_end":19},"name":"destroy","qualname":"::generated::c_api::wl_subcompositor::RequestsTrait::destroy","value":"pub fn destroy(&Self) -> ()","parent":{"krate":0,"index":2560},"children":[],"decl_id":null,"docs":"unbind from the subcompositor interface","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2562},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8711386,"byte_end":8711400,"line_start":7478,"line_end":7478,"column_start":12,"column_end":26},"name":"get_subsurface","qualname":"::generated::c_api::wl_subcompositor::RequestsTrait::get_subsurface","value":"pub fn get_subsurface<F>(&Self, &Proxy<super::wl_surface::WlSurface>,\n                         &Proxy<super::wl_surface::WlSurface>, F)\n-> Result<Proxy<super::wl_subsurface::WlSubsurface>, ()> where\nF: FnOnce(NewProxy<super::wl_subsurface::WlSubsurface>) ->\nProxy<super::wl_subsurface::WlSubsurface>","parent":{"krate":0,"index":2560},"children":[],"decl_id":null,"docs":"give a surface the role sub-surface","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2568},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8712741,"byte_end":8712758,"line_start":7514,"line_end":7514,"column_start":15,"column_end":32},"name":"REQ_DESTROY_SINCE","qualname":"::generated::c_api::wl_subcompositor::REQ_DESTROY_SINCE","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" The minimal object version supporting this request\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2569},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8712854,"byte_end":8712878,"line_start":7516,"line_end":7516,"column_start":15,"column_end":39},"name":"REQ_GET_SUBSURFACE_SINCE","qualname":"::generated::c_api::wl_subcompositor::REQ_GET_SUBSURFACE_SINCE","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" The minimal object version supporting this request\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":2570},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8715503,"byte_end":8715516,"line_start":7519,"line_end":7519,"column_start":9,"column_end":22},"name":"wl_subsurface","qualname":"::generated::c_api::wl_subsurface","value":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","parent":null,"children":[{"krate":0,"index":2571},{"krate":0,"index":2572},{"krate":0,"index":2573},{"krate":0,"index":2574},{"krate":0,"index":2575},{"krate":0,"index":2576},{"krate":0,"index":2577},{"krate":0,"index":4478},{"krate":0,"index":2578},{"krate":0,"index":2579},{"krate":0,"index":2580},{"krate":0,"index":2581},{"krate":0,"index":2582},{"krate":0,"index":2583},{"krate":0,"index":2584},{"krate":0,"index":2585},{"krate":0,"index":2586},{"krate":0,"index":2587},{"krate":0,"index":3652},{"krate":0,"index":3663},{"krate":0,"index":3661},{"krate":0,"index":3659},{"krate":0,"index":3656},{"krate":0,"index":3657},{"krate":0,"index":2588},{"krate":0,"index":2591},{"krate":0,"index":2605},{"krate":0,"index":2624},{"krate":0,"index":2625},{"krate":0,"index":2638},{"krate":0,"index":2640},{"krate":0,"index":2646},{"krate":0,"index":2653},{"krate":0,"index":2660},{"krate":0,"index":2661},{"krate":0,"index":2662},{"krate":0,"index":2663},{"krate":0,"index":2664},{"krate":0,"index":2665}],"decl_id":null,"docs":"sub-surface interface to a wl_surface","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3653},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8715938,"byte_end":8715948,"line_start":7530,"line_end":7530,"column_start":9,"column_end":19},"name":"BadSurface","qualname":"::generated::c_api::wl_subsurface::Error::BadSurface","value":"Error::BadSurface","parent":{"krate":0,"index":3652},"children":[],"decl_id":null,"docs":"wl_surface is not a sibling or the parent\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3652},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8715861,"byte_end":8715866,"line_start":7528,"line_end":7528,"column_start":14,"column_end":19},"name":"Error","qualname":"::generated::c_api::wl_subsurface::Error","value":"pub enum Error {\n\n    #[doc = \"wl_surface is not a sibling or the parent\"]\n    BadSurface = ,\n}","parent":null,"children":[{"krate":0,"index":3653}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"repr(u32)","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8715790,"byte_end":8715802,"line_start":7526,"line_end":7526,"column_start":5,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":2589},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8715992,"byte_end":8716000,"line_start":7533,"line_end":7533,"column_start":16,"column_end":24},"name":"from_raw","qualname":"<Error>::from_raw","value":"pub fn from_raw(u32) -> Option<Error>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2590},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8716170,"byte_end":8716176,"line_start":7539,"line_end":7539,"column_start":16,"column_end":22},"name":"to_raw","qualname":"<Error>::to_raw","value":"pub fn to_raw(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2592},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8716676,"byte_end":8716683,"line_start":7545,"line_end":7545,"column_start":9,"column_end":16},"name":"Destroy","qualname":"::generated::c_api::wl_subsurface::Request::Destroy","value":"Request::Destroy","parent":{"krate":0,"index":2591},"children":[],"decl_id":null,"docs":"remove sub-surface interface","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":2594},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8717524,"byte_end":8717535,"line_start":7547,"line_end":7547,"column_start":9,"column_end":20},"name":"SetPosition","qualname":"::generated::c_api::wl_subsurface::Request::SetPosition","value":"Request::SetPosition { x, y }","parent":{"krate":0,"index":2591},"children":[],"decl_id":null,"docs":"reposition the sub-surface","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":2597},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8718390,"byte_end":8718400,"line_start":7549,"line_end":7549,"column_start":9,"column_end":19},"name":"PlaceAbove","qualname":"::generated::c_api::wl_subsurface::Request::PlaceAbove","value":"Request::PlaceAbove { sibling }","parent":{"krate":0,"index":2591},"children":[],"decl_id":null,"docs":"restack the sub-surface","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":2599},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8718618,"byte_end":8718628,"line_start":7553,"line_end":7553,"column_start":9,"column_end":19},"name":"PlaceBelow","qualname":"::generated::c_api::wl_subsurface::Request::PlaceBelow","value":"Request::PlaceBelow { sibling }","parent":{"krate":0,"index":2591},"children":[],"decl_id":null,"docs":"restack the sub-surface","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2601},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8719441,"byte_end":8719448,"line_start":7557,"line_end":7557,"column_start":9,"column_end":16},"name":"SetSync","qualname":"::generated::c_api::wl_subsurface::Request::SetSync","value":"Request::SetSync","parent":{"krate":0,"index":2591},"children":[],"decl_id":null,"docs":"set sub-surface to synchronized mode","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2603},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8720413,"byte_end":8720422,"line_start":7559,"line_end":7559,"column_start":9,"column_end":18},"name":"SetDesync","qualname":"::generated::c_api::wl_subsurface::Request::SetDesync","value":"Request::SetDesync","parent":{"krate":0,"index":2591},"children":[],"decl_id":null,"docs":"set sub-surface to desynchronized mode","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2591},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8716247,"byte_end":8716254,"line_start":7543,"line_end":7543,"column_start":14,"column_end":21},"name":"Request","qualname":"::generated::c_api::wl_subsurface::Request","value":"pub enum Request {\n\n    #[doc =\n      \"remove sub-surface interface\\n\\nThe sub-surface interface is removed from the wl_surface object\\nthat was turned into a sub-surface with a\\nwl_subcompositor.get_subsurface request. The wl_surface's association\\nto the parent is deleted, and the wl_surface loses its role as\\na sub-surface. The wl_surface is unmapped.\\n\\nThis is a destructor, once sent this object cannot be used any longer.\"]\n    Destroy,\n\n    #[doc =\n      \"reposition the sub-surface\\n\\nThis schedules a sub-surface position change.\\nThe sub-surface will be moved so that its origin (top left\\ncorner pixel) will be at the location x, y of the parent surface\\ncoordinate system. The coordinates are not restricted to the parent\\nsurface area. Negative values are allowed.\\n\\nThe scheduled coordinates will take effect whenever the state of the\\nparent surface is applied. When this happens depends on whether the\\nparent surface is in synchronized mode or not. See\\nwl_subsurface.set_sync and wl_subsurface.set_desync for details.\\n\\nIf more than one set_position request is invoked by the client before\\nthe commit of the parent surface, the position of a new request always\\nreplaces the scheduled position from any previous request.\\n\\nThe initial position is 0, 0.\"]\n    SetPosition {\n        x: i32,\n        y: i32,\n    },\n\n    #[doc =\n      \"restack the sub-surface\\n\\nThis sub-surface is taken from the stack, and put back just\\nabove the reference surface, changing the z-order of the sub-surfaces.\\nThe reference surface must be one of the sibling surfaces, or the\\nparent surface. Using any other surface, including this sub-surface,\\nwill cause a protocol error.\\n\\nThe z-order is double-buffered. Requests are handled in order and\\napplied immediately to a pending state. The final pending state is\\ncopied to the active state the next time the state of the parent\\nsurface is applied. When this happens depends on whether the parent\\nsurface is in synchronized mode or not. See wl_subsurface.set_sync and\\nwl_subsurface.set_desync for details.\\n\\nA new sub-surface is initially added as the top-most in the stack\\nof its siblings and parent.\"]\n    PlaceAbove {\n        sibling: Proxy<super::wl_surface::WlSurface>,\n    },\n\n    #[doc =\n      \"restack the sub-surface\\n\\nThe sub-surface is placed just below the reference surface.\\nSee wl_subsurface.place_above.\"]\n    PlaceBelow {\n        sibling: Proxy<super::wl_surface::WlSurface>,\n    },\n\n    #[doc =\n      \"set sub-surface to synchronized mode\\n\\nChange the commit behaviour of the sub-surface to synchronized\\nmode, also described as the parent dependent mode.\\n\\nIn synchronized mode, wl_surface.commit on a sub-surface will\\naccumulate the committed state in a cache, but the state will\\nnot be applied and hence will not change the compositor output.\\nThe cached state is applied to the sub-surface immediately after\\nthe parent surface's state is applied. This ensures atomic\\nupdates of the parent and all its synchronized sub-surfaces.\\nApplying the cached state will invalidate the cache, so further\\nparent surface commits do not (re-)apply old state.\\n\\nSee wl_subsurface for the recursive effect of this mode.\"]\n    SetSync,\n\n    #[doc =\n      \"set sub-surface to desynchronized mode\\n\\nChange the commit behaviour of the sub-surface to desynchronized\\nmode, also described as independent or freely running mode.\\n\\nIn desynchronized mode, wl_surface.commit on a sub-surface will\\napply the pending state directly, without caching, as happens\\nnormally with a wl_surface. Calling wl_surface.commit on the\\nparent surface has no effect on the sub-surface's wl_surface\\nstate. This mode allows a sub-surface to be updated on its own.\\n\\nIf cached state exists when wl_surface.commit is called in\\ndesynchronized mode, the pending state is added to the cached\\nstate, and applied as a whole. This invalidates the cache.\\n\\nNote: even if a sub-surface is set to desynchronized, a parent\\nsub-surface may override it to behave as synchronized. For details,\\nsee wl_subsurface.\\n\\nIf a surface's parent surface behaves as desynchronized, then\\nthe cached state is applied on set_desync.\"]\n    SetDesync,\n}","parent":null,"children":[{"krate":0,"index":2592},{"krate":0,"index":2594},{"krate":0,"index":2597},{"krate":0,"index":2599},{"krate":0,"index":2601},{"krate":0,"index":2603}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2624},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8725567,"byte_end":8725572,"line_start":7700,"line_end":7700,"column_start":14,"column_end":19},"name":"Event","qualname":"::generated::c_api::wl_subsurface::Event","value":"pub enum Event { }","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2638},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8726872,"byte_end":8726884,"line_start":7743,"line_end":7743,"column_start":16,"column_end":28},"name":"WlSubsurface","qualname":"::generated::c_api::wl_subsurface::WlSubsurface","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":2646},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8727224,"byte_end":8727237,"line_start":7753,"line_end":7753,"column_start":15,"column_end":28},"name":"RequestsTrait","qualname":"::generated::c_api::wl_subsurface::RequestsTrait","value":"RequestsTrait","parent":null,"children":[{"krate":0,"index":2647},{"krate":0,"index":2648},{"krate":0,"index":2649},{"krate":0,"index":2650},{"krate":0,"index":2651},{"krate":0,"index":2652}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2647},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8727692,"byte_end":8727699,"line_start":7755,"line_end":7755,"column_start":12,"column_end":19},"name":"destroy","qualname":"::generated::c_api::wl_subsurface::RequestsTrait::destroy","value":"pub fn destroy(&Self) -> ()","parent":{"krate":0,"index":2646},"children":[],"decl_id":null,"docs":"remove sub-surface interface","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2648},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8728556,"byte_end":8728568,"line_start":7757,"line_end":7757,"column_start":12,"column_end":24},"name":"set_position","qualname":"::generated::c_api::wl_subsurface::RequestsTrait::set_position","value":"pub fn set_position(&Self, i32, i32) -> ()","parent":{"krate":0,"index":2646},"children":[],"decl_id":null,"docs":"reposition the sub-surface","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2649},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8729436,"byte_end":8729447,"line_start":7759,"line_end":7759,"column_start":12,"column_end":23},"name":"place_above","qualname":"::generated::c_api::wl_subsurface::RequestsTrait::place_above","value":"pub fn place_above(&Self, &Proxy<super::wl_surface::WlSurface>) -> ()","parent":{"krate":0,"index":2646},"children":[],"decl_id":null,"docs":"restack the sub-surface","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2650},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8729658,"byte_end":8729669,"line_start":7761,"line_end":7761,"column_start":12,"column_end":23},"name":"place_below","qualname":"::generated::c_api::wl_subsurface::RequestsTrait::place_below","value":"pub fn place_below(&Self, &Proxy<super::wl_surface::WlSurface>) -> ()","parent":{"krate":0,"index":2646},"children":[],"decl_id":null,"docs":"restack the sub-surface","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2651},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8730475,"byte_end":8730483,"line_start":7763,"line_end":7763,"column_start":12,"column_end":20},"name":"set_sync","qualname":"::generated::c_api::wl_subsurface::RequestsTrait::set_sync","value":"pub fn set_sync(&Self) -> ()","parent":{"krate":0,"index":2646},"children":[],"decl_id":null,"docs":"set sub-surface to synchronized mode","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2652},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8731464,"byte_end":8731474,"line_start":7765,"line_end":7765,"column_start":12,"column_end":22},"name":"set_desync","qualname":"::generated::c_api::wl_subsurface::RequestsTrait::set_desync","value":"pub fn set_desync(&Self) -> ()","parent":{"krate":0,"index":2646},"children":[],"decl_id":null,"docs":"set sub-surface to desynchronized mode","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2660},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8732574,"byte_end":8732591,"line_start":7798,"line_end":7798,"column_start":15,"column_end":32},"name":"REQ_DESTROY_SINCE","qualname":"::generated::c_api::wl_subsurface::REQ_DESTROY_SINCE","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" The minimal object version supporting this request\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2661},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8732687,"byte_end":8732709,"line_start":7800,"line_end":7800,"column_start":15,"column_end":37},"name":"REQ_SET_POSITION_SINCE","qualname":"::generated::c_api::wl_subsurface::REQ_SET_POSITION_SINCE","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" The minimal object version supporting this request\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2662},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8732805,"byte_end":8732826,"line_start":7802,"line_end":7802,"column_start":15,"column_end":36},"name":"REQ_PLACE_ABOVE_SINCE","qualname":"::generated::c_api::wl_subsurface::REQ_PLACE_ABOVE_SINCE","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" The minimal object version supporting this request\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2663},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8732922,"byte_end":8732943,"line_start":7804,"line_end":7804,"column_start":15,"column_end":36},"name":"REQ_PLACE_BELOW_SINCE","qualname":"::generated::c_api::wl_subsurface::REQ_PLACE_BELOW_SINCE","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" The minimal object version supporting this request\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2664},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8733039,"byte_end":8733057,"line_start":7806,"line_end":7806,"column_start":15,"column_end":33},"name":"REQ_SET_SYNC_SINCE","qualname":"::generated::c_api::wl_subsurface::REQ_SET_SYNC_SINCE","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" The minimal object version supporting this request\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":2665},"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8733153,"byte_end":8733173,"line_start":7808,"line_end":7808,"column_start":15,"column_end":35},"name":"REQ_SET_DESYNC_SINCE","qualname":"::generated::c_api::wl_subsurface::REQ_SET_DESYNC_SINCE","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" The minimal object version supporting this request\n","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/display.rs","byte_start":12267,"byte_end":12279,"line_start":38,"line_end":38,"column_start":30,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":26}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/display.rs","byte_start":12819,"byte_end":12831,"line_start":50,"line_end":50,"column_start":30,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":28}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/display.rs","byte_start":13396,"byte_end":13403,"line_start":67,"line_end":67,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":32},{"krate":0,"index":38},{"krate":0,"index":41},{"krate":0,"index":42},{"krate":0,"index":43},{"krate":0,"index":44},{"krate":0,"index":45}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/display.rs","byte_start":19038,"byte_end":19045,"line_start":188,"line_end":188,"column_start":16,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":47},{"krate":0,"index":48}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/event_queue.rs","byte_start":21193,"byte_end":21203,"line_start":53,"line_end":53,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":58},{"krate":0,"index":59},{"krate":0,"index":60},{"krate":0,"index":61},{"krate":0,"index":62},{"krate":0,"index":63}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/event_queue.rs","byte_start":24482,"byte_end":24497,"line_start":145,"line_end":145,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":68},{"krate":0,"index":69}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/event_queue.rs","byte_start":25090,"byte_end":25105,"line_start":166,"line_end":166,"column_start":15,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":71}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/globals.rs","byte_start":26172,"byte_end":26183,"line_start":33,"line_end":33,"column_start":30,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":90}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/globals.rs","byte_start":26456,"byte_end":26467,"line_start":42,"line_end":42,"column_start":30,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":92}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/globals.rs","byte_start":27131,"byte_end":27144,"line_start":68,"line_end":68,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":102},{"krate":0,"index":107},{"krate":0,"index":112},{"krate":0,"index":115},{"krate":0,"index":118}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/globals.rs","byte_start":33989,"byte_end":33990,"line_start":241,"line_end":241,"column_start":48,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":126}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":39257,"byte_end":39262,"line_start":31,"line_end":31,"column_start":30,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":146}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":39453,"byte_end":39458,"line_start":40,"line_end":40,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":149}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":39571,"byte_end":39576,"line_start":46,"line_end":46,"column_start":27,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":39603,"byte_end":39608,"line_start":48,"line_end":48,"column_start":20,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":154},{"krate":0,"index":155},{"krate":0,"index":156},{"krate":0,"index":159},{"krate":0,"index":160},{"krate":0,"index":161},{"krate":0,"index":162},{"krate":0,"index":164},{"krate":0,"index":165},{"krate":0,"index":167},{"krate":0,"index":168},{"krate":0,"index":169}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Inherent","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":45028,"byte_end":45033,"line_start":195,"line_end":195,"column_start":20,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":173},{"krate":0,"index":174},{"krate":0,"index":175}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":46865,"byte_end":46870,"line_start":240,"line_end":240,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":177}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":47792,"byte_end":47800,"line_start":267,"line_end":267,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":184},{"krate":0,"index":185},{"krate":0,"index":188}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":50029,"byte_end":50037,"line_start":336,"line_end":336,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":193},{"krate":0,"index":194}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/cursor.rs","byte_start":52369,"byte_end":52380,"line_start":40,"line_end":40,"column_start":22,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Inherent","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/cursor.rs","byte_start":53728,"byte_end":53739,"line_start":85,"line_end":85,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":229}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/cursor.rs","byte_start":54493,"byte_end":54504,"line_start":112,"line_end":112,"column_start":15,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":231}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/cursor.rs","byte_start":54844,"byte_end":54850,"line_start":126,"line_end":126,"column_start":26,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Inherent","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/cursor.rs","byte_start":54868,"byte_end":54874,"line_start":128,"line_end":128,"column_start":10,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":240},{"krate":0,"index":241},{"krate":0,"index":242},{"krate":0,"index":243},{"krate":0,"index":244},{"krate":0,"index":245}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/cursor.rs","byte_start":58312,"byte_end":58329,"line_start":227,"line_end":227,"column_start":26,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/cursor.rs","byte_start":58357,"byte_end":58374,"line_start":229,"line_end":229,"column_start":20,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":254},{"krate":0,"index":255}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/egl.rs","byte_start":59136,"byte_end":59148,"line_start":24,"line_end":24,"column_start":22,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/egl.rs","byte_start":59173,"byte_end":59185,"line_start":25,"line_end":25,"column_start":22,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Inherent","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/egl.rs","byte_start":59653,"byte_end":59665,"line_start":38,"line_end":38,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":268},{"krate":0,"index":269},{"krate":0,"index":270},{"krate":0,"index":271},{"krate":0,"index":272}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/egl.rs","byte_start":61591,"byte_end":61603,"line_start":97,"line_end":97,"column_start":15,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":274}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/native_lib/display.rs","byte_start":62806,"byte_end":62818,"line_start":17,"line_end":17,"column_start":22,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/native_lib/display.rs","byte_start":62843,"byte_end":62855,"line_start":18,"line_end":18,"column_start":22,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/native_lib/display.rs","byte_start":63269,"byte_end":63281,"line_start":35,"line_end":35,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":298},{"krate":0,"index":299},{"krate":0,"index":300},{"krate":0,"index":301},{"krate":0,"index":302},{"krate":0,"index":303}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/native_lib/display.rs","byte_start":65068,"byte_end":65080,"line_start":90,"line_end":90,"column_start":15,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":305}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Inherent","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/native_lib/event_queue.rs","byte_start":65701,"byte_end":65716,"line_start":14,"line_end":14,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":316},{"krate":0,"index":317},{"krate":0,"index":318},{"krate":0,"index":319},{"krate":0,"index":320},{"krate":0,"index":321},{"krate":0,"index":322},{"krate":0,"index":323}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/native_lib/event_queue.rs","byte_start":69211,"byte_end":69226,"line_start":129,"line_end":129,"column_start":15,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":325}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Inherent","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/native_lib/proxy.rs","byte_start":69842,"byte_end":69855,"line_start":20,"line_end":20,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":347}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/native_lib/proxy.rs","byte_start":70181,"byte_end":70191,"line_start":36,"line_end":36,"column_start":22,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/native_lib/proxy.rs","byte_start":70216,"byte_end":70226,"line_start":37,"line_end":37,"column_start":22,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Inherent","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/native_lib/proxy.rs","byte_start":70236,"byte_end":70246,"line_start":39,"line_end":39,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":351},{"krate":0,"index":353},{"krate":0,"index":354},{"krate":0,"index":355},{"krate":0,"index":356},{"krate":0,"index":358},{"krate":0,"index":361},{"krate":0,"index":367},{"krate":0,"index":368},{"krate":0,"index":369},{"krate":0,"index":371},{"krate":0,"index":372},{"krate":0,"index":374},{"krate":0,"index":375}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Inherent","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/native_lib/proxy.rs","byte_start":77179,"byte_end":77192,"line_start":264,"line_end":264,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":379},{"krate":0,"index":382},{"krate":0,"index":383}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Inherent","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/native_lib/proxy.rs","byte_start":78296,"byte_end":78309,"line_start":306,"line_end":306,"column_start":20,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":390}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Inherent","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/native_lib/mod.rs","byte_start":62149,"byte_end":62157,"line_start":17,"line_end":17,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":406},{"krate":0,"index":408}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Inherent","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8347145,"byte_end":8347150,"line_start":20,"line_end":20,"column_start":10,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":669},{"krate":0,"index":670}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8348488,"byte_end":8348495,"line_start":43,"line_end":43,"column_start":34,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":677},{"krate":0,"index":678},{"krate":0,"index":679},{"krate":0,"index":680},{"krate":0,"index":681},{"krate":0,"index":683},{"krate":0,"index":684},{"krate":0,"index":685},{"krate":0,"index":686}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8352464,"byte_end":8352469,"line_start":137,"line_end":137,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":699},{"krate":0,"index":700},{"krate":0,"index":701},{"krate":0,"index":702},{"krate":0,"index":703},{"krate":0,"index":705},{"krate":0,"index":707},{"krate":0,"index":708},{"krate":0,"index":709}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8356727,"byte_end":8356736,"line_start":255,"line_end":255,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":715},{"krate":0,"index":716},{"krate":0,"index":717},{"krate":0,"index":718},{"krate":0,"index":719}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8358356,"byte_end":8358361,"line_start":281,"line_end":281,"column_start":28,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":726},{"krate":0,"index":728}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8361352,"byte_end":8361359,"line_start":332,"line_end":332,"column_start":34,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":757},{"krate":0,"index":758},{"krate":0,"index":759},{"krate":0,"index":760},{"krate":0,"index":761},{"krate":0,"index":763},{"krate":0,"index":764},{"krate":0,"index":765},{"krate":0,"index":766}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8364705,"byte_end":8364710,"line_start":411,"line_end":411,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":778},{"krate":0,"index":779},{"krate":0,"index":780},{"krate":0,"index":781},{"krate":0,"index":782},{"krate":0,"index":784},{"krate":0,"index":786},{"krate":0,"index":787},{"krate":0,"index":788}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8368921,"byte_end":8368931,"line_start":529,"line_end":529,"column_start":24,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":794},{"krate":0,"index":795},{"krate":0,"index":796},{"krate":0,"index":797},{"krate":0,"index":798}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8369651,"byte_end":8369656,"line_start":549,"line_end":549,"column_start":28,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":804}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8370946,"byte_end":8370953,"line_start":582,"line_end":582,"column_start":34,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":830},{"krate":0,"index":831},{"krate":0,"index":832},{"krate":0,"index":833},{"krate":0,"index":834},{"krate":0,"index":836},{"krate":0,"index":837},{"krate":0,"index":838},{"krate":0,"index":839}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8372360,"byte_end":8372365,"line_start":624,"line_end":624,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":846},{"krate":0,"index":847},{"krate":0,"index":848},{"krate":0,"index":849},{"krate":0,"index":850},{"krate":0,"index":852},{"krate":0,"index":853},{"krate":0,"index":854},{"krate":0,"index":855}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8374577,"byte_end":8374587,"line_start":693,"line_end":693,"column_start":24,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":861},{"krate":0,"index":862},{"krate":0,"index":863},{"krate":0,"index":864},{"krate":0,"index":865}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8374930,"byte_end":8374935,"line_start":703,"line_end":703,"column_start":28,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8375951,"byte_end":8375958,"line_start":725,"line_end":725,"column_start":34,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":893},{"krate":0,"index":894},{"krate":0,"index":895},{"krate":0,"index":896},{"krate":0,"index":897},{"krate":0,"index":899},{"krate":0,"index":900},{"krate":0,"index":901},{"krate":0,"index":902}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8378971,"byte_end":8378976,"line_start":810,"line_end":810,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":909},{"krate":0,"index":910},{"krate":0,"index":911},{"krate":0,"index":912},{"krate":0,"index":913},{"krate":0,"index":915},{"krate":0,"index":916},{"krate":0,"index":917},{"krate":0,"index":918}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8380271,"byte_end":8380283,"line_start":853,"line_end":853,"column_start":24,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":924},{"krate":0,"index":925},{"krate":0,"index":926},{"krate":0,"index":927},{"krate":0,"index":928}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8381300,"byte_end":8381305,"line_start":877,"line_end":877,"column_start":28,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":935},{"krate":0,"index":937}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8384601,"byte_end":8384608,"line_start":930,"line_end":930,"column_start":34,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":972},{"krate":0,"index":973},{"krate":0,"index":974},{"krate":0,"index":975},{"krate":0,"index":976},{"krate":0,"index":978},{"krate":0,"index":979},{"krate":0,"index":980},{"krate":0,"index":981}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8389148,"byte_end":8389153,"line_start":1060,"line_end":1060,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":989},{"krate":0,"index":990},{"krate":0,"index":991},{"krate":0,"index":992},{"krate":0,"index":993},{"krate":0,"index":995},{"krate":0,"index":996},{"krate":0,"index":997},{"krate":0,"index":998}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8390445,"byte_end":8390454,"line_start":1103,"line_end":1103,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1004},{"krate":0,"index":1005},{"krate":0,"index":1006},{"krate":0,"index":1007},{"krate":0,"index":1008}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8392386,"byte_end":8392391,"line_start":1130,"line_end":1130,"column_start":28,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1015},{"krate":0,"index":1017},{"krate":0,"index":1018}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Inherent","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8394805,"byte_end":8394810,"line_start":1188,"line_end":1188,"column_start":10,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1041},{"krate":0,"index":1042}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Inherent","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8401785,"byte_end":8401791,"line_start":1322,"line_end":1322,"column_start":10,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1044},{"krate":0,"index":1045}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8405482,"byte_end":8405489,"line_start":1398,"line_end":1398,"column_start":34,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1052},{"krate":0,"index":1053},{"krate":0,"index":1054},{"krate":0,"index":1055},{"krate":0,"index":1056},{"krate":0,"index":1058},{"krate":0,"index":1059},{"krate":0,"index":1060},{"krate":0,"index":1061}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8408160,"byte_end":8408165,"line_start":1474,"line_end":1474,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1069},{"krate":0,"index":1070},{"krate":0,"index":1071},{"krate":0,"index":1072},{"krate":0,"index":1073},{"krate":0,"index":1075},{"krate":0,"index":1076},{"krate":0,"index":1077},{"krate":0,"index":1078}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8410408,"byte_end":8410413,"line_start":1543,"line_end":1543,"column_start":24,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1084},{"krate":0,"index":1085},{"krate":0,"index":1086},{"krate":0,"index":1087},{"krate":0,"index":1088}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8411351,"byte_end":8411356,"line_start":1565,"line_end":1565,"column_start":28,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1093}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8413199,"byte_end":8413206,"line_start":1602,"line_end":1602,"column_start":34,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1119},{"krate":0,"index":1120},{"krate":0,"index":1121},{"krate":0,"index":1122},{"krate":0,"index":1123},{"krate":0,"index":1125},{"krate":0,"index":1126},{"krate":0,"index":1127},{"krate":0,"index":1128}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8415730,"byte_end":8415735,"line_start":1663,"line_end":1663,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1136},{"krate":0,"index":1137},{"krate":0,"index":1138},{"krate":0,"index":1139},{"krate":0,"index":1140},{"krate":0,"index":1142},{"krate":0,"index":1143},{"krate":0,"index":1144},{"krate":0,"index":1145}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8417308,"byte_end":8417316,"line_start":1716,"line_end":1716,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1151},{"krate":0,"index":1152},{"krate":0,"index":1153},{"krate":0,"index":1154},{"krate":0,"index":1155}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8418016,"byte_end":8418021,"line_start":1729,"line_end":1729,"column_start":28,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1159}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Inherent","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8419471,"byte_end":8419476,"line_start":1760,"line_end":1760,"column_start":10,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1181},{"krate":0,"index":1182}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8424181,"byte_end":8424188,"line_start":1795,"line_end":1795,"column_start":34,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1198},{"krate":0,"index":1199},{"krate":0,"index":1200},{"krate":0,"index":1201},{"krate":0,"index":1202},{"krate":0,"index":1204},{"krate":0,"index":1205},{"krate":0,"index":1206},{"krate":0,"index":1207}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8432299,"byte_end":8432304,"line_start":1952,"line_end":1952,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1225},{"krate":0,"index":1226},{"krate":0,"index":1227},{"krate":0,"index":1228},{"krate":0,"index":1229},{"krate":0,"index":1231},{"krate":0,"index":1233},{"krate":0,"index":1234},{"krate":0,"index":1235}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8436665,"byte_end":8436676,"line_start":2076,"line_end":2076,"column_start":24,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1241},{"krate":0,"index":1242},{"krate":0,"index":1243},{"krate":0,"index":1244},{"krate":0,"index":1245}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8441263,"byte_end":8441268,"line_start":2097,"line_end":2097,"column_start":28,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1253},{"krate":0,"index":1254},{"krate":0,"index":1255},{"krate":0,"index":1256},{"krate":0,"index":1257}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Inherent","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8443984,"byte_end":8443989,"line_start":2161,"line_end":2161,"column_start":10,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1285},{"krate":0,"index":1286}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8445514,"byte_end":8445521,"line_start":2181,"line_end":2181,"column_start":34,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1295},{"krate":0,"index":1296},{"krate":0,"index":1297},{"krate":0,"index":1298},{"krate":0,"index":1299},{"krate":0,"index":1301},{"krate":0,"index":1302},{"krate":0,"index":1303},{"krate":0,"index":1304}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8452694,"byte_end":8452699,"line_start":2293,"line_end":2293,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1325},{"krate":0,"index":1326},{"krate":0,"index":1327},{"krate":0,"index":1328},{"krate":0,"index":1329},{"krate":0,"index":1331},{"krate":0,"index":1334},{"krate":0,"index":1335},{"krate":0,"index":1336}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8458940,"byte_end":8458952,"line_start":2464,"line_end":2464,"column_start":24,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1342},{"krate":0,"index":1343},{"krate":0,"index":1344},{"krate":0,"index":1345},{"krate":0,"index":1346}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8460527,"byte_end":8460532,"line_start":2481,"line_end":2481,"column_start":28,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1352},{"krate":0,"index":1353},{"krate":0,"index":1354}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Inherent","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8462791,"byte_end":8462796,"line_start":2532,"line_end":2532,"column_start":10,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1383},{"krate":0,"index":1384}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8465257,"byte_end":8465264,"line_start":2559,"line_end":2559,"column_start":34,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1397},{"krate":0,"index":1398},{"krate":0,"index":1399},{"krate":0,"index":1400},{"krate":0,"index":1401},{"krate":0,"index":1403},{"krate":0,"index":1404},{"krate":0,"index":1405},{"krate":0,"index":1406}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8472897,"byte_end":8472902,"line_start":2708,"line_end":2708,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1435},{"krate":0,"index":1436},{"krate":0,"index":1437},{"krate":0,"index":1438},{"krate":0,"index":1439},{"krate":0,"index":1441},{"krate":0,"index":1442},{"krate":0,"index":1443},{"krate":0,"index":1444}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8482111,"byte_end":8482123,"line_start":2953,"line_end":2953,"column_start":24,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1450},{"krate":0,"index":1451},{"krate":0,"index":1452},{"krate":0,"index":1453},{"krate":0,"index":1454}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8484729,"byte_end":8484734,"line_start":2980,"line_end":2980,"column_start":28,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1460},{"krate":0,"index":1463},{"krate":0,"index":1465}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Inherent","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8488954,"byte_end":8488963,"line_start":3040,"line_end":3040,"column_start":10,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1494},{"krate":0,"index":1495}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8489627,"byte_end":8489634,"line_start":3059,"line_end":3059,"column_start":34,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1503},{"krate":0,"index":1504},{"krate":0,"index":1505},{"krate":0,"index":1506},{"krate":0,"index":1507},{"krate":0,"index":1509},{"krate":0,"index":1510},{"krate":0,"index":1511},{"krate":0,"index":1512}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8492916,"byte_end":8492921,"line_start":3149,"line_end":3149,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1519},{"krate":0,"index":1520},{"krate":0,"index":1521},{"krate":0,"index":1522},{"krate":0,"index":1523},{"krate":0,"index":1525},{"krate":0,"index":1526},{"krate":0,"index":1527},{"krate":0,"index":1528}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8494223,"byte_end":8494242,"line_start":3192,"line_end":3192,"column_start":24,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1534},{"krate":0,"index":1535},{"krate":0,"index":1536},{"krate":0,"index":1537},{"krate":0,"index":1538}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8495442,"byte_end":8495447,"line_start":3222,"line_end":3222,"column_start":28,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1545},{"krate":0,"index":1547}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Inherent","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8497463,"byte_end":8497468,"line_start":3273,"line_end":3273,"column_start":10,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1570},{"krate":0,"index":1571}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8498246,"byte_end":8498253,"line_start":3291,"line_end":3291,"column_start":34,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1577},{"krate":0,"index":1578},{"krate":0,"index":1579},{"krate":0,"index":1580},{"krate":0,"index":1581},{"krate":0,"index":1583},{"krate":0,"index":1584},{"krate":0,"index":1585},{"krate":0,"index":1586}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8500514,"byte_end":8500519,"line_start":3354,"line_end":3354,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1592},{"krate":0,"index":1593},{"krate":0,"index":1594},{"krate":0,"index":1595},{"krate":0,"index":1596},{"krate":0,"index":1598},{"krate":0,"index":1599},{"krate":0,"index":1600},{"krate":0,"index":1601}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8501809,"byte_end":8501816,"line_start":3397,"line_end":3397,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1607},{"krate":0,"index":1608},{"krate":0,"index":1609},{"krate":0,"index":1610},{"krate":0,"index":1611}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8502841,"byte_end":8502846,"line_start":3418,"line_end":3418,"column_start":28,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1616}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Inherent","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8505167,"byte_end":8505173,"line_start":3448,"line_end":3448,"column_start":10,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1638},{"krate":0,"index":1639}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Inherent","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8505644,"byte_end":8505653,"line_start":3457,"line_end":3457,"column_start":10,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1641},{"krate":0,"index":1642}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Inherent","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8506658,"byte_end":8506674,"line_start":3478,"line_end":3478,"column_start":10,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1644},{"krate":0,"index":1645}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8513147,"byte_end":8513154,"line_start":3539,"line_end":3539,"column_start":34,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1681},{"krate":0,"index":1682},{"krate":0,"index":1683},{"krate":0,"index":1684},{"krate":0,"index":1685},{"krate":0,"index":1687},{"krate":0,"index":1688},{"krate":0,"index":1689},{"krate":0,"index":1690}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8526170,"byte_end":8526175,"line_start":3857,"line_end":3857,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1715},{"krate":0,"index":1716},{"krate":0,"index":1717},{"krate":0,"index":1718},{"krate":0,"index":1719},{"krate":0,"index":1721},{"krate":0,"index":1722},{"krate":0,"index":1723},{"krate":0,"index":1724}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8530356,"byte_end":8530370,"line_start":3978,"line_end":3978,"column_start":24,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1730},{"krate":0,"index":1731},{"krate":0,"index":1732},{"krate":0,"index":1733},{"krate":0,"index":1734}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8536795,"byte_end":8536800,"line_start":4028,"line_end":4028,"column_start":28,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1747},{"krate":0,"index":1748},{"krate":0,"index":1749},{"krate":0,"index":1750},{"krate":0,"index":1751},{"krate":0,"index":1752},{"krate":0,"index":1754},{"krate":0,"index":1755},{"krate":0,"index":1757},{"krate":0,"index":1758}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Inherent","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8543650,"byte_end":8543655,"line_start":4158,"line_end":4158,"column_start":10,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1791},{"krate":0,"index":1792}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8556958,"byte_end":8556965,"line_start":4214,"line_end":4214,"column_start":34,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1823},{"krate":0,"index":1824},{"krate":0,"index":1825},{"krate":0,"index":1826},{"krate":0,"index":1827},{"krate":0,"index":1829},{"krate":0,"index":1830},{"krate":0,"index":1831},{"krate":0,"index":1832}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8567912,"byte_end":8567917,"line_start":4493,"line_end":4493,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1854},{"krate":0,"index":1855},{"krate":0,"index":1856},{"krate":0,"index":1857},{"krate":0,"index":1858},{"krate":0,"index":1860},{"krate":0,"index":1861},{"krate":0,"index":1862},{"krate":0,"index":1863}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8571286,"byte_end":8571295,"line_start":4592,"line_end":4592,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1869},{"krate":0,"index":1870},{"krate":0,"index":1871},{"krate":0,"index":1872},{"krate":0,"index":1873}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8584673,"byte_end":8584678,"line_start":4627,"line_end":4627,"column_start":28,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1887},{"krate":0,"index":1888},{"krate":0,"index":1890},{"krate":0,"index":1891},{"krate":0,"index":1893},{"krate":0,"index":1895},{"krate":0,"index":1897},{"krate":0,"index":1898},{"krate":0,"index":1899},{"krate":0,"index":1900}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Inherent","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8589428,"byte_end":8589438,"line_start":4730,"line_end":4730,"column_start":10,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1932},{"krate":0,"index":1933}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8591263,"byte_end":8591270,"line_start":4752,"line_end":4752,"column_start":34,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1944},{"krate":0,"index":1945},{"krate":0,"index":1946},{"krate":0,"index":1947},{"krate":0,"index":1948},{"krate":0,"index":1950},{"krate":0,"index":1951},{"krate":0,"index":1952},{"krate":0,"index":1953}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8597356,"byte_end":8597361,"line_start":4878,"line_end":4878,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1966},{"krate":0,"index":1967},{"krate":0,"index":1968},{"krate":0,"index":1969},{"krate":0,"index":1970},{"krate":0,"index":1972},{"krate":0,"index":1974},{"krate":0,"index":1975},{"krate":0,"index":1976}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8600879,"byte_end":8600885,"line_start":4978,"line_end":4978,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1982},{"krate":0,"index":1983},{"krate":0,"index":1984},{"krate":0,"index":1985},{"krate":0,"index":1986}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8603343,"byte_end":8603348,"line_start":5010,"line_end":5010,"column_start":28,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1996},{"krate":0,"index":1998},{"krate":0,"index":2000},{"krate":0,"index":2002}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Inherent","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8606288,"byte_end":8606293,"line_start":5077,"line_end":5077,"column_start":10,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":2028},{"krate":0,"index":2029}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Inherent","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8606894,"byte_end":8606905,"line_start":5097,"line_end":5097,"column_start":10,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":2031},{"krate":0,"index":2032}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Inherent","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8607519,"byte_end":8607523,"line_start":5118,"line_end":5118,"column_start":10,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":2034},{"krate":0,"index":2035}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Inherent","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8608819,"byte_end":8608829,"line_start":5141,"line_end":5141,"column_start":10,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":2037},{"krate":0,"index":2038}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Direct","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8611316,"byte_end":8611323,"line_start":5165,"line_end":5165,"column_start":34,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2048},{"krate":0,"index":2049},{"krate":0,"index":2050},{"krate":0,"index":2051},{"krate":0,"index":2052},{"krate":0,"index":2054},{"krate":0,"index":2055},{"krate":0,"index":2056},{"krate":0,"index":2057}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Direct","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8622077,"byte_end":8622082,"line_start":5303,"line_end":5303,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2096},{"krate":0,"index":2097},{"krate":0,"index":2098},{"krate":0,"index":2099},{"krate":0,"index":2100},{"krate":0,"index":2102},{"krate":0,"index":2103},{"krate":0,"index":2104},{"krate":0,"index":2105}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Direct","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8636496,"byte_end":8636505,"line_start":5676,"line_end":5676,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2111},{"krate":0,"index":2112},{"krate":0,"index":2113},{"krate":0,"index":2114},{"krate":0,"index":2115}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Direct","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8638989,"byte_end":8638994,"line_start":5697,"line_end":5697,"column_start":28,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2120},{"krate":0,"index":2122}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Inherent","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8641722,"byte_end":8641734,"line_start":5758,"line_end":5758,"column_start":10,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":2153},{"krate":0,"index":2154}],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Inherent","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8642374,"byte_end":8642382,"line_start":5779,"line_end":5779,"column_start":10,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":2156},{"krate":0,"index":2157}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Direct","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8642945,"byte_end":8642952,"line_start":5795,"line_end":5795,"column_start":34,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2162},{"krate":0,"index":2163},{"krate":0,"index":2164},{"krate":0,"index":2165},{"krate":0,"index":2166},{"krate":0,"index":2168},{"krate":0,"index":2169},{"krate":0,"index":2170},{"krate":0,"index":2171}],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Direct","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8646862,"byte_end":8646867,"line_start":5888,"line_end":5888,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2202},{"krate":0,"index":2203},{"krate":0,"index":2204},{"krate":0,"index":2205},{"krate":0,"index":2206},{"krate":0,"index":2208},{"krate":0,"index":2209},{"krate":0,"index":2210},{"krate":0,"index":2211}],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Direct","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8659147,"byte_end":8659157,"line_start":6210,"line_end":6210,"column_start":24,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2217},{"krate":0,"index":2218},{"krate":0,"index":2219},{"krate":0,"index":2220},{"krate":0,"index":2221}],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Direct","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8659743,"byte_end":8659748,"line_start":6223,"line_end":6223,"column_start":28,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2225}],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Direct","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8661605,"byte_end":8661612,"line_start":6256,"line_end":6256,"column_start":34,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2255},{"krate":0,"index":2256},{"krate":0,"index":2257},{"krate":0,"index":2258},{"krate":0,"index":2259},{"krate":0,"index":2261},{"krate":0,"index":2262},{"krate":0,"index":2263},{"krate":0,"index":2264}],"docs":"","sig":null,"attributes":[]},{"id":131,"kind":"Direct","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8664870,"byte_end":8664875,"line_start":6332,"line_end":6332,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2290},{"krate":0,"index":2291},{"krate":0,"index":2292},{"krate":0,"index":2293},{"krate":0,"index":2294},{"krate":0,"index":2296},{"krate":0,"index":2297},{"krate":0,"index":2298},{"krate":0,"index":2299}],"docs":"","sig":null,"attributes":[]},{"id":132,"kind":"Direct","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8673440,"byte_end":8673447,"line_start":6565,"line_end":6565,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2305},{"krate":0,"index":2306},{"krate":0,"index":2307},{"krate":0,"index":2308},{"krate":0,"index":2309}],"docs":"","sig":null,"attributes":[]},{"id":133,"kind":"Direct","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8674024,"byte_end":8674029,"line_start":6578,"line_end":6578,"column_start":28,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2313}],"docs":"","sig":null,"attributes":[]},{"id":134,"kind":"Inherent","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8676090,"byte_end":8676098,"line_start":6622,"line_end":6622,"column_start":10,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":2339},{"krate":0,"index":2340}],"docs":"","sig":null,"attributes":[]},{"id":135,"kind":"Inherent","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8677798,"byte_end":8677807,"line_start":6659,"line_end":6659,"column_start":10,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":2342},{"krate":0,"index":2343}],"docs":"","sig":null,"attributes":[]},{"id":136,"kind":"Inherent","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8678734,"byte_end":8678738,"line_start":6678,"line_end":6678,"column_start":10,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":2345},{"krate":0,"index":2346}],"docs":"","sig":null,"attributes":[]},{"id":137,"kind":"Direct","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8679279,"byte_end":8679286,"line_start":6690,"line_end":6690,"column_start":34,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2351},{"krate":0,"index":2352},{"krate":0,"index":2353},{"krate":0,"index":2354},{"krate":0,"index":2355},{"krate":0,"index":2357},{"krate":0,"index":2358},{"krate":0,"index":2359},{"krate":0,"index":2360}],"docs":"","sig":null,"attributes":[]},{"id":138,"kind":"Direct","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8683710,"byte_end":8683715,"line_start":6771,"line_end":6771,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2384},{"krate":0,"index":2385},{"krate":0,"index":2386},{"krate":0,"index":2387},{"krate":0,"index":2388},{"krate":0,"index":2390},{"krate":0,"index":2393},{"krate":0,"index":2394},{"krate":0,"index":2395}],"docs":"","sig":null,"attributes":[]},{"id":139,"kind":"Direct","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8692627,"byte_end":8692635,"line_start":7000,"line_end":7000,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":2401},{"krate":0,"index":2402},{"krate":0,"index":2403},{"krate":0,"index":2404},{"krate":0,"index":2405}],"docs":"","sig":null,"attributes":[]},{"id":140,"kind":"Direct","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8693318,"byte_end":8693323,"line_start":7013,"line_end":7013,"column_start":28,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2409}],"docs":"","sig":null,"attributes":[]},{"id":141,"kind":"Direct","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8695114,"byte_end":8695121,"line_start":7056,"line_end":7056,"column_start":34,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2447},{"krate":0,"index":2448},{"krate":0,"index":2449},{"krate":0,"index":2450},{"krate":0,"index":2451},{"krate":0,"index":2453},{"krate":0,"index":2454},{"krate":0,"index":2455},{"krate":0,"index":2456}],"docs":"","sig":null,"attributes":[]},{"id":142,"kind":"Direct","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8699718,"byte_end":8699723,"line_start":7195,"line_end":7195,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2464},{"krate":0,"index":2465},{"krate":0,"index":2466},{"krate":0,"index":2467},{"krate":0,"index":2468},{"krate":0,"index":2470},{"krate":0,"index":2471},{"krate":0,"index":2472},{"krate":0,"index":2473}],"docs":"","sig":null,"attributes":[]},{"id":143,"kind":"Direct","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8701014,"byte_end":8701022,"line_start":7238,"line_end":7238,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":2479},{"krate":0,"index":2480},{"krate":0,"index":2481},{"krate":0,"index":2482},{"krate":0,"index":2483}],"docs":"","sig":null,"attributes":[]},{"id":144,"kind":"Direct","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8701934,"byte_end":8701939,"line_start":7255,"line_end":7255,"column_start":28,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2489},{"krate":0,"index":2490},{"krate":0,"index":2491}],"docs":"","sig":null,"attributes":[]},{"id":145,"kind":"Inherent","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8704377,"byte_end":8704382,"line_start":7300,"line_end":7300,"column_start":10,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":2514},{"krate":0,"index":2515}],"docs":"","sig":null,"attributes":[]},{"id":146,"kind":"Direct","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8705591,"byte_end":8705598,"line_start":7321,"line_end":7321,"column_start":34,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2524},{"krate":0,"index":2525},{"krate":0,"index":2526},{"krate":0,"index":2527},{"krate":0,"index":2528},{"krate":0,"index":2530},{"krate":0,"index":2531},{"krate":0,"index":2532},{"krate":0,"index":2533}],"docs":"","sig":null,"attributes":[]},{"id":147,"kind":"Direct","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8709008,"byte_end":8709013,"line_start":7422,"line_end":7422,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2540},{"krate":0,"index":2541},{"krate":0,"index":2542},{"krate":0,"index":2543},{"krate":0,"index":2544},{"krate":0,"index":2546},{"krate":0,"index":2547},{"krate":0,"index":2548},{"krate":0,"index":2549}],"docs":"","sig":null,"attributes":[]},{"id":148,"kind":"Direct","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8710311,"byte_end":8710326,"line_start":7465,"line_end":7465,"column_start":24,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2555},{"krate":0,"index":2556},{"krate":0,"index":2557},{"krate":0,"index":2558},{"krate":0,"index":2559}],"docs":"","sig":null,"attributes":[]},{"id":149,"kind":"Direct","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8711828,"byte_end":8711833,"line_start":7489,"line_end":7489,"column_start":28,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2565},{"krate":0,"index":2566}],"docs":"","sig":null,"attributes":[]},{"id":150,"kind":"Inherent","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8715969,"byte_end":8715974,"line_start":7532,"line_end":7532,"column_start":10,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":2589},{"krate":0,"index":2590}],"docs":"","sig":null,"attributes":[]},{"id":151,"kind":"Direct","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8720463,"byte_end":8720470,"line_start":7561,"line_end":7561,"column_start":34,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":2606},{"krate":0,"index":2607},{"krate":0,"index":2608},{"krate":0,"index":2609},{"krate":0,"index":2610},{"krate":0,"index":2612},{"krate":0,"index":2613},{"krate":0,"index":2614},{"krate":0,"index":2615}],"docs":"","sig":null,"attributes":[]},{"id":152,"kind":"Direct","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8725609,"byte_end":8725614,"line_start":7701,"line_end":7701,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2626},{"krate":0,"index":2627},{"krate":0,"index":2628},{"krate":0,"index":2629},{"krate":0,"index":2630},{"krate":0,"index":2632},{"krate":0,"index":2633},{"krate":0,"index":2634},{"krate":0,"index":2635}],"docs":"","sig":null,"attributes":[]},{"id":153,"kind":"Direct","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8726909,"byte_end":8726921,"line_start":7744,"line_end":7744,"column_start":24,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2641},{"krate":0,"index":2642},{"krate":0,"index":2643},{"krate":0,"index":2644},{"krate":0,"index":2645}],"docs":"","sig":null,"attributes":[]},{"id":154,"kind":"Direct","span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8731522,"byte_end":8731527,"line_start":7767,"line_end":7767,"column_start":28,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2654},{"krate":0,"index":2655},{"krate":0,"index":2656},{"krate":0,"index":2657},{"krate":0,"index":2658},{"krate":0,"index":2659}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":6673,"byte_end":6679,"line_start":146,"line_end":146,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":211}},{"kind":"Mod","span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/lib.rs","byte_start":6714,"byte_end":6717,"line_start":149,"line_end":149,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":256}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/display.rs","byte_start":12267,"byte_end":12279,"line_start":38,"line_end":38,"column_start":30,"column_end":42},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":437},"to":{"krate":1,"index":1642}},{"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/display.rs","byte_start":12819,"byte_end":12831,"line_start":50,"line_end":50,"column_start":30,"column_end":42},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":437},"to":{"krate":2,"index":6208}},{"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/display.rs","byte_start":13396,"byte_end":13403,"line_start":67,"line_end":67,"column_start":6,"column_end":13},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":29},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/display.rs","byte_start":19038,"byte_end":19045,"line_start":188,"line_end":188,"column_start":16,"column_end":23},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":29},"to":{"krate":2,"index":2098}},{"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/event_queue.rs","byte_start":21193,"byte_end":21203,"line_start":53,"line_end":53,"column_start":6,"column_end":16},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":53},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/event_queue.rs","byte_start":24482,"byte_end":24497,"line_start":145,"line_end":145,"column_start":6,"column_end":21},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":64},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/event_queue.rs","byte_start":25090,"byte_end":25105,"line_start":166,"line_end":166,"column_start":15,"column_end":30},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":64},"to":{"krate":2,"index":2122}},{"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/globals.rs","byte_start":26172,"byte_end":26183,"line_start":33,"line_end":33,"column_start":30,"column_end":41},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":455},"to":{"krate":1,"index":1642}},{"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/globals.rs","byte_start":26456,"byte_end":26467,"line_start":42,"line_end":42,"column_start":30,"column_end":41},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":455},"to":{"krate":2,"index":6208}},{"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/globals.rs","byte_start":27131,"byte_end":27144,"line_start":68,"line_end":68,"column_start":6,"column_end":19},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":450},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/globals.rs","byte_start":33989,"byte_end":33990,"line_start":241,"line_end":241,"column_start":48,"column_end":49},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":124},"to":{"krate":0,"index":119}},{"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":39257,"byte_end":39262,"line_start":31,"line_end":31,"column_start":30,"column_end":35},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":140},"to":{"krate":2,"index":1625}},{"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":39453,"byte_end":39458,"line_start":40,"line_end":40,"column_start":34,"column_end":39},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":140},"to":{"krate":2,"index":1653}},{"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":39571,"byte_end":39576,"line_start":46,"line_end":46,"column_start":27,"column_end":32},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":140},"to":{"krate":2,"index":1658}},{"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":39603,"byte_end":39608,"line_start":48,"line_end":48,"column_start":20,"column_end":25},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":140},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":45028,"byte_end":45033,"line_start":195,"line_end":195,"column_start":20,"column_end":25},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":140},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":46865,"byte_end":46870,"line_start":240,"line_end":240,"column_start":6,"column_end":11},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":140},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":47792,"byte_end":47800,"line_start":267,"line_end":267,"column_start":30,"column_end":38},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":178},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/proxy.rs","byte_start":50029,"byte_end":50037,"line_start":336,"line_end":336,"column_start":30,"column_end":38},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":178},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/cursor.rs","byte_start":52369,"byte_end":52380,"line_start":40,"line_end":40,"column_start":22,"column_end":33},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":224},"to":{"krate":2,"index":1927}},{"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/cursor.rs","byte_start":53728,"byte_end":53739,"line_start":85,"line_end":85,"column_start":6,"column_end":17},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":224},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/cursor.rs","byte_start":54493,"byte_end":54504,"line_start":112,"line_end":112,"column_start":15,"column_end":26},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":224},"to":{"krate":2,"index":2122}},{"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/cursor.rs","byte_start":54844,"byte_end":54850,"line_start":126,"line_end":126,"column_start":26,"column_end":32},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":232},"to":{"krate":2,"index":1927}},{"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/cursor.rs","byte_start":54868,"byte_end":54874,"line_start":128,"line_end":128,"column_start":10,"column_end":16},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":232},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/cursor.rs","byte_start":58312,"byte_end":58329,"line_start":227,"line_end":227,"column_start":26,"column_end":43},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":246},"to":{"krate":2,"index":1927}},{"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/cursor.rs","byte_start":58357,"byte_end":58374,"line_start":229,"line_end":229,"column_start":20,"column_end":37},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":246},"to":{"krate":2,"index":2098}},{"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/egl.rs","byte_start":59136,"byte_end":59148,"line_start":24,"line_end":24,"column_start":22,"column_end":34},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":265},"to":{"krate":2,"index":1927}},{"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/egl.rs","byte_start":59173,"byte_end":59185,"line_start":25,"line_end":25,"column_start":22,"column_end":34},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":265},"to":{"krate":2,"index":1939}},{"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/egl.rs","byte_start":59653,"byte_end":59665,"line_start":38,"line_end":38,"column_start":6,"column_end":18},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":265},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/egl.rs","byte_start":61591,"byte_end":61603,"line_start":97,"line_end":97,"column_start":15,"column_end":27},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":265},"to":{"krate":2,"index":2122}},{"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/native_lib/display.rs","byte_start":62806,"byte_end":62818,"line_start":17,"line_end":17,"column_start":22,"column_end":34},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":291},"to":{"krate":2,"index":1927}},{"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/native_lib/display.rs","byte_start":62843,"byte_end":62855,"line_start":18,"line_end":18,"column_start":22,"column_end":34},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":291},"to":{"krate":2,"index":1939}},{"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/native_lib/display.rs","byte_start":63269,"byte_end":63281,"line_start":35,"line_end":35,"column_start":6,"column_end":18},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":291},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/native_lib/display.rs","byte_start":65068,"byte_end":65080,"line_start":90,"line_end":90,"column_start":15,"column_end":27},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":291},"to":{"krate":2,"index":2122}},{"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/native_lib/event_queue.rs","byte_start":65701,"byte_end":65716,"line_start":14,"line_end":14,"column_start":6,"column_end":21},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":312},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/native_lib/event_queue.rs","byte_start":69211,"byte_end":69226,"line_start":129,"line_end":129,"column_start":15,"column_end":30},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":312},"to":{"krate":2,"index":2122}},{"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/native_lib/proxy.rs","byte_start":69842,"byte_end":69855,"line_start":20,"line_end":20,"column_start":6,"column_end":19},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":343},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/native_lib/proxy.rs","byte_start":70181,"byte_end":70191,"line_start":36,"line_end":36,"column_start":22,"column_end":32},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":467},"to":{"krate":2,"index":1927}},{"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/native_lib/proxy.rs","byte_start":70216,"byte_end":70226,"line_start":37,"line_end":37,"column_start":22,"column_end":32},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":467},"to":{"krate":2,"index":1939}},{"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/native_lib/proxy.rs","byte_start":70236,"byte_end":70246,"line_start":39,"line_end":39,"column_start":6,"column_end":16},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":467},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/native_lib/proxy.rs","byte_start":77179,"byte_end":77192,"line_start":264,"line_end":264,"column_start":6,"column_end":19},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":376},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/native_lib/proxy.rs","byte_start":78296,"byte_end":78309,"line_start":306,"line_end":306,"column_start":20,"column_end":33},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":384},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/clozed/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.21.13/src/native_lib/mod.rs","byte_start":62149,"byte_end":62157,"line_start":17,"line_end":17,"column_start":6,"column_end":14},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":404},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8347145,"byte_end":8347150,"line_start":20,"line_end":20,"column_start":10,"column_end":15},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":2666},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8348488,"byte_end":8348495,"line_start":43,"line_end":43,"column_start":34,"column_end":41},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":671},"to":{"krate":20,"index":243}},{"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8352464,"byte_end":8352469,"line_start":137,"line_end":137,"column_start":34,"column_end":39},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":691},"to":{"krate":20,"index":243}},{"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8356727,"byte_end":8356736,"line_start":255,"line_end":255,"column_start":24,"column_end":33},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":712},"to":{"krate":20,"index":256}},{"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8358356,"byte_end":8358361,"line_start":281,"line_end":281,"column_start":28,"column_end":33},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":140},"to":{"krate":0,"index":720}},{"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8361352,"byte_end":8361359,"line_start":332,"line_end":332,"column_start":34,"column_end":41},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":752},"to":{"krate":20,"index":243}},{"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8364705,"byte_end":8364710,"line_start":411,"line_end":411,"column_start":34,"column_end":39},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":770},"to":{"krate":20,"index":243}},{"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8368921,"byte_end":8368931,"line_start":529,"line_end":529,"column_start":24,"column_end":34},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":791},"to":{"krate":20,"index":256}},{"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8369651,"byte_end":8369656,"line_start":549,"line_end":549,"column_start":28,"column_end":33},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":140},"to":{"krate":0,"index":799}},{"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8370946,"byte_end":8370953,"line_start":582,"line_end":582,"column_start":34,"column_end":41},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":828},"to":{"krate":20,"index":243}},{"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8372360,"byte_end":8372365,"line_start":624,"line_end":624,"column_start":34,"column_end":39},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":842},"to":{"krate":20,"index":243}},{"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8374577,"byte_end":8374587,"line_start":693,"line_end":693,"column_start":24,"column_end":34},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":858},"to":{"krate":20,"index":256}},{"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8374930,"byte_end":8374935,"line_start":703,"line_end":703,"column_start":28,"column_end":33},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":140},"to":{"krate":0,"index":866}},{"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8375951,"byte_end":8375958,"line_start":725,"line_end":725,"column_start":34,"column_end":41},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":887},"to":{"krate":20,"index":243}},{"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8378971,"byte_end":8378976,"line_start":810,"line_end":810,"column_start":34,"column_end":39},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":907},"to":{"krate":20,"index":243}},{"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8380271,"byte_end":8380283,"line_start":853,"line_end":853,"column_start":24,"column_end":36},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":921},"to":{"krate":20,"index":256}},{"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8381300,"byte_end":8381305,"line_start":877,"line_end":877,"column_start":28,"column_end":33},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":140},"to":{"krate":0,"index":929}},{"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8384601,"byte_end":8384608,"line_start":930,"line_end":930,"column_start":34,"column_end":41},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":959},"to":{"krate":20,"index":243}},{"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8389148,"byte_end":8389153,"line_start":1060,"line_end":1060,"column_start":34,"column_end":39},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":987},"to":{"krate":20,"index":243}},{"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8390445,"byte_end":8390454,"line_start":1103,"line_end":1103,"column_start":24,"column_end":33},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":1001},"to":{"krate":20,"index":256}},{"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8392386,"byte_end":8392391,"line_start":1130,"line_end":1130,"column_start":28,"column_end":33},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":140},"to":{"krate":0,"index":1009}},{"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8394805,"byte_end":8394810,"line_start":1188,"line_end":1188,"column_start":10,"column_end":15},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":2684},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8401785,"byte_end":8401791,"line_start":1322,"line_end":1322,"column_start":10,"column_end":16},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":2702},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8405482,"byte_end":8405489,"line_start":1398,"line_end":1398,"column_start":34,"column_end":41},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":1046},"to":{"krate":20,"index":243}},{"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8408160,"byte_end":8408165,"line_start":1474,"line_end":1474,"column_start":34,"column_end":39},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":1065},"to":{"krate":20,"index":243}},{"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8410408,"byte_end":8410413,"line_start":1543,"line_end":1543,"column_start":24,"column_end":29},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":1081},"to":{"krate":20,"index":256}},{"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8411351,"byte_end":8411356,"line_start":1565,"line_end":1565,"column_start":28,"column_end":33},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":140},"to":{"krate":0,"index":1089}},{"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8413199,"byte_end":8413206,"line_start":1602,"line_end":1602,"column_start":34,"column_end":41},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":1115},"to":{"krate":20,"index":243}},{"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8415730,"byte_end":8415735,"line_start":1663,"line_end":1663,"column_start":34,"column_end":39},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":1132},"to":{"krate":20,"index":243}},{"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8417308,"byte_end":8417316,"line_start":1716,"line_end":1716,"column_start":24,"column_end":32},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":1148},"to":{"krate":20,"index":256}},{"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8418016,"byte_end":8418021,"line_start":1729,"line_end":1729,"column_start":28,"column_end":33},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":140},"to":{"krate":0,"index":1156}},{"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8419471,"byte_end":8419476,"line_start":1760,"line_end":1760,"column_start":10,"column_end":15},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":2885},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8424181,"byte_end":8424188,"line_start":1795,"line_end":1795,"column_start":34,"column_end":41},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":1183},"to":{"krate":20,"index":243}},{"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8432299,"byte_end":8432304,"line_start":1952,"line_end":1952,"column_start":34,"column_end":39},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":1217},"to":{"krate":20,"index":243}},{"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8436665,"byte_end":8436676,"line_start":2076,"line_end":2076,"column_start":24,"column_end":35},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":1238},"to":{"krate":20,"index":256}},{"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8441263,"byte_end":8441268,"line_start":2097,"line_end":2097,"column_start":28,"column_end":33},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":140},"to":{"krate":0,"index":1246}},{"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8443984,"byte_end":8443989,"line_start":2161,"line_end":2161,"column_start":10,"column_end":15},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":2906},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8445514,"byte_end":8445521,"line_start":2181,"line_end":2181,"column_start":34,"column_end":41},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":1287},"to":{"krate":20,"index":243}},{"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8452694,"byte_end":8452699,"line_start":2293,"line_end":2293,"column_start":34,"column_end":39},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":1310},"to":{"krate":20,"index":243}},{"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8458940,"byte_end":8458952,"line_start":2464,"line_end":2464,"column_start":24,"column_end":36},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":1339},"to":{"krate":20,"index":256}},{"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8460527,"byte_end":8460532,"line_start":2481,"line_end":2481,"column_start":28,"column_end":33},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":140},"to":{"krate":0,"index":1347}},{"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8462791,"byte_end":8462796,"line_start":2532,"line_end":2532,"column_start":10,"column_end":15},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":2921},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8465257,"byte_end":8465264,"line_start":2559,"line_end":2559,"column_start":34,"column_end":41},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":1385},"to":{"krate":20,"index":243}},{"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8472897,"byte_end":8472902,"line_start":2708,"line_end":2708,"column_start":34,"column_end":39},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":1415},"to":{"krate":20,"index":243}},{"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8482111,"byte_end":8482123,"line_start":2953,"line_end":2953,"column_start":24,"column_end":36},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":1447},"to":{"krate":20,"index":256}},{"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8484729,"byte_end":8484734,"line_start":2980,"line_end":2980,"column_start":28,"column_end":33},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":140},"to":{"krate":0,"index":1455}},{"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8488954,"byte_end":8488963,"line_start":3040,"line_end":3040,"column_start":10,"column_end":19},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":2936},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8489627,"byte_end":8489634,"line_start":3059,"line_end":3059,"column_start":34,"column_end":41},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":1496},"to":{"krate":20,"index":243}},{"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8492916,"byte_end":8492921,"line_start":3149,"line_end":3149,"column_start":34,"column_end":39},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":1517},"to":{"krate":20,"index":243}},{"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8494223,"byte_end":8494242,"line_start":3192,"line_end":3192,"column_start":24,"column_end":43},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":1531},"to":{"krate":20,"index":256}},{"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8495442,"byte_end":8495447,"line_start":3222,"line_end":3222,"column_start":28,"column_end":33},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":140},"to":{"krate":0,"index":1539}},{"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8497463,"byte_end":8497468,"line_start":3273,"line_end":3273,"column_start":10,"column_end":15},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":3037},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8498246,"byte_end":8498253,"line_start":3291,"line_end":3291,"column_start":34,"column_end":41},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":1572},"to":{"krate":20,"index":243}},{"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8500514,"byte_end":8500519,"line_start":3354,"line_end":3354,"column_start":34,"column_end":39},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":1590},"to":{"krate":20,"index":243}},{"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8501809,"byte_end":8501816,"line_start":3397,"line_end":3397,"column_start":24,"column_end":31},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":1604},"to":{"krate":20,"index":256}},{"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8502841,"byte_end":8502846,"line_start":3418,"line_end":3418,"column_start":28,"column_end":33},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":140},"to":{"krate":0,"index":1612}},{"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8505167,"byte_end":8505173,"line_start":3448,"line_end":3448,"column_start":10,"column_end":16},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":3049},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8505644,"byte_end":8505653,"line_start":3457,"line_end":3457,"column_start":10,"column_end":19},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":3175},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8506658,"byte_end":8506674,"line_start":3478,"line_end":3478,"column_start":10,"column_end":26},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":3261},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8513147,"byte_end":8513154,"line_start":3539,"line_end":3539,"column_start":34,"column_end":41},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":1646},"to":{"krate":20,"index":243}},{"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8526170,"byte_end":8526175,"line_start":3857,"line_end":3857,"column_start":34,"column_end":39},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":1705},"to":{"krate":20,"index":243}},{"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8530356,"byte_end":8530370,"line_start":3978,"line_end":3978,"column_start":24,"column_end":38},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":1727},"to":{"krate":20,"index":256}},{"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8536795,"byte_end":8536800,"line_start":4028,"line_end":4028,"column_start":28,"column_end":33},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":140},"to":{"krate":0,"index":1735}},{"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8543650,"byte_end":8543655,"line_start":4158,"line_end":4158,"column_start":10,"column_end":15},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":3284},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8556958,"byte_end":8556965,"line_start":4214,"line_end":4214,"column_start":34,"column_end":41},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":1793},"to":{"krate":20,"index":243}},{"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8567912,"byte_end":8567917,"line_start":4493,"line_end":4493,"column_start":34,"column_end":39},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":1848},"to":{"krate":20,"index":243}},{"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8571286,"byte_end":8571295,"line_start":4592,"line_end":4592,"column_start":24,"column_end":33},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":1866},"to":{"krate":20,"index":256}},{"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8584673,"byte_end":8584678,"line_start":4627,"line_end":4627,"column_start":28,"column_end":33},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":140},"to":{"krate":0,"index":1874}},{"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8589428,"byte_end":8589438,"line_start":4730,"line_end":4730,"column_start":10,"column_end":20},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":3302},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8591263,"byte_end":8591270,"line_start":4752,"line_end":4752,"column_start":34,"column_end":41},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":1934},"to":{"krate":20,"index":243}},{"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8597356,"byte_end":8597361,"line_start":4878,"line_end":4878,"column_start":34,"column_end":39},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":1960},"to":{"krate":20,"index":243}},{"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8600879,"byte_end":8600885,"line_start":4978,"line_end":4978,"column_start":24,"column_end":30},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":1979},"to":{"krate":20,"index":256}},{"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8603343,"byte_end":8603348,"line_start":5010,"line_end":5010,"column_start":28,"column_end":33},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":140},"to":{"krate":0,"index":1987}},{"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8606288,"byte_end":8606293,"line_start":5077,"line_end":5077,"column_start":10,"column_end":15},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":3398},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8606894,"byte_end":8606905,"line_start":5097,"line_end":5097,"column_start":10,"column_end":21},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":3410},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8607519,"byte_end":8607523,"line_start":5118,"line_end":5118,"column_start":10,"column_end":14},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":3425},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8608819,"byte_end":8608829,"line_start":5141,"line_end":5141,"column_start":10,"column_end":20},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":3440},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8611316,"byte_end":8611323,"line_start":5165,"line_end":5165,"column_start":34,"column_end":41},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":2039},"to":{"krate":20,"index":243}},{"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8622077,"byte_end":8622082,"line_start":5303,"line_end":5303,"column_start":34,"column_end":39},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":2063},"to":{"krate":20,"index":243}},{"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8636496,"byte_end":8636505,"line_start":5676,"line_end":5676,"column_start":24,"column_end":33},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":2108},"to":{"krate":20,"index":256}},{"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8638989,"byte_end":8638994,"line_start":5697,"line_end":5697,"column_start":28,"column_end":33},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":140},"to":{"krate":0,"index":2116}},{"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8641722,"byte_end":8641734,"line_start":5758,"line_end":5758,"column_start":10,"column_end":22},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":3459},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8642374,"byte_end":8642382,"line_start":5779,"line_end":5779,"column_start":10,"column_end":18},"kind":{"Impl":{"id":125}},"from":{"krate":0,"index":3474},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8642945,"byte_end":8642952,"line_start":5795,"line_end":5795,"column_start":34,"column_end":41},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":2158},"to":{"krate":20,"index":243}},{"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8646862,"byte_end":8646867,"line_start":5888,"line_end":5888,"column_start":34,"column_end":39},"kind":{"Impl":{"id":127}},"from":{"krate":0,"index":2175},"to":{"krate":20,"index":243}},{"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8659147,"byte_end":8659157,"line_start":6210,"line_end":6210,"column_start":24,"column_end":34},"kind":{"Impl":{"id":128}},"from":{"krate":0,"index":2214},"to":{"krate":20,"index":256}},{"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8659743,"byte_end":8659748,"line_start":6223,"line_end":6223,"column_start":28,"column_end":33},"kind":{"Impl":{"id":129}},"from":{"krate":0,"index":140},"to":{"krate":0,"index":2222}},{"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8661605,"byte_end":8661612,"line_start":6256,"line_end":6256,"column_start":34,"column_end":41},"kind":{"Impl":{"id":130}},"from":{"krate":0,"index":2251},"to":{"krate":20,"index":243}},{"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8664870,"byte_end":8664875,"line_start":6332,"line_end":6332,"column_start":34,"column_end":39},"kind":{"Impl":{"id":131}},"from":{"krate":0,"index":2268},"to":{"krate":20,"index":243}},{"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8673440,"byte_end":8673447,"line_start":6565,"line_end":6565,"column_start":24,"column_end":31},"kind":{"Impl":{"id":132}},"from":{"krate":0,"index":2302},"to":{"krate":20,"index":256}},{"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8674024,"byte_end":8674029,"line_start":6578,"line_end":6578,"column_start":28,"column_end":33},"kind":{"Impl":{"id":133}},"from":{"krate":0,"index":140},"to":{"krate":0,"index":2310}},{"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8676090,"byte_end":8676098,"line_start":6622,"line_end":6622,"column_start":10,"column_end":18},"kind":{"Impl":{"id":134}},"from":{"krate":0,"index":3489},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8677798,"byte_end":8677807,"line_start":6659,"line_end":6659,"column_start":10,"column_end":19},"kind":{"Impl":{"id":135}},"from":{"krate":0,"index":3516},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8678734,"byte_end":8678738,"line_start":6678,"line_end":6678,"column_start":10,"column_end":14},"kind":{"Impl":{"id":136}},"from":{"krate":0,"index":3549},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8679279,"byte_end":8679286,"line_start":6690,"line_end":6690,"column_start":34,"column_end":41},"kind":{"Impl":{"id":137}},"from":{"krate":0,"index":2347},"to":{"krate":20,"index":243}},{"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8683710,"byte_end":8683715,"line_start":6771,"line_end":6771,"column_start":34,"column_end":39},"kind":{"Impl":{"id":138}},"from":{"krate":0,"index":2364},"to":{"krate":20,"index":243}},{"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8692627,"byte_end":8692635,"line_start":7000,"line_end":7000,"column_start":24,"column_end":32},"kind":{"Impl":{"id":139}},"from":{"krate":0,"index":2398},"to":{"krate":20,"index":256}},{"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8693318,"byte_end":8693323,"line_start":7013,"line_end":7013,"column_start":28,"column_end":33},"kind":{"Impl":{"id":140}},"from":{"krate":0,"index":140},"to":{"krate":0,"index":2406}},{"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8695114,"byte_end":8695121,"line_start":7056,"line_end":7056,"column_start":34,"column_end":41},"kind":{"Impl":{"id":141}},"from":{"krate":0,"index":2433},"to":{"krate":20,"index":243}},{"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8699718,"byte_end":8699723,"line_start":7195,"line_end":7195,"column_start":34,"column_end":39},"kind":{"Impl":{"id":142}},"from":{"krate":0,"index":2462},"to":{"krate":20,"index":243}},{"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8701014,"byte_end":8701022,"line_start":7238,"line_end":7238,"column_start":24,"column_end":32},"kind":{"Impl":{"id":143}},"from":{"krate":0,"index":2476},"to":{"krate":20,"index":256}},{"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8701934,"byte_end":8701939,"line_start":7255,"line_end":7255,"column_start":28,"column_end":33},"kind":{"Impl":{"id":144}},"from":{"krate":0,"index":140},"to":{"krate":0,"index":2484}},{"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8704377,"byte_end":8704382,"line_start":7300,"line_end":7300,"column_start":10,"column_end":15},"kind":{"Impl":{"id":145}},"from":{"krate":0,"index":3640},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8705591,"byte_end":8705598,"line_start":7321,"line_end":7321,"column_start":34,"column_end":41},"kind":{"Impl":{"id":146}},"from":{"krate":0,"index":2516},"to":{"krate":20,"index":243}},{"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8709008,"byte_end":8709013,"line_start":7422,"line_end":7422,"column_start":34,"column_end":39},"kind":{"Impl":{"id":147}},"from":{"krate":0,"index":2538},"to":{"krate":20,"index":243}},{"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8710311,"byte_end":8710326,"line_start":7465,"line_end":7465,"column_start":24,"column_end":39},"kind":{"Impl":{"id":148}},"from":{"krate":0,"index":2552},"to":{"krate":20,"index":256}},{"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8711828,"byte_end":8711833,"line_start":7489,"line_end":7489,"column_start":28,"column_end":33},"kind":{"Impl":{"id":149}},"from":{"krate":0,"index":140},"to":{"krate":0,"index":2560}},{"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8715969,"byte_end":8715974,"line_start":7532,"line_end":7532,"column_start":10,"column_end":15},"kind":{"Impl":{"id":150}},"from":{"krate":0,"index":3652},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8720463,"byte_end":8720470,"line_start":7561,"line_end":7561,"column_start":34,"column_end":41},"kind":{"Impl":{"id":151}},"from":{"krate":0,"index":2591},"to":{"krate":20,"index":243}},{"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8725609,"byte_end":8725614,"line_start":7701,"line_end":7701,"column_start":34,"column_end":39},"kind":{"Impl":{"id":152}},"from":{"krate":0,"index":2624},"to":{"krate":20,"index":243}},{"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8726909,"byte_end":8726921,"line_start":7744,"line_end":7744,"column_start":24,"column_end":36},"kind":{"Impl":{"id":153}},"from":{"krate":0,"index":2638},"to":{"krate":20,"index":256}},{"span":{"file_name":"/home/clozed/astrorust/Astrorust/target/rls/debug/build/wayland-client-081130e464acad35/out/wayland_c_api.rs","byte_start":8731522,"byte_end":8731527,"line_start":7767,"line_end":7767,"column_start":28,"column_end":33},"kind":{"Impl":{"id":154}},"from":{"krate":0,"index":140},"to":{"krate":0,"index":2646}}]}